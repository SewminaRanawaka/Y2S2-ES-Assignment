
ES_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00002d02  00002d96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018d  00800126  00800126  00002dbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f8  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002e76d  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005af8  00000000  00000000  00031b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000524b  00000000  00000000  00037689  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014d0  00000000  00000000  0003c8d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002fb8  00000000  00000000  0003dda4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f34  00000000  00000000  00040d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  00047c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__vector_7>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_18>
      4c:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	7f 03       	fmul	r23, r23
      c4:	28 05       	cpc	r18, r8

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e2 e0       	ldi	r30, 0x02	; 2
      da:	fd e2       	ldi	r31, 0x2D	; 45
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a6 32       	cpi	r26, 0x26	; 38
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	a6 e2       	ldi	r26, 0x26	; 38
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a3 3b       	cpi	r26, 0xB3	; 179
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c3 e6       	ldi	r28, 0x63	; 99
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	21 97       	sbiw	r28, 0x01	; 1
     102:	fe 01       	movw	r30, r28
     104:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__tablejump2__>
     108:	c1 36       	cpi	r28, 0x61	; 97
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 56 05 	call	0xaac	; 0xaac <main>
     112:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     11a:	26 e0       	ldi	r18, 0x06	; 6
     11c:	40 e8       	ldi	r20, 0x80	; 128
     11e:	55 e2       	ldi	r21, 0x25	; 37
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	8a e3       	ldi	r24, 0x3A	; 58
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN14HardwareSerial5beginEmh>
IRrecv irrecv(RECV_PIN);
decode_results results;

void setup() {
  Serial.begin(9600);
  pinMode(Led1, OUTPUT);
     12c:	61 e0       	ldi	r22, 0x01	; 1
     12e:	85 e0       	ldi	r24, 0x05	; 5
     130:	0e 94 7e 07 	call	0xefc	; 0xefc <pinMode>
  pinMode(Led2, OUTPUT);
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	86 e0       	ldi	r24, 0x06	; 6
     138:	0e 94 7e 07 	call	0xefc	; 0xefc <pinMode>
  pinMode(Led3, OUTPUT);
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	89 e0       	ldi	r24, 0x09	; 9
     140:	0e 94 7e 07 	call	0xefc	; 0xefc <pinMode>
  pinMode(Led4, OUTPUT);
     144:	61 e0       	ldi	r22, 0x01	; 1
     146:	8a e0       	ldi	r24, 0x0A	; 10
     148:	0e 94 7e 07 	call	0xefc	; 0xefc <pinMode>
  pinMode(redPin, OUTPUT);
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	8b e0       	ldi	r24, 0x0B	; 11
     150:	0e 94 7e 07 	call	0xefc	; 0xefc <pinMode>
  pinMode(greenPin, OUTPUT);
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	8c e0       	ldi	r24, 0x0C	; 12
     158:	0e 94 7e 07 	call	0xefc	; 0xefc <pinMode>
  pinMode(bluePin, OUTPUT);
     15c:	61 e0       	ldi	r22, 0x01	; 1
     15e:	8d e0       	ldi	r24, 0x0D	; 13
     160:	0e 94 7e 07 	call	0xefc	; 0xefc <pinMode>
  irrecv.enableIRIn();  // Start the receiver
     164:	87 e3       	ldi	r24, 0x37	; 55
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	0c 94 17 08 	jmp	0x102e	; 0x102e <_ZN6IRrecv10enableIRInEv>

0000016c <loop>:
}

void loop() {
  if (irrecv.decode(&results)) {
     16c:	66 e2       	ldi	r22, 0x26	; 38
     16e:	71 e0       	ldi	r23, 0x01	; 1
     170:	87 e3       	ldi	r24, 0x37	; 55
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN6IRrecv6decodeEP14decode_results>
     178:	89 2b       	or	r24, r25
     17a:	09 f4       	brne	.+2      	; 0x17e <loop+0x12>
     17c:	bf c2       	rjmp	.+1406   	; 0x6fc <__EEPROM_REGION_LENGTH__+0x2fc>
    Serial.println(results.value, DEC);
     17e:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <__data_end+0x3>
     182:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <__data_end+0x4>
     186:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__data_end+0x5>
     18a:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <__data_end+0x6>
     18e:	2a e0       	ldi	r18, 0x0A	; 10
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	8a e3       	ldi	r24, 0x3A	; 58
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN5Print7printlnEmi>
    if (results.value == 284099070) {
     19a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <__data_end+0x3>
     19e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end+0x4>
     1a2:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <__data_end+0x5>
     1a6:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <__data_end+0x6>
     1aa:	8e 3f       	cpi	r24, 0xFE	; 254
     1ac:	91 40       	sbci	r25, 0x01	; 1
     1ae:	af 4e       	sbci	r26, 0xEF	; 239
     1b0:	b0 41       	sbci	r27, 0x10	; 16
     1b2:	09 f0       	breq	.+2      	; 0x1b6 <loop+0x4a>
     1b4:	a6 c0       	rjmp	.+332    	; 0x302 <loop+0x196>

      if (count == 1) {
     1b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     1ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	91 05       	cpc	r25, r1
     1c2:	31 f4       	brne	.+12     	; 0x1d0 <loop+0x64>
        analogWrite(Led1, bright);
     1c4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1c8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1cc:	85 e0       	ldi	r24, 0x05	; 5
     1ce:	11 c0       	rjmp	.+34     	; 0x1f2 <loop+0x86>
        count++;
      } else if (count == 2) {
     1d0:	82 30       	cpi	r24, 0x02	; 2
     1d2:	91 05       	cpc	r25, r1
     1d4:	31 f4       	brne	.+12     	; 0x1e2 <loop+0x76>
        analogWrite(Led2, bright);
     1d6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1da:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1de:	86 e0       	ldi	r24, 0x06	; 6
     1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <loop+0x86>
        count++;
      } else if (count == 3) {
     1e2:	83 30       	cpi	r24, 0x03	; 3
     1e4:	91 05       	cpc	r25, r1
     1e6:	69 f4       	brne	.+26     	; 0x202 <loop+0x96>
        analogWrite(Led3, bright);
     1e8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1ec:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1f0:	89 e0       	ldi	r24, 0x09	; 9
     1f2:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
        count++;
     1f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     1fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	7c c0       	rjmp	.+248    	; 0x2fa <loop+0x18e>
      } else if (count == 4) {
     202:	84 30       	cpi	r24, 0x04	; 4
     204:	91 05       	cpc	r25, r1
     206:	31 f4       	brne	.+12     	; 0x214 <loop+0xa8>
        analogWrite(Led4, bright);
     208:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     20c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     210:	8a e0       	ldi	r24, 0x0A	; 10
     212:	ef cf       	rjmp	.-34     	; 0x1f2 <loop+0x86>
        count++;
      } else if (count == 5) {
     214:	85 30       	cpi	r24, 0x05	; 5
     216:	91 05       	cpc	r25, r1
     218:	31 f4       	brne	.+12     	; 0x226 <loop+0xba>
        digitalWrite(redPin, 1);    // Turn on  red
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	8b e0       	ldi	r24, 0x0B	; 11
     21e:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(greenPin, 0);  // Turn off green
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	08 c0       	rjmp	.+16     	; 0x236 <loop+0xca>
        digitalWrite(bluePin, 0);   // Turn off blue
        count++;
        rgbcount++;
      } else if (count == 6) {
     226:	86 30       	cpi	r24, 0x06	; 6
     228:	91 05       	cpc	r25, r1
     22a:	51 f4       	brne	.+20     	; 0x240 <loop+0xd4>
        digitalWrite(redPin, 0);    // Turn off red
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	8b e0       	ldi	r24, 0x0B	; 11
     230:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(greenPin, 1);  // Turn on green
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	8c e0       	ldi	r24, 0x0C	; 12
     238:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(bluePin, 0);   // Turn off blue
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	1f c0       	rjmp	.+62     	; 0x27e <loop+0x112>
        count++;
        rgbcount++;
      } else if (count == 7) {
     240:	87 30       	cpi	r24, 0x07	; 7
     242:	91 05       	cpc	r25, r1
     244:	11 f4       	brne	.+4      	; 0x24a <loop+0xde>
        digitalWrite(redPin, 0);    // Turn off red
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	12 c0       	rjmp	.+36     	; 0x26e <loop+0x102>
        digitalWrite(greenPin, 0);  // Turn off green
        digitalWrite(bluePin, 1);   // Turn on blue
        count++;
        rgbcount++;
      } else if (count == 8) {
     24a:	88 30       	cpi	r24, 0x08	; 8
     24c:	91 05       	cpc	r25, r1
     24e:	11 f4       	brne	.+4      	; 0x254 <loop+0xe8>
        digitalWrite(redPin, 1);    // Turn on red
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	ed cf       	rjmp	.-38     	; 0x22e <loop+0xc2>
        digitalWrite(greenPin, 1);  // Turn on green
        digitalWrite(bluePin, 0);   // Turn off blue
        count++;
        rgbcount++;
      } else if (count == 9) {
     254:	89 30       	cpi	r24, 0x09	; 9
     256:	91 05       	cpc	r25, r1
     258:	31 f4       	brne	.+12     	; 0x266 <loop+0xfa>
        digitalWrite(redPin, 0);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	8b e0       	ldi	r24, 0x0B	; 11
     25e:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(greenPin, 1);
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	08 c0       	rjmp	.+16     	; 0x276 <loop+0x10a>
        digitalWrite(bluePin, 1);
        count++;
        rgbcount++;
      } else if (count == 10) {
     266:	8a 30       	cpi	r24, 0x0A	; 10
     268:	91 05       	cpc	r25, r1
     26a:	f9 f4       	brne	.+62     	; 0x2aa <loop+0x13e>
        digitalWrite(redPin, 1);
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	8b e0       	ldi	r24, 0x0B	; 11
     270:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(greenPin, 0);
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	8c e0       	ldi	r24, 0x0C	; 12
     278:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(bluePin, 1);
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	8d e0       	ldi	r24, 0x0D	; 13
     280:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        count++;
     284:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     288:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
     292:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
        rgbcount++;
     296:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rgbcount>
     29a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rgbcount+0x1>
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <rgbcount+0x1>
     2a4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <rgbcount>
     2a8:	2c c0       	rjmp	.+88     	; 0x302 <loop+0x196>
      } else if (count == 11) {
     2aa:	0b 97       	sbiw	r24, 0x0b	; 11
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <loop+0x144>
     2ae:	10 c1       	rjmp	.+544    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
        digitalWrite(redPin, 1);
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	8b e0       	ldi	r24, 0x0B	; 11
     2b4:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(greenPin, 1);
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	8c e0       	ldi	r24, 0x0C	; 12
     2bc:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(bluePin, 1);
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	8d e0       	ldi	r24, 0x0D	; 13
     2c4:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        count++;
     2c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     2cc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     2d0:	ac 01       	movw	r20, r24
     2d2:	4f 5f       	subi	r20, 0xFF	; 255
     2d4:	5f 4f       	sbci	r21, 0xFF	; 255
     2d6:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <count+0x1>
     2da:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <count>
        rgbcount++;
     2de:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <rgbcount>
     2e2:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <rgbcount+0x1>
     2e6:	2f 5f       	subi	r18, 0xFF	; 255
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ea:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <rgbcount+0x1>
     2ee:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <rgbcount>
        if (count == 12) {
     2f2:	4c 30       	cpi	r20, 0x0C	; 12
     2f4:	51 05       	cpc	r21, r1
     2f6:	29 f4       	brne	.+10     	; 0x302 <loop+0x196>
          count = count - 7;
     2f8:	06 97       	sbiw	r24, 0x06	; 6
     2fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
     2fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
        }
      }
    }

    if (results.value == 284127630) {
     302:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <__data_end+0x3>
     306:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end+0x4>
     30a:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <__data_end+0x5>
     30e:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <__data_end+0x6>
     312:	8e 38       	cpi	r24, 0x8E	; 142
     314:	91 47       	sbci	r25, 0x71	; 113
     316:	af 4e       	sbci	r26, 0xEF	; 239
     318:	b0 41       	sbci	r27, 0x10	; 16
     31a:	09 f0       	breq	.+2      	; 0x31e <loop+0x1b2>
     31c:	d9 c0       	rjmp	.+434    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
      if (count == 2) {
     31e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <count>
     322:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <count+0x1>
     326:	62 30       	cpi	r22, 0x02	; 2
     328:	71 05       	cpc	r23, r1
     32a:	21 f4       	brne	.+8      	; 0x334 <loop+0x1c8>
        analogWrite(Led1, 0);
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	85 e0       	ldi	r24, 0x05	; 5
     332:	14 c0       	rjmp	.+40     	; 0x35c <loop+0x1f0>
        count--;
      } else if (count == 3) {
     334:	63 30       	cpi	r22, 0x03	; 3
     336:	71 05       	cpc	r23, r1
     338:	21 f4       	brne	.+8      	; 0x342 <loop+0x1d6>
        analogWrite(Led2, 0);
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	86 e0       	ldi	r24, 0x06	; 6
     340:	0d c0       	rjmp	.+26     	; 0x35c <loop+0x1f0>
        count--;
      } else if (count == 4) {
     342:	64 30       	cpi	r22, 0x04	; 4
     344:	71 05       	cpc	r23, r1
     346:	21 f4       	brne	.+8      	; 0x350 <loop+0x1e4>
        analogWrite(Led3, 0);
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	89 e0       	ldi	r24, 0x09	; 9
     34e:	06 c0       	rjmp	.+12     	; 0x35c <loop+0x1f0>
        count--;
      } else if (count == 5) {
     350:	65 30       	cpi	r22, 0x05	; 5
     352:	71 05       	cpc	r23, r1
     354:	79 f4       	brne	.+30     	; 0x374 <loop+0x208>
        analogWrite(Led4, 0);
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	8a e0       	ldi	r24, 0x0A	; 10
     35c:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
        count--;
     360:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     364:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
     36e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
     372:	ae c0       	rjmp	.+348    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>

      } else if (count == 6 && rgbcount % 7 == 1) {
     374:	66 30       	cpi	r22, 0x06	; 6
     376:	71 05       	cpc	r23, r1
     378:	19 f5       	brne	.+70     	; 0x3c0 <loop+0x254>
     37a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <rgbcount>
     37e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <rgbcount+0x1>
     382:	c9 01       	movw	r24, r18
     384:	67 e0       	ldi	r22, 0x07	; 7
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	09 f0       	breq	.+2      	; 0x392 <loop+0x226>
     390:	9f c0       	rjmp	.+318    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
        if (rgbcount == 1) {
     392:	21 30       	cpi	r18, 0x01	; 1
     394:	31 05       	cpc	r19, r1
     396:	11 f4       	brne	.+4      	; 0x39c <loop+0x230>
          digitalWrite(redPin, 0);
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	1f c0       	rjmp	.+62     	; 0x3da <loop+0x26e>
          digitalWrite(greenPin, 0);
          digitalWrite(bluePin, 0);
          count--;
          rgbcount--;
        } else {
          digitalWrite(redPin, 1);
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	8b e0       	ldi	r24, 0x0B	; 11
     3a0:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
          digitalWrite(greenPin, 1);
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	8c e0       	ldi	r24, 0x0C	; 12
     3a8:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
          digitalWrite(bluePin, 1);
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	8d e0       	ldi	r24, 0x0D	; 13
     3b0:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
          count = count + 6;
     3b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     3b8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     3bc:	06 96       	adiw	r24, 0x06	; 6
     3be:	7b c0       	rjmp	.+246    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
          rgbcount--;
        }

      } else if (count == 7 && rgbcount % 7 == 2) {
     3c0:	67 30       	cpi	r22, 0x07	; 7
     3c2:	71 05       	cpc	r23, r1
     3c4:	79 f4       	brne	.+30     	; 0x3e4 <loop+0x278>
     3c6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rgbcount>
     3ca:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rgbcount+0x1>
     3ce:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
     3d2:	02 97       	sbiw	r24, 0x02	; 2
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <loop+0x26c>
     3d6:	7c c0       	rjmp	.+248    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
        digitalWrite(redPin, 1);
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	8b e0       	ldi	r24, 0x0B	; 11
     3dc:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(greenPin, 0);  // Turn off green
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	33 c0       	rjmp	.+102    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
        digitalWrite(bluePin, 0);   // Turn off blue
        count--;
        rgbcount--;
      } else if (count == 8 && rgbcount % 7 == 3) {
     3e4:	68 30       	cpi	r22, 0x08	; 8
     3e6:	71 05       	cpc	r23, r1
     3e8:	69 f4       	brne	.+26     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3ea:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rgbcount>
     3ee:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rgbcount+0x1>
     3f2:	67 e0       	ldi	r22, 0x07	; 7
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
     3fa:	03 97       	sbiw	r24, 0x03	; 3
     3fc:	09 f0       	breq	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	68 c0       	rjmp	.+208    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
        digitalWrite(redPin, 0);    // Turn off red
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	1f c0       	rjmp	.+62     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
        digitalWrite(greenPin, 1);  // Turn off green
        digitalWrite(bluePin, 0);
        count--;
        rgbcount--;
      } else if (count == 9 && rgbcount % 7 == 4) {
     404:	69 30       	cpi	r22, 0x09	; 9
     406:	71 05       	cpc	r23, r1
     408:	69 f4       	brne	.+26     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     40a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rgbcount>
     40e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rgbcount+0x1>
     412:	67 e0       	ldi	r22, 0x07	; 7
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
     41a:	04 97       	sbiw	r24, 0x04	; 4
     41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     41e:	58 c0       	rjmp	.+176    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
        digitalWrite(redPin, 0);
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	39 c0       	rjmp	.+114    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
        digitalWrite(greenPin, 0);
        digitalWrite(bluePin, 1);
        count--;
        rgbcount--;
      } else if (count == 10 && rgbcount % 7 == 5) {
     424:	6a 30       	cpi	r22, 0x0A	; 10
     426:	71 05       	cpc	r23, r1
     428:	a9 f4       	brne	.+42     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     42a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rgbcount>
     42e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rgbcount+0x1>
     432:	67 e0       	ldi	r22, 0x07	; 7
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
     43a:	05 97       	sbiw	r24, 0x05	; 5
     43c:	09 f0       	breq	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	48 c0       	rjmp	.+144    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
        digitalWrite(redPin, 1);
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	8b e0       	ldi	r24, 0x0B	; 11
     444:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(greenPin, 1);
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	8c e0       	ldi	r24, 0x0C	; 12
     44c:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(bluePin, 0);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	29 c0       	rjmp	.+82     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
        count--;
        rgbcount--;
      } else if (count == 11 && rgbcount % 7 == 6) {
     454:	6b 30       	cpi	r22, 0x0B	; 11
     456:	71 05       	cpc	r23, r1
     458:	81 f4       	brne	.+32     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     45a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rgbcount>
     45e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rgbcount+0x1>
     462:	67 e0       	ldi	r22, 0x07	; 7
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
     46a:	06 97       	sbiw	r24, 0x06	; 6
     46c:	89 f5       	brne	.+98     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
        digitalWrite(redPin, 0);
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	8b e0       	ldi	r24, 0x0B	; 11
     472:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(greenPin, 1);
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	12 c0       	rjmp	.+36     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
        digitalWrite(bluePin, 1);
        count--;
        rgbcount--;
      } else if (count == 12 && rgbcount % 7 == 0) {
     47a:	6c 30       	cpi	r22, 0x0C	; 12
     47c:	71 05       	cpc	r23, r1
     47e:	41 f5       	brne	.+80     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
     480:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rgbcount>
     484:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rgbcount+0x1>
     488:	67 e0       	ldi	r22, 0x07	; 7
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
     490:	89 2b       	or	r24, r25
     492:	f1 f4       	brne	.+60     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
        digitalWrite(redPin, 1);
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	8b e0       	ldi	r24, 0x0B	; 11
     498:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(greenPin, 0);
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	8c e0       	ldi	r24, 0x0C	; 12
     4a0:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        digitalWrite(bluePin, 1);
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	8d e0       	ldi	r24, 0x0D	; 13
     4a8:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
        count--;
     4ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     4b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
     4ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
        rgbcount--;
     4be:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rgbcount>
     4c2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rgbcount+0x1>
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <rgbcount+0x1>
     4cc:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <rgbcount>
      }
    }

    if (results.value == 284123550) {
     4d0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <__data_end+0x3>
     4d4:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end+0x4>
     4d8:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <__data_end+0x5>
     4dc:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <__data_end+0x6>
     4e0:	8e 39       	cpi	r24, 0x9E	; 158
     4e2:	91 46       	sbci	r25, 0x61	; 97
     4e4:	af 4e       	sbci	r26, 0xEF	; 239
     4e6:	b0 41       	sbci	r27, 0x10	; 16
     4e8:	09 f0       	breq	.+2      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     4ea:	78 c0       	rjmp	.+240    	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
      if (bright >= 25 && bright <= 255) {
     4ec:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4f0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4f4:	cb 01       	movw	r24, r22
     4f6:	49 97       	sbiw	r24, 0x19	; 25
     4f8:	87 3e       	cpi	r24, 0xE7	; 231
     4fa:	91 05       	cpc	r25, r1
     4fc:	08 f0       	brcs	.+2      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     4fe:	f4 c0       	rjmp	.+488    	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
        bright -= 50;
     500:	62 53       	subi	r22, 0x32	; 50
     502:	71 09       	sbc	r23, r1
     504:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     508:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>

        switch (count) {
     50c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     510:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     514:	83 30       	cpi	r24, 0x03	; 3
     516:	91 05       	cpc	r25, r1
     518:	29 f1       	breq	.+74     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
     51a:	34 f4       	brge	.+12     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	91 05       	cpc	r25, r1
     520:	f9 f0       	breq	.+62     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
     522:	02 97       	sbiw	r24, 0x02	; 2
     524:	e9 f0       	breq	.+58     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
     526:	38 c0       	rjmp	.+112    	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
     528:	84 30       	cpi	r24, 0x04	; 4
     52a:	91 05       	cpc	r25, r1
     52c:	21 f1       	breq	.+72     	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
     52e:	05 97       	sbiw	r24, 0x05	; 5
     530:	99 f5       	brne	.+102    	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
            analogWrite(Led1, bright);
            analogWrite(Led2, bright);
            analogWrite(Led3, bright);
            break;
          case 5:
            analogWrite(Led1, bright);
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led2, bright);
     538:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     53c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     540:	86 e0       	ldi	r24, 0x06	; 6
     542:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led3, bright);
     546:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     54a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     54e:	89 e0       	ldi	r24, 0x09	; 9
     550:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led4, bright);
     554:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     558:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     55c:	8a e0       	ldi	r24, 0x0A	; 10
     55e:	1a c0       	rjmp	.+52     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
        switch (count) {
          case 1:
            analogWrite(Led1, bright);
            break;
          case 2:
            analogWrite(Led1, bright);
     560:	85 e0       	ldi	r24, 0x05	; 5
     562:	18 c0       	rjmp	.+48     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
            break;
          case 3:
            analogWrite(Led1, bright);
     564:	85 e0       	ldi	r24, 0x05	; 5
     566:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led2, bright);
     56a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     56e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     572:	86 e0       	ldi	r24, 0x06	; 6
     574:	0f c0       	rjmp	.+30     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
            break;
          case 4:
            analogWrite(Led1, bright);
     576:	85 e0       	ldi	r24, 0x05	; 5
     578:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led2, bright);
     57c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     580:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     584:	86 e0       	ldi	r24, 0x06	; 6
     586:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led3, bright);
     58a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     58e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     592:	89 e0       	ldi	r24, 0x09	; 9
            break;
          case 5:
            analogWrite(Led1, bright);
            analogWrite(Led2, bright);
            analogWrite(Led3, bright);
            analogWrite(Led4, bright);
     594:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            break;
        }
        if (count > 4) {
     598:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     59c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     5a0:	05 97       	sbiw	r24, 0x05	; 5
     5a2:	e4 f0       	brlt	.+56     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
          analogWrite(Led1, bright);
     5a4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5a8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5ac:	85 e0       	ldi	r24, 0x05	; 5
     5ae:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
          analogWrite(Led2, bright);
     5b2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5b6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5ba:	86 e0       	ldi	r24, 0x06	; 6
     5bc:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
          analogWrite(Led3, bright);
     5c0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5c4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5c8:	89 e0       	ldi	r24, 0x09	; 9
     5ca:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
          analogWrite(Led4, bright);
     5ce:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5d2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5d6:	8a e0       	ldi	r24, 0x0A	; 10
     5d8:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
        }
      }
    }
    if (results.value == 284148030) {
     5dc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <__data_end+0x3>
     5e0:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end+0x4>
     5e4:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <__data_end+0x5>
     5e8:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <__data_end+0x6>
     5ec:	8e 33       	cpi	r24, 0x3E	; 62
     5ee:	91 4c       	sbci	r25, 0xC1	; 193
     5f0:	af 4e       	sbci	r26, 0xEF	; 239
     5f2:	b0 41       	sbci	r27, 0x10	; 16
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
     5f6:	78 c0       	rjmp	.+240    	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
      if (bright > 0 && bright < 255) {
     5f8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5fc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     600:	cb 01       	movw	r24, r22
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	8e 3f       	cpi	r24, 0xFE	; 254
     606:	91 05       	cpc	r25, r1
     608:	08 f0       	brcs	.+2      	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
     60a:	6e c0       	rjmp	.+220    	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
        bright += 50;
     60c:	6e 5c       	subi	r22, 0xCE	; 206
     60e:	7f 4f       	sbci	r23, 0xFF	; 255
     610:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     614:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
        switch (count) {
     618:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     61c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     620:	83 30       	cpi	r24, 0x03	; 3
     622:	91 05       	cpc	r25, r1
     624:	29 f1       	breq	.+74     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
     626:	34 f4       	brge	.+12     	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
     628:	81 30       	cpi	r24, 0x01	; 1
     62a:	91 05       	cpc	r25, r1
     62c:	f9 f0       	breq	.+62     	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
     62e:	02 97       	sbiw	r24, 0x02	; 2
     630:	e9 f0       	breq	.+58     	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
     632:	38 c0       	rjmp	.+112    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
     634:	84 30       	cpi	r24, 0x04	; 4
     636:	91 05       	cpc	r25, r1
     638:	21 f1       	breq	.+72     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
     63a:	05 97       	sbiw	r24, 0x05	; 5
     63c:	99 f5       	brne	.+102    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
            analogWrite(Led1, bright);
            analogWrite(Led2, bright);
            analogWrite(Led3, bright);
            break;
          case 5:
            analogWrite(Led1, bright);
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led2, bright);
     644:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     648:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     64c:	86 e0       	ldi	r24, 0x06	; 6
     64e:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led3, bright);
     652:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     656:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     65a:	89 e0       	ldi	r24, 0x09	; 9
     65c:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led4, bright);
     660:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     664:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     668:	8a e0       	ldi	r24, 0x0A	; 10
     66a:	1a c0       	rjmp	.+52     	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
        switch (count) {
          case 1:
            analogWrite(Led1, bright);
            break;
          case 2:
            analogWrite(Led1, bright);
     66c:	85 e0       	ldi	r24, 0x05	; 5
     66e:	18 c0       	rjmp	.+48     	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
            break;
          case 3:
            analogWrite(Led1, bright);
     670:	85 e0       	ldi	r24, 0x05	; 5
     672:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led2, bright);
     676:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     67a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     67e:	86 e0       	ldi	r24, 0x06	; 6
     680:	0f c0       	rjmp	.+30     	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
            break;
          case 4:
            analogWrite(Led1, bright);
     682:	85 e0       	ldi	r24, 0x05	; 5
     684:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led2, bright);
     688:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     68c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     690:	86 e0       	ldi	r24, 0x06	; 6
     692:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            analogWrite(Led3, bright);
     696:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     69a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     69e:	89 e0       	ldi	r24, 0x09	; 9
            break;
          case 5:
            analogWrite(Led1, bright);
            analogWrite(Led2, bright);
            analogWrite(Led3, bright);
            analogWrite(Led4, bright);
     6a0:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
            break;
        }
        if (count > 4) {
     6a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
     6a8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
     6ac:	05 97       	sbiw	r24, 0x05	; 5
     6ae:	e4 f0       	brlt	.+56     	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
          analogWrite(Led1, bright);
     6b0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6b4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6b8:	85 e0       	ldi	r24, 0x05	; 5
     6ba:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
          analogWrite(Led2, bright);
     6be:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6c2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6c6:	86 e0       	ldi	r24, 0x06	; 6
     6c8:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
          analogWrite(Led3, bright);
     6cc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6d0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6d4:	89 e0       	ldi	r24, 0x09	; 9
     6d6:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
          analogWrite(Led4, bright);
     6da:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6de:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6e2:	8a e0       	ldi	r24, 0x0A	; 10
     6e4:	0e 94 f6 06 	call	0xdec	; 0xdec <analogWrite>
        }
      }
    }

    delay(500);
     6e8:	64 ef       	ldi	r22, 0xF4	; 244
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <delay>
    irrecv.resume();  // Receive the next value
     6f4:	87 e3       	ldi	r24, 0x37	; 55
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0c 94 2e 08 	jmp	0x105c	; 0x105c <_ZN6IRrecv6resumeEv>
     6fc:	08 95       	ret

000006fe <_GLOBAL__sub_I_count>:

int count = 1;
int bright = 255;
int rgbcount = 0;

IRrecv irrecv(RECV_PIN);
     6fe:	63 e0       	ldi	r22, 0x03	; 3
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	87 e3       	ldi	r24, 0x37	; 55
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0c 94 12 08 	jmp	0x1024	; 0x1024 <_ZN6IRrecvC1Ei>

0000070a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     70a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     70c:	91 8d       	ldd	r25, Z+25	; 0x19
     70e:	22 8d       	ldd	r18, Z+26	; 0x1a
     710:	89 2f       	mov	r24, r25
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	80 5c       	subi	r24, 0xC0	; 192
     716:	9f 4f       	sbci	r25, 0xFF	; 255
     718:	82 1b       	sub	r24, r18
     71a:	91 09       	sbc	r25, r1
}
     71c:	8f 73       	andi	r24, 0x3F	; 63
     71e:	99 27       	eor	r25, r25
     720:	08 95       	ret

00000722 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     722:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     724:	91 8d       	ldd	r25, Z+25	; 0x19
     726:	82 8d       	ldd	r24, Z+26	; 0x1a
     728:	98 17       	cp	r25, r24
     72a:	31 f0       	breq	.+12     	; 0x738 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     72c:	82 8d       	ldd	r24, Z+26	; 0x1a
     72e:	e8 0f       	add	r30, r24
     730:	f1 1d       	adc	r31, r1
     732:	85 8d       	ldd	r24, Z+29	; 0x1d
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     73c:	08 95       	ret

0000073e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     73e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     740:	91 8d       	ldd	r25, Z+25	; 0x19
     742:	82 8d       	ldd	r24, Z+26	; 0x1a
     744:	98 17       	cp	r25, r24
     746:	61 f0       	breq	.+24     	; 0x760 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     748:	82 8d       	ldd	r24, Z+26	; 0x1a
     74a:	df 01       	movw	r26, r30
     74c:	a8 0f       	add	r26, r24
     74e:	b1 1d       	adc	r27, r1
     750:	5d 96       	adiw	r26, 0x1d	; 29
     752:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     754:	92 8d       	ldd	r25, Z+26	; 0x1a
     756:	9f 5f       	subi	r25, 0xFF	; 255
     758:	9f 73       	andi	r25, 0x3F	; 63
     75a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     764:	08 95       	ret

00000766 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     766:	fc 01       	movw	r30, r24
     768:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     76a:	44 8d       	ldd	r20, Z+28	; 0x1c
     76c:	25 2f       	mov	r18, r21
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	84 2f       	mov	r24, r20
     772:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     774:	82 1b       	sub	r24, r18
     776:	93 0b       	sbc	r25, r19
     778:	54 17       	cp	r21, r20
     77a:	10 f0       	brcs	.+4      	; 0x780 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     77c:	cf 96       	adiw	r24, 0x3f	; 63
     77e:	08 95       	ret
  return tail - head - 1;
     780:	01 97       	sbiw	r24, 0x01	; 1
}
     782:	08 95       	ret

00000784 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     784:	8e e1       	ldi	r24, 0x1E	; 30
     786:	95 e0       	ldi	r25, 0x05	; 5
     788:	89 2b       	or	r24, r25
     78a:	49 f0       	breq	.+18     	; 0x79e <_Z14serialEventRunv+0x1a>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	89 2b       	or	r24, r25
     792:	29 f0       	breq	.+10     	; 0x79e <_Z14serialEventRunv+0x1a>
     794:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_Z17Serial0_availablev>
     798:	81 11       	cpse	r24, r1
     79a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     79e:	08 95       	ret

000007a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     7a0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     7a2:	84 8d       	ldd	r24, Z+28	; 0x1c
     7a4:	df 01       	movw	r26, r30
     7a6:	a8 0f       	add	r26, r24
     7a8:	b1 1d       	adc	r27, r1
     7aa:	a3 5a       	subi	r26, 0xA3	; 163
     7ac:	bf 4f       	sbci	r27, 0xFF	; 255
     7ae:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     7b0:	84 8d       	ldd	r24, Z+28	; 0x1c
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	8f 73       	andi	r24, 0x3F	; 63
     7b8:	99 27       	eor	r25, r25
     7ba:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     7bc:	a6 89       	ldd	r26, Z+22	; 0x16
     7be:	b7 89       	ldd	r27, Z+23	; 0x17
     7c0:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     7c2:	a0 89       	ldd	r26, Z+16	; 0x10
     7c4:	b1 89       	ldd	r27, Z+17	; 0x11
     7c6:	8c 91       	ld	r24, X
     7c8:	83 70       	andi	r24, 0x03	; 3
     7ca:	80 64       	ori	r24, 0x40	; 64
     7cc:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     7ce:	93 8d       	ldd	r25, Z+27	; 0x1b
     7d0:	84 8d       	ldd	r24, Z+28	; 0x1c
     7d2:	98 13       	cpse	r25, r24
     7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     7d6:	02 88       	ldd	r0, Z+18	; 0x12
     7d8:	f3 89       	ldd	r31, Z+19	; 0x13
     7da:	e0 2d       	mov	r30, r0
     7dc:	80 81       	ld	r24, Z
     7de:	8f 7d       	andi	r24, 0xDF	; 223
     7e0:	80 83       	st	Z, r24
     7e2:	08 95       	ret

000007e4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
  _written = true;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     7f6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7fa:	98 13       	cpse	r25, r24
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7fe:	e8 89       	ldd	r30, Y+16	; 0x10
     800:	f9 89       	ldd	r31, Y+17	; 0x11
     802:	80 81       	ld	r24, Z
     804:	85 fd       	sbrc	r24, 5
     806:	26 c0       	rjmp	.+76     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     808:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     80a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     80c:	10 e0       	ldi	r17, 0x00	; 0
     80e:	0f 5f       	subi	r16, 0xFF	; 255
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	0f 73       	andi	r16, 0x3F	; 63
     814:	11 27       	eor	r17, r17
     816:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     818:	8c 8d       	ldd	r24, Y+28	; 0x1c
     81a:	e8 12       	cpse	r14, r24
     81c:	0c c0       	rjmp	.+24     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
    if (bit_is_clear(SREG, SREG_I)) {
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	07 fc       	sbrc	r0, 7
     822:	fa cf       	rjmp	.-12     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     824:	e8 89       	ldd	r30, Y+16	; 0x10
     826:	f9 89       	ldd	r31, Y+17	; 0x11
     828:	80 81       	ld	r24, Z
     82a:	85 ff       	sbrs	r24, 5
     82c:	f5 cf       	rjmp	.-22     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	_tx_udr_empty_irq();
     82e:	ce 01       	movw	r24, r28
     830:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     834:	f1 cf       	rjmp	.-30     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     836:	8b 8d       	ldd	r24, Y+27	; 0x1b
     838:	fe 01       	movw	r30, r28
     83a:	e8 0f       	add	r30, r24
     83c:	f1 1d       	adc	r31, r1
     83e:	e3 5a       	subi	r30, 0xA3	; 163
     840:	ff 4f       	sbci	r31, 0xFF	; 255
     842:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     844:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     846:	f8 94       	cli
    _tx_buffer_head = i;
     848:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     84a:	ea 89       	ldd	r30, Y+18	; 0x12
     84c:	fb 89       	ldd	r31, Y+19	; 0x13
     84e:	80 81       	ld	r24, Z
     850:	80 62       	ori	r24, 0x20	; 32
     852:	0a c0       	rjmp	.+20     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     854:	9f b7       	in	r25, 0x3f	; 63
     856:	f8 94       	cli
      *_udr = c;
     858:	ee 89       	ldd	r30, Y+22	; 0x16
     85a:	ff 89       	ldd	r31, Y+23	; 0x17
     85c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     85e:	e8 89       	ldd	r30, Y+16	; 0x10
     860:	f9 89       	ldd	r31, Y+17	; 0x11
     862:	80 81       	ld	r24, Z
     864:	83 70       	andi	r24, 0x03	; 3
     866:	80 64       	ori	r24, 0x40	; 64
     868:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     86a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	08 95       	ret

0000087e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     884:	88 8d       	ldd	r24, Y+24	; 0x18
     886:	88 23       	and	r24, r24
     888:	c9 f0       	breq	.+50     	; 0x8bc <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     88a:	ea 89       	ldd	r30, Y+18	; 0x12
     88c:	fb 89       	ldd	r31, Y+19	; 0x13
     88e:	80 81       	ld	r24, Z
     890:	85 fd       	sbrc	r24, 5
     892:	05 c0       	rjmp	.+10     	; 0x89e <_ZN14HardwareSerial5flushEv+0x20>
     894:	a8 89       	ldd	r26, Y+16	; 0x10
     896:	b9 89       	ldd	r27, Y+17	; 0x11
     898:	8c 91       	ld	r24, X
     89a:	86 fd       	sbrc	r24, 6
     89c:	0f c0       	rjmp	.+30     	; 0x8bc <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	07 fc       	sbrc	r0, 7
     8a2:	f5 cf       	rjmp	.-22     	; 0x88e <_ZN14HardwareSerial5flushEv+0x10>
     8a4:	80 81       	ld	r24, Z
     8a6:	85 ff       	sbrs	r24, 5
     8a8:	f2 cf       	rjmp	.-28     	; 0x88e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     8aa:	a8 89       	ldd	r26, Y+16	; 0x10
     8ac:	b9 89       	ldd	r27, Y+17	; 0x11
     8ae:	8c 91       	ld	r24, X
     8b0:	85 ff       	sbrs	r24, 5
     8b2:	ed cf       	rjmp	.-38     	; 0x88e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     8b4:	ce 01       	movw	r24, r28
     8b6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     8ba:	e7 cf       	rjmp	.-50     	; 0x88a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	ec 01       	movw	r28, r24
     8d2:	6a 01       	movw	r12, r20
     8d4:	7b 01       	movw	r14, r22
     8d6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     8d8:	e8 89       	ldd	r30, Y+16	; 0x10
     8da:	f9 89       	ldd	r31, Y+17	; 0x11
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8e0:	41 15       	cp	r20, r1
     8e2:	51 4e       	sbci	r21, 0xE1	; 225
     8e4:	61 05       	cpc	r22, r1
     8e6:	71 05       	cpc	r23, r1
     8e8:	b1 f0       	breq	.+44     	; 0x916 <__stack+0x17>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	79 e0       	ldi	r23, 0x09	; 9
     8ee:	8d e3       	ldi	r24, 0x3D	; 61
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a7 01       	movw	r20, r14
     8f4:	96 01       	movw	r18, r12
     8f6:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodsi4>
     8fa:	da 01       	movw	r26, r20
     8fc:	c9 01       	movw	r24, r18
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	a1 09       	sbc	r26, r1
     902:	b1 09       	sbc	r27, r1
     904:	b6 95       	lsr	r27
     906:	a7 95       	ror	r26
     908:	97 95       	ror	r25
     90a:	87 95       	ror	r24
     90c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     90e:	21 15       	cp	r18, r1
     910:	80 e1       	ldi	r24, 0x10	; 16
     912:	38 07       	cpc	r19, r24
     914:	a8 f0       	brcs	.+42     	; 0x940 <__stack+0x41>
  {
    *_ucsra = 0;
     916:	e8 89       	ldd	r30, Y+16	; 0x10
     918:	f9 89       	ldd	r31, Y+17	; 0x11
     91a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     91c:	60 e8       	ldi	r22, 0x80	; 128
     91e:	74 e8       	ldi	r23, 0x84	; 132
     920:	8e e1       	ldi	r24, 0x1E	; 30
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a7 01       	movw	r20, r14
     926:	96 01       	movw	r18, r12
     928:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodsi4>
     92c:	da 01       	movw	r26, r20
     92e:	c9 01       	movw	r24, r18
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	a1 09       	sbc	r26, r1
     934:	b1 09       	sbc	r27, r1
     936:	b6 95       	lsr	r27
     938:	a7 95       	ror	r26
     93a:	97 95       	ror	r25
     93c:	87 95       	ror	r24
     93e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     940:	ec 85       	ldd	r30, Y+12	; 0x0c
     942:	fd 85       	ldd	r31, Y+13	; 0x0d
     944:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     946:	ee 85       	ldd	r30, Y+14	; 0x0e
     948:	ff 85       	ldd	r31, Y+15	; 0x0f
     94a:	20 83       	st	Z, r18

  _written = false;
     94c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     94e:	ec 89       	ldd	r30, Y+20	; 0x14
     950:	fd 89       	ldd	r31, Y+21	; 0x15
     952:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     954:	ea 89       	ldd	r30, Y+18	; 0x12
     956:	fb 89       	ldd	r31, Y+19	; 0x13
     958:	80 81       	ld	r24, Z
     95a:	80 61       	ori	r24, 0x10	; 16
     95c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     95e:	ea 89       	ldd	r30, Y+18	; 0x12
     960:	fb 89       	ldd	r31, Y+19	; 0x13
     962:	80 81       	ld	r24, Z
     964:	88 60       	ori	r24, 0x08	; 8
     966:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     968:	ea 89       	ldd	r30, Y+18	; 0x12
     96a:	fb 89       	ldd	r31, Y+19	; 0x13
     96c:	80 81       	ld	r24, Z
     96e:	80 68       	ori	r24, 0x80	; 128
     970:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     972:	ea 89       	ldd	r30, Y+18	; 0x12
     974:	fb 89       	ldd	r31, Y+19	; 0x13
     976:	80 81       	ld	r24, Z
     978:	8f 7d       	andi	r24, 0xDF	; 223
     97a:	80 83       	st	Z, r24
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	08 95       	ret

0000098c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	2f 93       	push	r18
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	ef 93       	push	r30
     99e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     9a0:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Serial+0x10>
     9a4:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Serial+0x11>
     9a8:	80 81       	ld	r24, Z
     9aa:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Serial+0x16>
     9ae:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Serial+0x17>
     9b2:	82 fd       	sbrc	r24, 2
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     9b6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     9b8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Serial+0x19>
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9c0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <Serial+0x1a>
     9c4:	82 17       	cp	r24, r18
     9c6:	51 f0       	breq	.+20     	; 0x9dc <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     9c8:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <Serial+0x19>
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	e6 5c       	subi	r30, 0xC6	; 198
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     9d4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Serial+0x19>
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9da:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     9dc:	ff 91       	pop	r31
     9de:	ef 91       	pop	r30
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	2f 91       	pop	r18
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	0f 90       	pop	r0
     9ec:	1f 90       	pop	r1
     9ee:	18 95       	reti

000009f0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     9f0:	1f 92       	push	r1
     9f2:	0f 92       	push	r0
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	0f 92       	push	r0
     9f8:	11 24       	eor	r1, r1
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     a12:	8a e3       	ldi	r24, 0x3A	; 58
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a1a:	ff 91       	pop	r31
     a1c:	ef 91       	pop	r30
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a3c:	8a e3       	ldi	r24, 0x3A	; 58
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN14HardwareSerial9availableEv>
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	89 2b       	or	r24, r25
     a48:	09 f4       	brne	.+2      	; 0xa4c <_Z17Serial0_availablev+0x10>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
}
     a4c:	82 2f       	mov	r24, r18
     a4e:	08 95       	ret

00000a50 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a50:	ea e3       	ldi	r30, 0x3A	; 58
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	13 82       	std	Z+3, r1	; 0x03
     a56:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a58:	88 ee       	ldi	r24, 0xE8	; 232
     a5a:	93 e0       	ldi	r25, 0x03	; 3
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	84 83       	std	Z+4, r24	; 0x04
     a62:	95 83       	std	Z+5, r25	; 0x05
     a64:	a6 83       	std	Z+6, r26	; 0x06
     a66:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a68:	89 e0       	ldi	r24, 0x09	; 9
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	91 83       	std	Z+1, r25	; 0x01
     a6e:	80 83       	st	Z, r24
     a70:	85 ec       	ldi	r24, 0xC5	; 197
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	95 87       	std	Z+13, r25	; 0x0d
     a76:	84 87       	std	Z+12, r24	; 0x0c
     a78:	84 ec       	ldi	r24, 0xC4	; 196
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	97 87       	std	Z+15, r25	; 0x0f
     a7e:	86 87       	std	Z+14, r24	; 0x0e
     a80:	80 ec       	ldi	r24, 0xC0	; 192
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	91 8b       	std	Z+17, r25	; 0x11
     a86:	80 8b       	std	Z+16, r24	; 0x10
     a88:	81 ec       	ldi	r24, 0xC1	; 193
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	93 8b       	std	Z+19, r25	; 0x13
     a8e:	82 8b       	std	Z+18, r24	; 0x12
     a90:	82 ec       	ldi	r24, 0xC2	; 194
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	95 8b       	std	Z+21, r25	; 0x15
     a96:	84 8b       	std	Z+20, r24	; 0x14
     a98:	86 ec       	ldi	r24, 0xC6	; 198
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	97 8b       	std	Z+23, r25	; 0x17
     a9e:	86 8b       	std	Z+22, r24	; 0x16
     aa0:	11 8e       	std	Z+25, r1	; 0x19
     aa2:	12 8e       	std	Z+26, r1	; 0x1a
     aa4:	13 8e       	std	Z+27, r1	; 0x1b
     aa6:	14 8e       	std	Z+28, r1	; 0x1c
     aa8:	08 95       	ret

00000aaa <initVariant>:
     aaa:	08 95       	ret

00000aac <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     aac:	0e 94 bb 06 	call	0xd76	; 0xd76 <init>

	initVariant();
     ab0:	0e 94 55 05 	call	0xaaa	; 0xaaa <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     ab4:	0e 94 8d 00 	call	0x11a	; 0x11a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ab8:	c2 ec       	ldi	r28, 0xC2	; 194
     aba:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     abc:	0e 94 b6 00 	call	0x16c	; 0x16c <loop>
		if (serialEventRun) serialEventRun();
     ac0:	20 97       	sbiw	r28, 0x00	; 0
     ac2:	e1 f3       	breq	.-8      	; 0xabc <main+0x10>
     ac4:	0e 94 c2 03 	call	0x784	; 0x784 <_Z14serialEventRunv>
     ac8:	f9 cf       	rjmp	.-14     	; 0xabc <main+0x10>

00000aca <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	6c 01       	movw	r12, r24
     adc:	7a 01       	movw	r14, r20
     ade:	8b 01       	movw	r16, r22
     ae0:	c0 e0       	ldi	r28, 0x00	; 0
     ae2:	d0 e0       	ldi	r29, 0x00	; 0
     ae4:	ce 15       	cp	r28, r14
     ae6:	df 05       	cpc	r29, r15
     ae8:	81 f0       	breq	.+32     	; 0xb0a <_ZN5Print5writeEPKhj+0x40>
     aea:	d8 01       	movw	r26, r16
     aec:	6d 91       	ld	r22, X+
     aee:	8d 01       	movw	r16, r26
     af0:	d6 01       	movw	r26, r12
     af2:	ed 91       	ld	r30, X+
     af4:	fc 91       	ld	r31, X
     af6:	01 90       	ld	r0, Z+
     af8:	f0 81       	ld	r31, Z
     afa:	e0 2d       	mov	r30, r0
     afc:	c6 01       	movw	r24, r12
     afe:	09 95       	icall
     b00:	89 2b       	or	r24, r25
     b02:	11 f0       	breq	.+4      	; 0xb08 <_ZN5Print5writeEPKhj+0x3e>
     b04:	21 96       	adiw	r28, 0x01	; 1
     b06:	ee cf       	rjmp	.-36     	; 0xae4 <_ZN5Print5writeEPKhj+0x1a>
     b08:	7e 01       	movw	r14, r28
     b0a:	c7 01       	movw	r24, r14
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	08 95       	ret

00000b1e <_ZN5Print5writeEPKc>:
     b1e:	61 15       	cp	r22, r1
     b20:	71 05       	cpc	r23, r1
     b22:	79 f0       	breq	.+30     	; 0xb42 <_ZN5Print5writeEPKc+0x24>
     b24:	fb 01       	movw	r30, r22
     b26:	01 90       	ld	r0, Z+
     b28:	00 20       	and	r0, r0
     b2a:	e9 f7       	brne	.-6      	; 0xb26 <_ZN5Print5writeEPKc+0x8>
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	af 01       	movw	r20, r30
     b30:	46 1b       	sub	r20, r22
     b32:	57 0b       	sbc	r21, r23
     b34:	dc 01       	movw	r26, r24
     b36:	ed 91       	ld	r30, X+
     b38:	fc 91       	ld	r31, X
     b3a:	02 80       	ldd	r0, Z+2	; 0x02
     b3c:	f3 81       	ldd	r31, Z+3	; 0x03
     b3e:	e0 2d       	mov	r30, r0
     b40:	09 94       	ijmp
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	08 95       	ret

00000b48 <_ZN5Print7printlnEv>:
     b48:	67 e1       	ldi	r22, 0x17	; 23
     b4a:	71 e0       	ldi	r23, 0x01	; 1
     b4c:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <_ZN5Print5writeEPKc>

00000b50 <_ZN5Print11printNumberEmh>:
     b50:	8f 92       	push	r8
     b52:	9f 92       	push	r9
     b54:	af 92       	push	r10
     b56:	bf 92       	push	r11
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	a1 97       	sbiw	r28, 0x21	; 33
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	7c 01       	movw	r14, r24
     b76:	fa 01       	movw	r30, r20
     b78:	cb 01       	movw	r24, r22
     b7a:	19 a2       	std	Y+33, r1	; 0x21
     b7c:	22 30       	cpi	r18, 0x02	; 2
     b7e:	08 f4       	brcc	.+2      	; 0xb82 <_ZN5Print11printNumberEmh+0x32>
     b80:	2a e0       	ldi	r18, 0x0A	; 10
     b82:	8e 01       	movw	r16, r28
     b84:	0f 5d       	subi	r16, 0xDF	; 223
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	82 2e       	mov	r8, r18
     b8a:	91 2c       	mov	r9, r1
     b8c:	a1 2c       	mov	r10, r1
     b8e:	b1 2c       	mov	r11, r1
     b90:	bf 01       	movw	r22, r30
     b92:	a5 01       	movw	r20, r10
     b94:	94 01       	movw	r18, r8
     b96:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodsi4>
     b9a:	f9 01       	movw	r30, r18
     b9c:	ca 01       	movw	r24, r20
     b9e:	01 50       	subi	r16, 0x01	; 1
     ba0:	11 09       	sbc	r17, r1
     ba2:	6a 30       	cpi	r22, 0x0A	; 10
     ba4:	10 f4       	brcc	.+4      	; 0xbaa <_ZN5Print11printNumberEmh+0x5a>
     ba6:	60 5d       	subi	r22, 0xD0	; 208
     ba8:	01 c0       	rjmp	.+2      	; 0xbac <_ZN5Print11printNumberEmh+0x5c>
     baa:	69 5c       	subi	r22, 0xC9	; 201
     bac:	d8 01       	movw	r26, r16
     bae:	6c 93       	st	X, r22
     bb0:	23 2b       	or	r18, r19
     bb2:	24 2b       	or	r18, r20
     bb4:	25 2b       	or	r18, r21
     bb6:	61 f7       	brne	.-40     	; 0xb90 <_ZN5Print11printNumberEmh+0x40>
     bb8:	b8 01       	movw	r22, r16
     bba:	c7 01       	movw	r24, r14
     bbc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN5Print5writeEPKc>
     bc0:	a1 96       	adiw	r28, 0x21	; 33
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	bf 90       	pop	r11
     bda:	af 90       	pop	r10
     bdc:	9f 90       	pop	r9
     bde:	8f 90       	pop	r8
     be0:	08 95       	ret

00000be2 <_ZN5Print5printEmi>:
     be2:	21 15       	cp	r18, r1
     be4:	31 05       	cpc	r19, r1
     be6:	41 f4       	brne	.+16     	; 0xbf8 <_ZN5Print5printEmi+0x16>
     be8:	dc 01       	movw	r26, r24
     bea:	ed 91       	ld	r30, X+
     bec:	fc 91       	ld	r31, X
     bee:	01 90       	ld	r0, Z+
     bf0:	f0 81       	ld	r31, Z
     bf2:	e0 2d       	mov	r30, r0
     bf4:	64 2f       	mov	r22, r20
     bf6:	09 94       	ijmp
     bf8:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <_ZN5Print11printNumberEmh>

00000bfc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     c06:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_ZN5Print5printEmi>
     c0a:	8c 01       	movw	r16, r24
  n += println();
     c0c:	ce 01       	movw	r24, r28
     c0e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN5Print7printlnEv>
  return n;
}
     c12:	80 0f       	add	r24, r16
     c14:	91 1f       	adc	r25, r17
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     c20:	1f 92       	push	r1
     c22:	0f 92       	push	r0
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	0f 92       	push	r0
     c28:	11 24       	eor	r1, r1
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	8f 93       	push	r24
     c30:	9f 93       	push	r25
     c32:	af 93       	push	r26
     c34:	bf 93       	push	r27
     c36:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <timer0_millis>
     c3a:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <timer0_millis+0x1>
     c3e:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <timer0_millis+0x2>
     c42:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <timer0_millis+0x3>
     c46:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <timer0_fract>
     c4a:	23 e0       	ldi	r18, 0x03	; 3
     c4c:	23 0f       	add	r18, r19
     c4e:	2d 37       	cpi	r18, 0x7D	; 125
     c50:	20 f4       	brcc	.+8      	; 0xc5a <__vector_16+0x3a>
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	a1 1d       	adc	r26, r1
     c56:	b1 1d       	adc	r27, r1
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <__vector_16+0x44>
     c5a:	26 e8       	ldi	r18, 0x86	; 134
     c5c:	23 0f       	add	r18, r19
     c5e:	02 96       	adiw	r24, 0x02	; 2
     c60:	a1 1d       	adc	r26, r1
     c62:	b1 1d       	adc	r27, r1
     c64:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <timer0_fract>
     c68:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <timer0_millis>
     c6c:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <timer0_millis+0x1>
     c70:	a0 93 da 01 	sts	0x01DA, r26	; 0x8001da <timer0_millis+0x2>
     c74:	b0 93 db 01 	sts	0x01DB, r27	; 0x8001db <timer0_millis+0x3>
     c78:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_overflow_count>
     c7c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_overflow_count+0x1>
     c80:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_overflow_count+0x2>
     c84:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_overflow_count+0x3>
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	a1 1d       	adc	r26, r1
     c8c:	b1 1d       	adc	r27, r1
     c8e:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <timer0_overflow_count>
     c92:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <timer0_overflow_count+0x1>
     c96:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <timer0_overflow_count+0x2>
     c9a:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <timer0_overflow_count+0x3>
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	3f 91       	pop	r19
     ca8:	2f 91       	pop	r18
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <micros>:
     cb4:	3f b7       	in	r19, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_overflow_count>
     cbc:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_overflow_count+0x1>
     cc0:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_overflow_count+0x2>
     cc4:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_overflow_count+0x3>
     cc8:	26 b5       	in	r18, 0x26	; 38
     cca:	a8 9b       	sbis	0x15, 0	; 21
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <micros+0x24>
     cce:	2f 3f       	cpi	r18, 0xFF	; 255
     cd0:	19 f0       	breq	.+6      	; 0xcd8 <micros+0x24>
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	a1 1d       	adc	r26, r1
     cd6:	b1 1d       	adc	r27, r1
     cd8:	3f bf       	out	0x3f, r19	; 63
     cda:	ba 2f       	mov	r27, r26
     cdc:	a9 2f       	mov	r26, r25
     cde:	98 2f       	mov	r25, r24
     ce0:	88 27       	eor	r24, r24
     ce2:	82 0f       	add	r24, r18
     ce4:	91 1d       	adc	r25, r1
     ce6:	a1 1d       	adc	r26, r1
     ce8:	b1 1d       	adc	r27, r1
     cea:	bc 01       	movw	r22, r24
     cec:	cd 01       	movw	r24, r26
     cee:	42 e0       	ldi	r20, 0x02	; 2
     cf0:	66 0f       	add	r22, r22
     cf2:	77 1f       	adc	r23, r23
     cf4:	88 1f       	adc	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	4a 95       	dec	r20
     cfa:	d1 f7       	brne	.-12     	; 0xcf0 <micros+0x3c>
     cfc:	08 95       	ret

00000cfe <delay>:
     cfe:	8f 92       	push	r8
     d00:	9f 92       	push	r9
     d02:	af 92       	push	r10
     d04:	bf 92       	push	r11
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	6b 01       	movw	r12, r22
     d10:	7c 01       	movw	r14, r24
     d12:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <micros>
     d16:	4b 01       	movw	r8, r22
     d18:	5c 01       	movw	r10, r24
     d1a:	c1 14       	cp	r12, r1
     d1c:	d1 04       	cpc	r13, r1
     d1e:	e1 04       	cpc	r14, r1
     d20:	f1 04       	cpc	r15, r1
     d22:	01 f1       	breq	.+64     	; 0xd64 <delay+0x66>
     d24:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <yield>
     d28:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <micros>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	88 19       	sub	r24, r8
     d32:	99 09       	sbc	r25, r9
     d34:	aa 09       	sbc	r26, r10
     d36:	bb 09       	sbc	r27, r11
     d38:	88 3e       	cpi	r24, 0xE8	; 232
     d3a:	93 40       	sbci	r25, 0x03	; 3
     d3c:	a1 05       	cpc	r26, r1
     d3e:	b1 05       	cpc	r27, r1
     d40:	60 f3       	brcs	.-40     	; 0xd1a <delay+0x1c>
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	c2 1a       	sub	r12, r18
     d46:	d1 08       	sbc	r13, r1
     d48:	e1 08       	sbc	r14, r1
     d4a:	f1 08       	sbc	r15, r1
     d4c:	88 ee       	ldi	r24, 0xE8	; 232
     d4e:	88 0e       	add	r8, r24
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	98 1e       	adc	r9, r24
     d54:	a1 1c       	adc	r10, r1
     d56:	b1 1c       	adc	r11, r1
     d58:	c1 14       	cp	r12, r1
     d5a:	d1 04       	cpc	r13, r1
     d5c:	e1 04       	cpc	r14, r1
     d5e:	f1 04       	cpc	r15, r1
     d60:	19 f7       	brne	.-58     	; 0xd28 <delay+0x2a>
     d62:	db cf       	rjmp	.-74     	; 0xd1a <delay+0x1c>
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	bf 90       	pop	r11
     d6e:	af 90       	pop	r10
     d70:	9f 90       	pop	r9
     d72:	8f 90       	pop	r8
     d74:	08 95       	ret

00000d76 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d76:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d78:	84 b5       	in	r24, 0x24	; 36
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d7e:	84 b5       	in	r24, 0x24	; 36
     d80:	81 60       	ori	r24, 0x01	; 1
     d82:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d84:	85 b5       	in	r24, 0x25	; 37
     d86:	82 60       	ori	r24, 0x02	; 2
     d88:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d8a:	85 b5       	in	r24, 0x25	; 37
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d90:	ee e6       	ldi	r30, 0x6E	; 110
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	81 60       	ori	r24, 0x01	; 1
     d98:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d9a:	e1 e8       	ldi	r30, 0x81	; 129
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     da0:	80 81       	ld	r24, Z
     da2:	82 60       	ori	r24, 0x02	; 2
     da4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     da6:	80 81       	ld	r24, Z
     da8:	81 60       	ori	r24, 0x01	; 1
     daa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     dac:	e0 e8       	ldi	r30, 0x80	; 128
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	81 60       	ori	r24, 0x01	; 1
     db4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     db6:	e1 eb       	ldi	r30, 0xB1	; 177
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	84 60       	ori	r24, 0x04	; 4
     dbe:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     dc0:	e0 eb       	ldi	r30, 0xB0	; 176
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     dca:	ea e7       	ldi	r30, 0x7A	; 122
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	84 60       	ori	r24, 0x04	; 4
     dd2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     dd4:	80 81       	ld	r24, Z
     dd6:	82 60       	ori	r24, 0x02	; 2
     dd8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     dda:	80 81       	ld	r24, Z
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     de0:	80 81       	ld	r24, Z
     de2:	80 68       	ori	r24, 0x80	; 128
     de4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     de6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     dea:	08 95       	ret

00000dec <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	18 2f       	mov	r17, r24
     df4:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	0e 94 7e 07 	call	0xefc	; 0xefc <pinMode>
	if (val == 0)
     dfc:	20 97       	sbiw	r28, 0x00	; 0
     dfe:	11 f4       	brne	.+4      	; 0xe04 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <analogWrite+0x20>
	}
	else if (val == 255)
     e04:	cf 3f       	cpi	r28, 0xFF	; 255
     e06:	d1 05       	cpc	r29, r1
     e08:	39 f4       	brne	.+14     	; 0xe18 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
     e14:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
     e18:	e1 2f       	mov	r30, r17
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	e8 59       	subi	r30, 0x98	; 152
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	e4 91       	lpm	r30, Z
     e22:	e3 30       	cpi	r30, 0x03	; 3
     e24:	f9 f0       	breq	.+62     	; 0xe64 <analogWrite+0x78>
     e26:	48 f4       	brcc	.+18     	; 0xe3a <analogWrite+0x4e>
     e28:	e1 30       	cpi	r30, 0x01	; 1
     e2a:	b9 f0       	breq	.+46     	; 0xe5a <analogWrite+0x6e>
     e2c:	e2 30       	cpi	r30, 0x02	; 2
     e2e:	a1 f5       	brne	.+104    	; 0xe98 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     e30:	84 b5       	in	r24, 0x24	; 36
     e32:	80 62       	ori	r24, 0x20	; 32
     e34:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     e36:	c8 bd       	out	0x28, r28	; 40
				break;
     e38:	34 c0       	rjmp	.+104    	; 0xea2 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     e3a:	e7 30       	cpi	r30, 0x07	; 7
     e3c:	e9 f0       	breq	.+58     	; 0xe78 <analogWrite+0x8c>
     e3e:	e8 30       	cpi	r30, 0x08	; 8
     e40:	19 f1       	breq	.+70     	; 0xe88 <analogWrite+0x9c>
     e42:	e4 30       	cpi	r30, 0x04	; 4
     e44:	49 f5       	brne	.+82     	; 0xe98 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     e46:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     e4a:	80 62       	ori	r24, 0x20	; 32
     e4c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1B = val; // set pwm duty
     e50:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     e54:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				break;
     e58:	24 c0       	rjmp	.+72     	; 0xea2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     e5a:	84 b5       	in	r24, 0x24	; 36
     e5c:	80 68       	ori	r24, 0x80	; 128
     e5e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     e60:	c7 bd       	out	0x27, r28	; 39
				break;
     e62:	1f c0       	rjmp	.+62     	; 0xea2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     e64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     e68:	80 68       	ori	r24, 0x80	; 128
     e6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1A = val; // set pwm duty
     e6e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e72:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				break;
     e76:	15 c0       	rjmp	.+42     	; 0xea2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     e78:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2A = val; // set pwm duty
     e82:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				break;
     e86:	0d c0       	rjmp	.+26     	; 0xea2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     e88:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     e8c:	80 62       	ori	r24, 0x20	; 32
     e8e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2B = val; // set pwm duty
     e92:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				break;
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
     e98:	c0 38       	cpi	r28, 0x80	; 128
     e9a:	d1 05       	cpc	r29, r1
     e9c:	0c f0       	brlt	.+2      	; 0xea0 <analogWrite+0xb4>
     e9e:	b5 cf       	rjmp	.-150    	; 0xe0a <analogWrite+0x1e>
     ea0:	af cf       	rjmp	.-162    	; 0xe00 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	08 95       	ret

00000eaa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	81 f0       	breq	.+32     	; 0xece <turnOffPWM+0x24>
     eae:	28 f4       	brcc	.+10     	; 0xeba <turnOffPWM+0x10>
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	99 f0       	breq	.+38     	; 0xeda <turnOffPWM+0x30>
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	a1 f0       	breq	.+40     	; 0xee0 <turnOffPWM+0x36>
     eb8:	08 95       	ret
     eba:	87 30       	cpi	r24, 0x07	; 7
     ebc:	a9 f0       	breq	.+42     	; 0xee8 <turnOffPWM+0x3e>
     ebe:	88 30       	cpi	r24, 0x08	; 8
     ec0:	b9 f0       	breq	.+46     	; 0xef0 <turnOffPWM+0x46>
     ec2:	84 30       	cpi	r24, 0x04	; 4
     ec4:	d1 f4       	brne	.+52     	; 0xefa <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ec6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     eca:	8f 7d       	andi	r24, 0xDF	; 223
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     ece:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     ed2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ed4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     ed8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     eda:	84 b5       	in	r24, 0x24	; 36
     edc:	8f 77       	andi	r24, 0x7F	; 127
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     ee0:	84 b5       	in	r24, 0x24	; 36
     ee2:	8f 7d       	andi	r24, 0xDF	; 223
     ee4:	84 bd       	out	0x24, r24	; 36
     ee6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     ee8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     eec:	8f 77       	andi	r24, 0x7F	; 127
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     ef0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     ef4:	8f 7d       	andi	r24, 0xDF	; 223
     ef6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     efa:	08 95       	ret

00000efc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	fc 01       	movw	r30, r24
     f04:	e4 58       	subi	r30, 0x84	; 132
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f0a:	fc 01       	movw	r30, r24
     f0c:	e0 57       	subi	r30, 0x70	; 112
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f12:	88 23       	and	r24, r24
     f14:	61 f1       	breq	.+88     	; 0xf6e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	fc 01       	movw	r30, r24
     f1e:	e8 54       	subi	r30, 0x48	; 72
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	c5 91       	lpm	r28, Z+
     f24:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     f26:	fc 01       	movw	r30, r24
     f28:	e2 55       	subi	r30, 0x52	; 82
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	a5 91       	lpm	r26, Z+
     f2e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f30:	61 11       	cpse	r22, r1
     f32:	09 c0       	rjmp	.+18     	; 0xf46 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     f34:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f36:	f8 94       	cli
		*reg &= ~bit;
     f38:	88 81       	ld	r24, Y
     f3a:	20 95       	com	r18
     f3c:	82 23       	and	r24, r18
     f3e:	88 83       	st	Y, r24
		*out &= ~bit;
     f40:	ec 91       	ld	r30, X
     f42:	2e 23       	and	r18, r30
     f44:	0b c0       	rjmp	.+22     	; 0xf5c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     f46:	62 30       	cpi	r22, 0x02	; 2
     f48:	61 f4       	brne	.+24     	; 0xf62 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     f4a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f4c:	f8 94       	cli
		*reg &= ~bit;
     f4e:	88 81       	ld	r24, Y
     f50:	32 2f       	mov	r19, r18
     f52:	30 95       	com	r19
     f54:	83 23       	and	r24, r19
     f56:	88 83       	st	Y, r24
		*out |= bit;
     f58:	ec 91       	ld	r30, X
     f5a:	2e 2b       	or	r18, r30
     f5c:	2c 93       	st	X, r18
		SREG = oldSREG;
     f5e:	9f bf       	out	0x3f, r25	; 63
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     f62:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f64:	f8 94       	cli
		*reg |= bit;
     f66:	e8 81       	ld	r30, Y
     f68:	2e 2b       	or	r18, r30
     f6a:	28 83       	st	Y, r18
		SREG = oldSREG;
     f6c:	8f bf       	out	0x3f, r24	; 63
	}
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	f9 01       	movw	r30, r18
     f80:	e8 59       	subi	r30, 0x98	; 152
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f86:	f9 01       	movw	r30, r18
     f88:	e4 58       	subi	r30, 0x84	; 132
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f8e:	f9 01       	movw	r30, r18
     f90:	e0 57       	subi	r30, 0x70	; 112
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f96:	cc 23       	and	r28, r28
     f98:	c1 f0       	breq	.+48     	; 0xfca <digitalWrite+0x56>
     f9a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f9c:	81 11       	cpse	r24, r1
     f9e:	0e 94 55 07 	call	0xeaa	; 0xeaa <turnOffPWM>

	out = portOutputRegister(port);
     fa2:	ec 2f       	mov	r30, r28
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	e2 55       	subi	r30, 0x52	; 82
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	a5 91       	lpm	r26, Z+
     fb0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     fb2:	9f b7       	in	r25, 0x3f	; 63
	cli();
     fb4:	f8 94       	cli

	if (val == LOW) {
     fb6:	11 11       	cpse	r17, r1
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <digitalWrite+0x4e>
		*out &= ~bit;
     fba:	8c 91       	ld	r24, X
     fbc:	d0 95       	com	r29
     fbe:	d8 23       	and	r29, r24
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <digitalWrite+0x52>
	} else {
		*out |= bit;
     fc2:	ec 91       	ld	r30, X
     fc4:	de 2b       	or	r29, r30
     fc6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     fc8:	9f bf       	out	0x3f, r25	; 63
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	08 95       	ret

00000fd2 <digitalRead>:

int digitalRead(uint8_t pin)
{
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	f9 01       	movw	r30, r18
     fdc:	e8 59       	subi	r30, 0x98	; 152
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     fe2:	f9 01       	movw	r30, r18
     fe4:	e4 58       	subi	r30, 0x84	; 132
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     fea:	f9 01       	movw	r30, r18
     fec:	e0 57       	subi	r30, 0x70	; 112
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     ff2:	cc 23       	and	r28, r28
     ff4:	91 f0       	breq	.+36     	; 0x101a <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ff6:	81 11       	cpse	r24, r1
     ff8:	0e 94 55 07 	call	0xeaa	; 0xeaa <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     ffc:	ec 2f       	mov	r30, r28
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	ec 55       	subi	r30, 0x5C	; 92
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	a5 91       	lpm	r26, Z+
    100a:	b4 91       	lpm	r27, Z
    100c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    100e:	ed 23       	and	r30, r29
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	21 f4       	brne	.+8      	; 0x101e <digitalRead+0x4c>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <digitalRead+0x4c>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <_ZN6IRrecvC1Ei>:
//+=============================================================================
// Return if receiving new IR signals
//
bool IRrecv::isIdle() {
    return (irparams.rcvstate == IR_REC_STATE_IDLE || irparams.rcvstate == IR_REC_STATE_STOP) ? true : false;
}
    1024:	e0 ee       	ldi	r30, 0xE0	; 224
    1026:	f1 e0       	ldi	r31, 0x01	; 1
    1028:	61 83       	std	Z+1, r22	; 0x01
    102a:	13 82       	std	Z+3, r1	; 0x03
    102c:	08 95       	ret

0000102e <_ZN6IRrecv10enableIRInEv>:
    102e:	f8 94       	cli
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1036:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    103a:	94 e6       	ldi	r25, 0x64	; 100
    103c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1040:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1044:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1048:	78 94       	sei
    104a:	e0 ee       	ldi	r30, 0xE0	; 224
    104c:	f1 e0       	ldi	r31, 0x01	; 1
    104e:	10 82       	st	Z, r1
    1050:	15 82       	std	Z+5, r1	; 0x05
    1052:	14 82       	std	Z+4, r1	; 0x04
    1054:	81 81       	ldd	r24, Z+1	; 0x01
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	0c 94 7e 07 	jmp	0xefc	; 0xefc <pinMode>

0000105c <_ZN6IRrecv6resumeEv>:
//+=============================================================================
// Restart the ISR state machine
//
void IRrecv::resume() {
    irparams.rcvstate = IR_REC_STATE_IDLE;
    105c:	e0 ee       	ldi	r30, 0xE0	; 224
    105e:	f1 e0       	ldi	r31, 0x01	; 1
    1060:	10 82       	st	Z, r1
    irparams.rawlen = 0;
    1062:	15 82       	std	Z+5, r1	; 0x05
    1064:	14 82       	std	Z+4, r1	; 0x04
    1066:	08 95       	ret

00001068 <_ZN6IRrecv7compareEjj>:
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
//
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
// @formatter:off
    if (newval * 10 < oldval * 8) {
    1068:	8a e0       	ldi	r24, 0x0A	; 10
    106a:	84 9f       	mul	r24, r20
    106c:	f0 01       	movw	r30, r0
    106e:	85 9f       	mul	r24, r21
    1070:	f0 0d       	add	r31, r0
    1072:	11 24       	eor	r1, r1
    1074:	9b 01       	movw	r18, r22
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	22 0f       	add	r18, r18
    107a:	33 1f       	adc	r19, r19
    107c:	9a 95       	dec	r25
    107e:	e1 f7       	brne	.-8      	; 0x1078 <_ZN6IRrecv7compareEjj+0x10>
    1080:	e2 17       	cp	r30, r18
    1082:	f3 07       	cpc	r31, r19
    1084:	80 f0       	brcs	.+32     	; 0x10a6 <_ZN6IRrecv7compareEjj+0x3e>
        return 0;
    }
    if (oldval * 10 < newval * 8) {
    1086:	86 9f       	mul	r24, r22
    1088:	90 01       	movw	r18, r0
    108a:	87 9f       	mul	r24, r23
    108c:	30 0d       	add	r19, r0
    108e:	11 24       	eor	r1, r1
    1090:	83 e0       	ldi	r24, 0x03	; 3
    1092:	44 0f       	add	r20, r20
    1094:	55 1f       	adc	r21, r21
    1096:	8a 95       	dec	r24
    1098:	e1 f7       	brne	.-8      	; 0x1092 <_ZN6IRrecv7compareEjj+0x2a>
    109a:	24 17       	cp	r18, r20
    109c:	35 07       	cpc	r19, r21
    109e:	30 f0       	brcs	.+12     	; 0x10ac <_ZN6IRrecv7compareEjj+0x44>
        return 2;
    }
    return 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	08 95       	ret
// Use a tolerance of 20%
//
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
// @formatter:off
    if (newval * 10 < oldval * 8) {
        return 0;
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	08 95       	ret
    }
    if (oldval * 10 < newval * 8) {
        return 2;
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    }
    return 1;

// @formatter:on
}    //+=============================================================================
    10b0:	08 95       	ret

000010b2 <_ZN6IRrecv10decodeHashEP14decode_results>:
// This isn't a "real" decoding, just an arbitrary value.
//
#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

long IRrecv::decodeHash(decode_results *results) {
    10b2:	6f 92       	push	r6
    10b4:	7f 92       	push	r7
    10b6:	8f 92       	push	r8
    10b8:	9f 92       	push	r9
    10ba:	af 92       	push	r10
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    long hash = FNV_BASIS_32;

    // Require at least 6 samples to prevent triggering on noise
    if (results->rawlen < 6) {
    10ce:	fb 01       	movw	r30, r22
    10d0:	c5 84       	ldd	r12, Z+13	; 0x0d
    10d2:	d6 84       	ldd	r13, Z+14	; 0x0e
    10d4:	f6 e0       	ldi	r31, 0x06	; 6
    10d6:	cf 16       	cp	r12, r31
    10d8:	d1 04       	cpc	r13, r1
    10da:	08 f4       	brcc	.+2      	; 0x10de <_ZN6IRrecv10decodeHashEP14decode_results+0x2c>
    10dc:	48 c0       	rjmp	.+144    	; 0x116e <_ZN6IRrecv10decodeHashEP14decode_results+0xbc>
    10de:	eb 01       	movw	r28, r22
    10e0:	3c 01       	movw	r6, r24
    10e2:	e1 2c       	mov	r14, r1
    10e4:	f1 2c       	mov	r15, r1
    10e6:	02 e0       	ldi	r16, 0x02	; 2
    10e8:	10 e0       	ldi	r17, 0x00	; 0
    10ea:	35 ec       	ldi	r19, 0xC5	; 197
    10ec:	83 2e       	mov	r8, r19
    10ee:	3d e9       	ldi	r19, 0x9D	; 157
    10f0:	93 2e       	mov	r9, r19
    10f2:	3c e1       	ldi	r19, 0x1C	; 28
    10f4:	a3 2e       	mov	r10, r19
    10f6:	31 e8       	ldi	r19, 0x81	; 129
    10f8:	b3 2e       	mov	r11, r19
    10fa:	0f 5f       	subi	r16, 0xFF	; 255
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	22 e0       	ldi	r18, 0x02	; 2
    1100:	e2 0e       	add	r14, r18
    1102:	f1 1c       	adc	r15, r1
        return false;
    }

    for (unsigned int i = 1; (i + 2) < results->rawlen; i++) {
    1104:	c0 16       	cp	r12, r16
    1106:	d1 06       	cpc	r13, r17
    1108:	19 f1       	breq	.+70     	; 0x1150 <_ZN6IRrecv10decodeHashEP14decode_results+0x9e>
        int value = compare(results->rawbuf[i], results->rawbuf[i + 2]);
    110a:	8b 85       	ldd	r24, Y+11	; 0x0b
    110c:	9c 85       	ldd	r25, Y+12	; 0x0c
    110e:	f8 01       	movw	r30, r16
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	e8 0f       	add	r30, r24
    1116:	f9 1f       	adc	r31, r25
    1118:	40 81       	ld	r20, Z
    111a:	51 81       	ldd	r21, Z+1	; 0x01
    111c:	fc 01       	movw	r30, r24
    111e:	ee 0d       	add	r30, r14
    1120:	ff 1d       	adc	r31, r15
    1122:	60 81       	ld	r22, Z
    1124:	71 81       	ldd	r23, Z+1	; 0x01
    1126:	c3 01       	movw	r24, r6
    1128:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN6IRrecv7compareEjj>
    112c:	fc 01       	movw	r30, r24
        // Add value into the hash
        hash = (hash * FNV_PRIME_32) ^ value;
    112e:	a5 01       	movw	r20, r10
    1130:	94 01       	movw	r18, r8
    1132:	63 e9       	ldi	r22, 0x93	; 147
    1134:	71 e0       	ldi	r23, 0x01	; 1
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__mulsi3>
    113e:	4f 01       	movw	r8, r30
    1140:	ff 0f       	add	r31, r31
    1142:	aa 08       	sbc	r10, r10
    1144:	bb 08       	sbc	r11, r11
    1146:	86 26       	eor	r8, r22
    1148:	97 26       	eor	r9, r23
    114a:	a8 26       	eor	r10, r24
    114c:	b9 26       	eor	r11, r25
    // Require at least 6 samples to prevent triggering on noise
    if (results->rawlen < 6) {
        return false;
    }

    for (unsigned int i = 1; (i + 2) < results->rawlen; i++) {
    114e:	d5 cf       	rjmp	.-86     	; 0x10fa <_ZN6IRrecv10decodeHashEP14decode_results+0x48>
        int value = compare(results->rawbuf[i], results->rawbuf[i + 2]);
        // Add value into the hash
        hash = (hash * FNV_PRIME_32) ^ value;
    }

    results->value = hash;
    1150:	8b 82       	std	Y+3, r8	; 0x03
    1152:	9c 82       	std	Y+4, r9	; 0x04
    1154:	ad 82       	std	Y+5, r10	; 0x05
    1156:	be 82       	std	Y+6, r11	; 0x06
    results->bits = 32;
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	9a 87       	std	Y+10, r25	; 0x0a
    115e:	89 87       	std	Y+9, r24	; 0x09
    results->decode_type = UNKNOWN;
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	88 83       	st	Y, r24

    return true;
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <_ZN6IRrecv10decodeHashEP14decode_results+0xc2>
long IRrecv::decodeHash(decode_results *results) {
    long hash = FNV_BASIS_32;

    // Require at least 6 samples to prevent triggering on noise
    if (results->rawlen < 6) {
        return false;
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	cb 01       	movw	r24, r22
    results->value = hash;
    results->bits = 32;
    results->decode_type = UNKNOWN;

    return true;
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	9f 90       	pop	r9
    118a:	8f 90       	pop	r8
    118c:	7f 90       	pop	r7
    118e:	6f 90       	pop	r6
    1190:	08 95       	ret

00001192 <_ZN6IRrecv6decodeEP14decode_results>:
//+=============================================================================
// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
//
int IRrecv::decode(decode_results *results) {
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	eb 01       	movw	r28, r22
    results->rawbuf = irparams.rawbuf;
    119c:	28 ee       	ldi	r18, 0xE8	; 232
    119e:	31 e0       	ldi	r19, 0x01	; 1
    11a0:	3c 87       	std	Y+12, r19	; 0x0c
    11a2:	2b 87       	std	Y+11, r18	; 0x0b
    results->rawlen = irparams.rawlen;
    11a4:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <irparams+0x4>
    11a8:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <irparams+0x5>
    11ac:	3e 87       	std	Y+14, r19	; 0x0e
    11ae:	2d 87       	std	Y+13, r18	; 0x0d

    results->overflow = irparams.overflow;
    11b0:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <irparams+0xd2>
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	38 8b       	std	Y+16, r19	; 0x10
    11b8:	2f 87       	std	Y+15, r18	; 0x0f

    if (irparams.rcvstate != IR_REC_STATE_STOP) {
    11ba:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <irparams>
    11be:	23 30       	cpi	r18, 0x03	; 3
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <_ZN6IRrecv6decodeEP14decode_results+0x32>
    11c2:	71 c0       	rjmp	.+226    	; 0x12a6 <_ZN6IRrecv6decodeEP14decode_results+0x114>
    11c4:	8c 01       	movw	r16, r24
        return false;
    }

#if DECODE_NEC
    DBG_PRINTLN("Attempting NEC decode");
    if (decodeNEC(results)) {
    11c6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_ZN6IRrecv9decodeNECEP14decode_results>
    11ca:	88 23       	and	r24, r24
    11cc:	19 f0       	breq	.+6      	; 0x11d4 <_ZN6IRrecv6decodeEP14decode_results+0x42>
        return true;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	6b c0       	rjmp	.+214    	; 0x12aa <_ZN6IRrecv6decodeEP14decode_results+0x118>
    }
#endif

#if DECODE_SHARP
    DBG_PRINTLN("Attempting Sharp decode");
    if (decodeSharp(results)) {
    11d4:	be 01       	movw	r22, r28
    11d6:	c8 01       	movw	r24, r16
    11d8:	0e 94 94 12 	call	0x2528	; 0x2528 <_ZN6IRrecv11decodeSharpEP14decode_results>
    11dc:	81 11       	cpse	r24, r1
    11de:	f7 cf       	rjmp	.-18     	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_SHARP_ALT
    DBG_PRINTLN("Attempting SharpAlt decode");
    if (decodeSharpAlt(results)) {
    11e0:	be 01       	movw	r22, r28
    11e2:	c8 01       	movw	r24, r16
    11e4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN6IRrecv14decodeSharpAltEP14decode_results>
    11e8:	81 11       	cpse	r24, r1
    11ea:	f1 cf       	rjmp	.-30     	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_SONY
    DBG_PRINTLN("Attempting Sony decode");
    if (decodeSony(results)) {
    11ec:	be 01       	movw	r22, r28
    11ee:	c8 01       	movw	r24, r16
    11f0:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6IRrecv10decodeSonyEP14decode_results>
    11f4:	81 11       	cpse	r24, r1
    11f6:	eb cf       	rjmp	.-42     	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_SANYO
    DBG_PRINTLN("Attempting Sanyo decode");
    if (decodeSanyo(results)) {
    11f8:	be 01       	movw	r22, r28
    11fa:	c8 01       	movw	r24, r16
    11fc:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN6IRrecv11decodeSanyoEP14decode_results>
    1200:	81 11       	cpse	r24, r1
    1202:	e5 cf       	rjmp	.-54     	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_MITSUBISHI
    DBG_PRINTLN("Attempting Mitsubishi decode");
    if (decodeMitsubishi(results)) {
    1204:	be 01       	movw	r22, r28
    1206:	c8 01       	movw	r24, r16
    1208:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6IRrecv16decodeMitsubishiEP14decode_results>
    120c:	81 11       	cpse	r24, r1
    120e:	df cf       	rjmp	.-66     	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_RC5
    DBG_PRINTLN("Attempting RC5 decode");
    if (decodeRC5(results)) {
    1210:	be 01       	movw	r22, r28
    1212:	c8 01       	movw	r24, r16
    1214:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <_ZN6IRrecv9decodeRC5EP14decode_results>
    1218:	81 11       	cpse	r24, r1
    121a:	d9 cf       	rjmp	.-78     	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_RC6
    DBG_PRINTLN("Attempting RC6 decode");
    if (decodeRC6(results)) {
    121c:	be 01       	movw	r22, r28
    121e:	c8 01       	movw	r24, r16
    1220:	0e 94 49 10 	call	0x2092	; 0x2092 <_ZN6IRrecv9decodeRC6EP14decode_results>
    1224:	81 11       	cpse	r24, r1
    1226:	d3 cf       	rjmp	.-90     	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_PANASONIC
    DBG_PRINTLN("Attempting Panasonic decode");
    if (decodePanasonic(results)) {
    1228:	be 01       	movw	r22, r28
    122a:	c8 01       	movw	r24, r16
    122c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_ZN6IRrecv15decodePanasonicEP14decode_results>
    1230:	81 11       	cpse	r24, r1
    1232:	cd cf       	rjmp	.-102    	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_LG
    DBG_PRINTLN("Attempting LG decode");
    if (decodeLG(results)) {
    1234:	be 01       	movw	r22, r28
    1236:	c8 01       	movw	r24, r16
    1238:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_ZN6IRrecv8decodeLGEP14decode_results>
    123c:	81 11       	cpse	r24, r1
    123e:	c7 cf       	rjmp	.-114    	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_JVC
    DBG_PRINTLN("Attempting JVC decode");
    if (decodeJVC(results)) {
    1240:	be 01       	movw	r22, r28
    1242:	c8 01       	movw	r24, r16
    1244:	0e 94 80 0b 	call	0x1700	; 0x1700 <_ZN6IRrecv9decodeJVCEP14decode_results>
    1248:	81 11       	cpse	r24, r1
    124a:	c1 cf       	rjmp	.-126    	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_SAMSUNG
    DBG_PRINTLN("Attempting SAMSUNG decode");
    if (decodeSAMSUNG(results)) {
    124c:	be 01       	movw	r22, r28
    124e:	c8 01       	movw	r24, r16
    1250:	0e 94 46 11 	call	0x228c	; 0x228c <_ZN6IRrecv13decodeSAMSUNGEP14decode_results>
    1254:	81 11       	cpse	r24, r1
    1256:	bb cf       	rjmp	.-138    	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_WHYNTER
    DBG_PRINTLN("Attempting Whynter decode");
    if (decodeWhynter(results)) {
    1258:	be 01       	movw	r22, r28
    125a:	c8 01       	movw	r24, r16
    125c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_ZN6IRrecv13decodeWhynterEP14decode_results>
    1260:	81 11       	cpse	r24, r1
    1262:	b5 cf       	rjmp	.-150    	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_AIWA_RC_T501
    DBG_PRINTLN("Attempting Aiwa RC-T501 decode");
    if (decodeAiwaRCT501(results)) {
    1264:	be 01       	movw	r22, r28
    1266:	c8 01       	movw	r24, r16
    1268:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results>
    126c:	81 11       	cpse	r24, r1
    126e:	af cf       	rjmp	.-162    	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_DENON
    DBG_PRINTLN("Attempting Denon decode");
    if (decodeDenon(results)) {
    1270:	be 01       	movw	r22, r28
    1272:	c8 01       	movw	r24, r16
    1274:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN6IRrecv11decodeDenonEP14decode_results>
    1278:	81 11       	cpse	r24, r1
    127a:	a9 cf       	rjmp	.-174    	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
    }
#endif

#if DECODE_MAGIQUEST
    DBG_PRINTLN("Attempting MagiQuest decode");
    if (decodeMagiQuest(results)) {
    127c:	be 01       	movw	r22, r28
    127e:	c8 01       	movw	r24, r16
    1280:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN6IRrecv15decodeMagiQuestEP14decode_results>
    1284:	81 11       	cpse	r24, r1
    1286:	a3 cf       	rjmp	.-186    	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
#if DECODE_HASH
    DBG_PRINTLN("Hash decode");
    // decodeHash returns a hash on any input.
    // Thus, it needs to be last in the list.
    // If you add any decodes, add them before this.
    if (decodeHash(results)) {
    1288:	be 01       	movw	r22, r28
    128a:	c8 01       	movw	r24, r16
    128c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN6IRrecv10decodeHashEP14decode_results>
    1290:	67 2b       	or	r22, r23
    1292:	68 2b       	or	r22, r24
    1294:	69 2b       	or	r22, r25
    1296:	09 f0       	breq	.+2      	; 0x129a <_ZN6IRrecv6decodeEP14decode_results+0x108>
    1298:	9a cf       	rjmp	.-204    	; 0x11ce <_ZN6IRrecv6decodeEP14decode_results+0x3c>
}
//+=============================================================================
// Restart the ISR state machine
//
void IRrecv::resume() {
    irparams.rcvstate = IR_REC_STATE_IDLE;
    129a:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <irparams>
    irparams.rawlen = 0;
    129e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <irparams+0x5>
    12a2:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <irparams+0x4>
    results->rawlen = irparams.rawlen;

    results->overflow = irparams.overflow;

    if (irparams.rcvstate != IR_REC_STATE_STOP) {
        return false;
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
#endif

    // Throw away and start over
    resume();
    return false;
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	08 95       	ret

000012b4 <_Z5MATCHii>:
//   and I am currently assuming that one of these bugs is my problem.
// I may revisit this code at a later date and look at the assembler produced
//   in a hope of finding out what is going on, but for now they will remain as
//   functions even in non-DEBUG mode
//
int MATCH(int measured, int desired) {
    12b4:	9c 01       	movw	r18, r24
    12b6:	fb 01       	movw	r30, r22
    Serial.print(F(" <= "));
    Serial.print(measured, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired), DEC);
#endif
    bool passed = ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
    12b8:	cb 01       	movw	r24, r22
    12ba:	63 e4       	ldi	r22, 0x43	; 67
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
    12c2:	26 17       	cp	r18, r22
    12c4:	37 07       	cpc	r19, r23
    12c6:	5c f0       	brlt	.+22     	; 0x12de <_Z5MATCHii+0x2a>
    12c8:	cf 01       	movw	r24, r30
    12ca:	68 e2       	ldi	r22, 0x28	; 40
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
    12d2:	6f 5f       	subi	r22, 0xFF	; 255
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	62 17       	cp	r22, r18
    12da:	73 07       	cpc	r23, r19
    12dc:	0c f4       	brge	.+2      	; 0x12e0 <_Z5MATCHii+0x2c>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        Serial.println(F("?; FAILED"));
    }
#endif
    return passed;
}
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	08 95       	ret

000012e4 <_Z10MATCH_MARKii>:

//+========================================================
// Due to sensor lag, when received, Marks tend to be 100us too long
//
int MATCH_MARK(int measured_ticks, int desired_us) {
    12e4:	fc 01       	movw	r30, r24
    Serial.print(measured_ticks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
    12e6:	9b 01       	movw	r18, r22
    12e8:	2c 59       	subi	r18, 0x9C	; 156
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    12ec:	c9 01       	movw	r24, r18
    12ee:	63 e4       	ldi	r22, 0x43	; 67
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
    12f6:	e6 17       	cp	r30, r22
    12f8:	f7 07       	cpc	r31, r23
    12fa:	5c f0       	brlt	.+22     	; 0x1312 <_Z10MATCH_MARKii+0x2e>
    12fc:	c9 01       	movw	r24, r18
    12fe:	68 e2       	ldi	r22, 0x28	; 40
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
    1306:	6f 5f       	subi	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	6e 17       	cp	r22, r30
    130e:	7f 07       	cpc	r23, r31
    1310:	0c f4       	brge	.+2      	; 0x1314 <_Z10MATCH_MARKii+0x30>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        Serial.println(F("?; FAILED"));
    }
#endif
    return passed;
}
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	08 95       	ret

00001318 <_Z11MATCH_SPACEii>:

//+========================================================
// Due to sensor lag, when received, Spaces tend to be 100us too short
//
int MATCH_SPACE(int measured_ticks, int desired_us) {
    1318:	fc 01       	movw	r30, r24
    Serial.print(measured_ticks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
    131a:	9b 01       	movw	r18, r22
    131c:	24 56       	subi	r18, 0x64	; 100
    131e:	31 09       	sbc	r19, r1
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    1320:	c9 01       	movw	r24, r18
    1322:	63 e4       	ldi	r22, 0x43	; 67
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
    132a:	e6 17       	cp	r30, r22
    132c:	f7 07       	cpc	r31, r23
    132e:	5c f0       	brlt	.+22     	; 0x1346 <_Z11MATCH_SPACEii+0x2e>
    1330:	c9 01       	movw	r24, r18
    1332:	68 e2       	ldi	r22, 0x28	; 40
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
    133a:	6f 5f       	subi	r22, 0xFF	; 255
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	6e 17       	cp	r22, r30
    1342:	7f 07       	cpc	r23, r31
    1344:	0c f4       	brge	.+2      	; 0x1348 <_Z11MATCH_SPACEii+0x30>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        Serial.println(F("?; FAILED"));
    }
#endif
    return passed;
}
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	08 95       	ret

0000134c <__vector_7>:
// As soon as a the first [SPACE] entry gets long:
//   Ready is set; State switches to IDLE; Timing of SPACE continues.
// As soon as first MARK arrives:
//   Gap width is recorded; Ready is cleared; New logging starts
//
ISR (TIMER_INTR_NAME) {
    134c:	1f 92       	push	r1
    134e:	0f 92       	push	r0
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	0f 92       	push	r0
    1354:	11 24       	eor	r1, r1
    1356:	2f 93       	push	r18
    1358:	3f 93       	push	r19
    135a:	4f 93       	push	r20
    135c:	5f 93       	push	r21
    135e:	6f 93       	push	r22
    1360:	7f 93       	push	r23
    1362:	8f 93       	push	r24
    1364:	9f 93       	push	r25
    1366:	af 93       	push	r26
    1368:	bf 93       	push	r27
    136a:	ef 93       	push	r30
    136c:	ff 93       	push	r31
    TIMER_RESET; // reset timer interrupt flag if required (currently only for Teensy and ATmega4809)

    // Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
    // digitalRead() is very slow. Optimisation is possible, but makes the code unportable
    uint8_t irdata = (uint8_t) digitalRead(irparams.recvpin);
    136e:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <irparams+0x1>
    1372:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <digitalRead>

    irparams.timer++;  // One more 50uS tick
    1376:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <irparams+0x6>
    137a:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <irparams+0x7>
    137e:	2f 5f       	subi	r18, 0xFF	; 255
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	30 93 e7 01 	sts	0x01E7, r19	; 0x8001e7 <irparams+0x7>
    1386:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <irparams+0x6>
    if (irparams.rawlen >= RAW_BUFFER_LENGTH) {
    138a:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <irparams+0x4>
    138e:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <irparams+0x5>
    1392:	25 36       	cpi	r18, 0x65	; 101
    1394:	31 05       	cpc	r19, r1
    1396:	18 f0       	brcs	.+6      	; 0x139e <__vector_7+0x52>
        irparams.rcvstate = IR_REC_STATE_OVERFLOW;  // Buffer overflow
    1398:	94 e0       	ldi	r25, 0x04	; 4
    139a:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <irparams>
     * Due to a ESP32 compiler bug https://github.com/espressif/esp-idf/issues/1552 no switch statements are possible for ESP32
     * So we change the code to if / else if
     */
//    switch (irparams.rcvstate) {
    //......................................................................
    if (irparams.rcvstate == IR_REC_STATE_IDLE) { // In the middle of a gap
    139e:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <irparams>
    13a2:	91 11       	cpse	r25, r1
    13a4:	11 c0       	rjmp	.+34     	; 0x13c8 <__vector_7+0x7c>
        if (irdata == MARK) {
    13a6:	81 11       	cpse	r24, r1
    13a8:	71 c0       	rjmp	.+226    	; 0x148c <__vector_7+0x140>
            if (irparams.timer < GAP_TICKS) {  // Not big enough to be a gap.
    13aa:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <irparams+0x6>
    13ae:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <irparams+0x7>
    13b2:	24 36       	cpi	r18, 0x64	; 100
    13b4:	31 05       	cpc	r19, r1
    13b6:	08 f4       	brcc	.+2      	; 0x13ba <__vector_7+0x6e>
    13b8:	5a c0       	rjmp	.+180    	; 0x146e <__vector_7+0x122>
                irparams.timer = 0;
            } else {
                // Gap just ended; Record duration; Start recording transmission
                irparams.overflow = false;
    13ba:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <irparams+0xd2>
                irparams.rawlen = 0;
    13be:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <irparams+0x5>
    13c2:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <irparams+0x4>
    13c6:	29 c0       	rjmp	.+82     	; 0x141a <__vector_7+0xce>
                irparams.rawbuf[irparams.rawlen++] = irparams.timer;
                irparams.timer = 0;
                irparams.rcvstate = IR_REC_STATE_MARK;
            }
        }
    } else if (irparams.rcvstate == IR_REC_STATE_MARK) {  // Timing Mark
    13c8:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <irparams>
    13cc:	91 30       	cpi	r25, 0x01	; 1
    13ce:	f9 f4       	brne	.+62     	; 0x140e <__vector_7+0xc2>
        if (irdata == SPACE) {   // Mark ended; Record time
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <__vector_7+0x8a>
    13d4:	5b c0       	rjmp	.+182    	; 0x148c <__vector_7+0x140>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    13d6:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <irparams+0x4>
    13da:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <irparams+0x5>
    13de:	a9 01       	movw	r20, r18
    13e0:	4f 5f       	subi	r20, 0xFF	; 255
    13e2:	5f 4f       	sbci	r21, 0xFF	; 255
    13e4:	50 93 e5 01 	sts	0x01E5, r21	; 0x8001e5 <irparams+0x5>
    13e8:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <irparams+0x4>
    13ec:	40 91 e6 01 	lds	r20, 0x01E6	; 0x8001e6 <irparams+0x6>
    13f0:	50 91 e7 01 	lds	r21, 0x01E7	; 0x8001e7 <irparams+0x7>
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	f9 01       	movw	r30, r18
    13fa:	e8 51       	subi	r30, 0x18	; 24
    13fc:	fe 4f       	sbci	r31, 0xFE	; 254
    13fe:	51 83       	std	Z+1, r21	; 0x01
    1400:	40 83       	st	Z, r20
            irparams.timer = 0;
    1402:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <irparams+0x7>
    1406:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <irparams+0x6>
            irparams.rcvstate = IR_REC_STATE_SPACE;
    140a:	92 e0       	ldi	r25, 0x02	; 2
    140c:	3d c0       	rjmp	.+122    	; 0x1488 <__vector_7+0x13c>
        }
    } else if (irparams.rcvstate == IR_REC_STATE_SPACE) {  // Timing Space
    140e:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <irparams>
    1412:	92 30       	cpi	r25, 0x02	; 2
    1414:	31 f5       	brne	.+76     	; 0x1462 <__vector_7+0x116>
        if (irdata == MARK) {  // Space just ended; Record time
    1416:	81 11       	cpse	r24, r1
    1418:	1c c0       	rjmp	.+56     	; 0x1452 <__vector_7+0x106>
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    141a:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <irparams+0x4>
    141e:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <irparams+0x5>
    1422:	a9 01       	movw	r20, r18
    1424:	4f 5f       	subi	r20, 0xFF	; 255
    1426:	5f 4f       	sbci	r21, 0xFF	; 255
    1428:	50 93 e5 01 	sts	0x01E5, r21	; 0x8001e5 <irparams+0x5>
    142c:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <irparams+0x4>
    1430:	40 91 e6 01 	lds	r20, 0x01E6	; 0x8001e6 <irparams+0x6>
    1434:	50 91 e7 01 	lds	r21, 0x01E7	; 0x8001e7 <irparams+0x7>
    1438:	22 0f       	add	r18, r18
    143a:	33 1f       	adc	r19, r19
    143c:	f9 01       	movw	r30, r18
    143e:	e8 51       	subi	r30, 0x18	; 24
    1440:	fe 4f       	sbci	r31, 0xFE	; 254
    1442:	51 83       	std	Z+1, r21	; 0x01
    1444:	40 83       	st	Z, r20
            irparams.timer = 0;
    1446:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <irparams+0x7>
    144a:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <irparams+0x6>
            irparams.rcvstate = IR_REC_STATE_MARK;
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	1b c0       	rjmp	.+54     	; 0x1488 <__vector_7+0x13c>

        } else if (irparams.timer > GAP_TICKS) {  // Space
    1452:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <irparams+0x6>
    1456:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <irparams+0x7>
    145a:	25 36       	cpi	r18, 0x65	; 101
    145c:	31 05       	cpc	r19, r1
    145e:	b0 f0       	brcs	.+44     	; 0x148c <__vector_7+0x140>
    1460:	12 c0       	rjmp	.+36     	; 0x1486 <__vector_7+0x13a>
            // Flag the current code as ready for processing
            // Switch to STOP
            // Don't reset timer; keep counting Space width
            irparams.rcvstate = IR_REC_STATE_STOP;
        }
    } else if (irparams.rcvstate == IR_REC_STATE_STOP) {  // Waiting; Measuring Gap
    1462:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <irparams>
    1466:	93 30       	cpi	r25, 0x03	; 3
    1468:	39 f4       	brne	.+14     	; 0x1478 <__vector_7+0x12c>
        if (irdata == MARK) {
    146a:	81 11       	cpse	r24, r1
    146c:	0f c0       	rjmp	.+30     	; 0x148c <__vector_7+0x140>
            irparams.timer = 0;  // Reset gap timer
    146e:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <irparams+0x7>
    1472:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <irparams+0x6>
    1476:	0a c0       	rjmp	.+20     	; 0x148c <__vector_7+0x140>
        }
    } else if (irparams.rcvstate == IR_REC_STATE_OVERFLOW) {  // Flag up a read overflow; Stop the State Machine
    1478:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <irparams>
    147c:	94 30       	cpi	r25, 0x04	; 4
    147e:	31 f4       	brne	.+12     	; 0x148c <__vector_7+0x140>
        irparams.overflow = true;
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <irparams+0xd2>
        irparams.rcvstate = IR_REC_STATE_STOP;
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <irparams>
    }

#ifdef BLINKLED
    // If requested, flash LED while receiving IR data
    if (irparams.blinkflag) {
    148c:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <irparams+0x3>
    1490:	99 23       	and	r25, r25
    1492:	b9 f0       	breq	.+46     	; 0x14c2 <__vector_7+0x176>
        if (irdata == MARK) {
    1494:	81 11       	cpse	r24, r1
    1496:	0a c0       	rjmp	.+20     	; 0x14ac <__vector_7+0x160>
            if (irparams.blinkpin) {
    1498:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <irparams+0x2>
    149c:	88 23       	and	r24, r24
    149e:	21 f0       	breq	.+8      	; 0x14a8 <__vector_7+0x15c>
                digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    14a0:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <irparams+0x2>
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <__vector_7+0x16e>
            } else {
                BLINKLED_ON();   // if no user defined LED pin, turn default LED pin for the hardware on
    14a8:	2d 9a       	sbi	0x05, 5	; 5
    14aa:	0b c0       	rjmp	.+22     	; 0x14c2 <__vector_7+0x176>
            }
        } else {
            if (irparams.blinkpin) {
    14ac:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <irparams+0x2>
    14b0:	88 23       	and	r24, r24
    14b2:	31 f0       	breq	.+12     	; 0x14c0 <__vector_7+0x174>
                digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    14b4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <irparams+0x2>
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	0e 94 ba 07 	call	0xf74	; 0xf74 <digitalWrite>
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <__vector_7+0x176>
            } else {
                BLINKLED_OFF();   // if no user defined LED pin, turn default LED pin for the hardware on
    14c0:	2d 98       	cbi	0x05, 5	; 5
            }
        }
    }
#endif // BLINKLED
}
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results>:
}
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
bool IRrecv::decodeAiwaRCT501(decode_results *results) {
    14e4:	af 92       	push	r10
    14e6:	bf 92       	push	r11
    14e8:	cf 92       	push	r12
    14ea:	df 92       	push	r13
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    int data = 0;
    unsigned int offset = 1;

    // Check SIZE
    if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4) {
    14f8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    14fc:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    1500:	88 35       	cpi	r24, 0x58	; 88
    1502:	91 05       	cpc	r25, r1
    1504:	10 f4       	brcc	.+4      	; 0x150a <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x26>
        return false;
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	74 c0       	rjmp	.+232    	; 0x15f2 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x10e>
    150a:	eb 01       	movw	r28, r22
    }

    // Check HDR Mark/Space
    if (!MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_HDR_MARK)) {
    150c:	eb 85       	ldd	r30, Y+11	; 0x0b
    150e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	60 e6       	ldi	r22, 0x60	; 96
    1516:	72 e2       	ldi	r23, 0x22	; 34
    1518:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    151c:	89 2b       	or	r24, r25
    151e:	99 f3       	breq	.-26     	; 0x1506 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x22>
        return false;
    }
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_HDR_SPACE)) {
    1520:	eb 85       	ldd	r30, Y+11	; 0x0b
    1522:	fc 85       	ldd	r31, Y+12	; 0x0c
    1524:	84 81       	ldd	r24, Z+4	; 0x04
    1526:	95 81       	ldd	r25, Z+5	; 0x05
    1528:	64 e9       	ldi	r22, 0x94	; 148
    152a:	71 e1       	ldi	r23, 0x11	; 17
    152c:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1530:	89 2b       	or	r24, r25
    1532:	49 f3       	breq	.-46     	; 0x1506 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x22>
    1534:	5d e1       	ldi	r21, 0x1D	; 29
    1536:	c5 2e       	mov	r12, r21
    1538:	d1 2c       	mov	r13, r1
    153a:	e1 2c       	mov	r14, r1
    153c:	f1 2c       	mov	r15, r1
    153e:	0e e1       	ldi	r16, 0x1E	; 30
    1540:	10 e0       	ldi	r17, 0x00	; 0
        return false;
    }
    offset++;

    offset += 26;  // skip pre-data - optional
    while (offset < irparams.rawlen - 4) {
    1542:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    1546:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    154a:	04 97       	sbiw	r24, 0x04	; 4
    154c:	c8 16       	cp	r12, r24
    154e:	d9 06       	cpc	r13, r25
    1550:	d0 f5       	brcc	.+116    	; 0x15c6 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xe2>
        if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK)) {
    1552:	eb 85       	ldd	r30, Y+11	; 0x0b
    1554:	fc 85       	ldd	r31, Y+12	; 0x0c
    1556:	c6 01       	movw	r24, r12
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	e8 0f       	add	r30, r24
    155e:	f9 1f       	adc	r31, r25
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	64 ef       	ldi	r22, 0xF4	; 244
    1566:	71 e0       	ldi	r23, 0x01	; 1
    1568:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    156c:	89 2b       	or	r24, r25
    156e:	59 f2       	breq	.-106    	; 0x1506 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x22>
        } else {
            return false;
        }

        // ONE & ZERO
        if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE)) {
    1570:	58 01       	movw	r10, r16
    1572:	aa 0c       	add	r10, r10
    1574:	bb 1c       	adc	r11, r11
    1576:	eb 85       	ldd	r30, Y+11	; 0x0b
    1578:	fc 85       	ldd	r31, Y+12	; 0x0c
    157a:	ea 0d       	add	r30, r10
    157c:	fb 1d       	adc	r31, r11
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	68 e5       	ldi	r22, 0x58	; 88
    1584:	72 e0       	ldi	r23, 0x02	; 2
    1586:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    158a:	89 2b       	or	r24, r25
    158c:	39 f0       	breq	.+14     	; 0x159c <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xb8>
            data = (data << 1) | 1;
    158e:	c7 01       	movw	r24, r14
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	7c 01       	movw	r14, r24
    1596:	68 94       	set
    1598:	e0 f8       	bld	r14, 0
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xd6>
        } else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE)) {
    159c:	8b 85       	ldd	r24, Y+11	; 0x0b
    159e:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a0:	fc 01       	movw	r30, r24
    15a2:	ea 0d       	add	r30, r10
    15a4:	fb 1d       	adc	r31, r11
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	64 ea       	ldi	r22, 0xA4	; 164
    15ac:	76 e0       	ldi	r23, 0x06	; 6
    15ae:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    15b2:	89 2b       	or	r24, r25
    15b4:	49 f0       	breq	.+18     	; 0x15c8 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xe4>
            data = (data << 1) | 0;
    15b6:	ee 0c       	add	r14, r14
    15b8:	ff 1c       	adc	r15, r15
        } else {
            break; // End of one & zero detected
        }
        offset++;
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	c8 0e       	add	r12, r24
    15be:	d1 1c       	adc	r13, r1
    15c0:	0e 5f       	subi	r16, 0xFE	; 254
    15c2:	1f 4f       	sbci	r17, 0xFF	; 255
        return false;
    }
    offset++;

    offset += 26;  // skip pre-data - optional
    while (offset < irparams.rawlen - 4) {
    15c4:	be cf       	rjmp	.-132    	; 0x1542 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x5e>
    15c6:	86 01       	movw	r16, r12
            break; // End of one & zero detected
        }
        offset++;
    }

    results->bits = (offset - 1) / 2;
    15c8:	01 50       	subi	r16, 0x01	; 1
    15ca:	11 09       	sbc	r17, r1
    15cc:	16 95       	lsr	r17
    15ce:	07 95       	ror	r16
    15d0:	1a 87       	std	Y+10, r17	; 0x0a
    15d2:	09 87       	std	Y+9, r16	; 0x09
    if (results->bits < 42) {
    15d4:	0a 32       	cpi	r16, 0x2A	; 42
    15d6:	11 05       	cpc	r17, r1
    15d8:	08 f4       	brcc	.+2      	; 0x15dc <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xf8>
    15da:	95 cf       	rjmp	.-214    	; 0x1506 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x22>
        return false;
    }

    results->value = data;
    15dc:	c7 01       	movw	r24, r14
    15de:	ff 0c       	add	r15, r15
    15e0:	aa 0b       	sbc	r26, r26
    15e2:	bb 0b       	sbc	r27, r27
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    15e6:	9c 83       	std	Y+4, r25	; 0x04
    15e8:	ad 83       	std	Y+5, r26	; 0x05
    15ea:	be 83       	std	Y+6, r27	; 0x06
    results->decode_type = AIWA_RC_T501;
    15ec:	89 e0       	ldi	r24, 0x09	; 9
    15ee:	88 83       	st	Y, r24
    return true;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
}
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	df 90       	pop	r13
    1600:	cf 90       	pop	r12
    1602:	bf 90       	pop	r11
    1604:	af 90       	pop	r10
    1606:	08 95       	ret

00001608 <_ZN6IRrecv11decodeDenonEP14decode_results>:
#endif

//+=============================================================================
//
#if DECODE_DENON
bool IRrecv::decodeDenon(decode_results *results) {
    1608:	af 92       	push	r10
    160a:	bf 92       	push	r11
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    unsigned long data = 0;  // Somewhere to build our code
    int offset = 1;  // Skip the Gap reading

    // Check we have the right amount of data
    if (irparams.rawlen != 1 + 2 + (2 * BITS) + 1) {
    161c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    1620:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    1624:	80 97       	sbiw	r24, 0x20	; 32
    1626:	11 f0       	breq	.+4      	; 0x162c <_ZN6IRrecv11decodeDenonEP14decode_results+0x24>
        return false;
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	5f c0       	rjmp	.+190    	; 0x16ea <_ZN6IRrecv11decodeDenonEP14decode_results+0xe2>
    162c:	eb 01       	movw	r28, r22
    }

    // Check initial Mark+Space match
    if (!MATCH_MARK(results->rawbuf[offset], HDR_MARK)) {
    162e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1630:	fc 85       	ldd	r31, Y+12	; 0x0c
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	6c e2       	ldi	r22, 0x2C	; 44
    1638:	71 e0       	ldi	r23, 0x01	; 1
    163a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    163e:	89 2b       	or	r24, r25
    1640:	99 f3       	breq	.-26     	; 0x1628 <_ZN6IRrecv11decodeDenonEP14decode_results+0x20>
        return false;
    }
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], HDR_SPACE)) {
    1642:	eb 85       	ldd	r30, Y+11	; 0x0b
    1644:	fc 85       	ldd	r31, Y+12	; 0x0c
    1646:	84 81       	ldd	r24, Z+4	; 0x04
    1648:	95 81       	ldd	r25, Z+5	; 0x05
    164a:	6e ee       	ldi	r22, 0xEE	; 238
    164c:	72 e0       	ldi	r23, 0x02	; 2
    164e:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1652:	89 2b       	or	r24, r25
    1654:	49 f3       	breq	.-46     	; 0x1628 <_ZN6IRrecv11decodeDenonEP14decode_results+0x20>
    1656:	06 e0       	ldi	r16, 0x06	; 6
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	c1 2c       	mov	r12, r1
    165c:	d1 2c       	mov	r13, r1
    165e:	76 01       	movw	r14, r12

    // Read the bits in
    for (int i = 0; i < BITS; i++) {
        // Each bit looks like: MARK + SPACE_1 -> 1
        //                 or : MARK + SPACE_0 -> 0
        if (!MATCH_MARK(results->rawbuf[offset], BIT_MARK)) {
    1660:	eb 85       	ldd	r30, Y+11	; 0x0b
    1662:	fc 85       	ldd	r31, Y+12	; 0x0c
    1664:	e0 0f       	add	r30, r16
    1666:	f1 1f       	adc	r31, r17
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	6c e2       	ldi	r22, 0x2C	; 44
    166e:	71 e0       	ldi	r23, 0x01	; 1
    1670:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1674:	89 2b       	or	r24, r25
    1676:	c1 f2       	breq	.-80     	; 0x1628 <_ZN6IRrecv11decodeDenonEP14decode_results+0x20>
            return false;
        }
        offset++;

        // IR data is big-endian, so we shuffle it in from the right:
        if (MATCH_SPACE(results->rawbuf[offset], ONE_SPACE)) {
    1678:	58 01       	movw	r10, r16
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	a8 0e       	add	r10, r24
    167e:	b1 1c       	adc	r11, r1
    1680:	eb 85       	ldd	r30, Y+11	; 0x0b
    1682:	fc 85       	ldd	r31, Y+12	; 0x0c
    1684:	ea 0d       	add	r30, r10
    1686:	fb 1d       	adc	r31, r11
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	68 e0       	ldi	r22, 0x08	; 8
    168e:	77 e0       	ldi	r23, 0x07	; 7
    1690:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1694:	89 2b       	or	r24, r25
    1696:	39 f0       	breq	.+14     	; 0x16a6 <_ZN6IRrecv11decodeDenonEP14decode_results+0x9e>
            data = (data << 1) | 1;
    1698:	cc 0c       	add	r12, r12
    169a:	dd 1c       	adc	r13, r13
    169c:	ee 1c       	adc	r14, r14
    169e:	ff 1c       	adc	r15, r15
    16a0:	68 94       	set
    16a2:	c0 f8       	bld	r12, 0
    16a4:	12 c0       	rjmp	.+36     	; 0x16ca <_ZN6IRrecv11decodeDenonEP14decode_results+0xc2>
        } else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE)) {
    16a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    16aa:	fc 01       	movw	r30, r24
    16ac:	ea 0d       	add	r30, r10
    16ae:	fb 1d       	adc	r31, r11
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	6e ee       	ldi	r22, 0xEE	; 238
    16b6:	72 e0       	ldi	r23, 0x02	; 2
    16b8:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    16bc:	89 2b       	or	r24, r25
    16be:	09 f4       	brne	.+2      	; 0x16c2 <_ZN6IRrecv11decodeDenonEP14decode_results+0xba>
    16c0:	b3 cf       	rjmp	.-154    	; 0x1628 <_ZN6IRrecv11decodeDenonEP14decode_results+0x20>
            data = (data << 1) | 0;
    16c2:	cc 0c       	add	r12, r12
    16c4:	dd 1c       	adc	r13, r13
    16c6:	ee 1c       	adc	r14, r14
    16c8:	ff 1c       	adc	r15, r15
    16ca:	0c 5f       	subi	r16, 0xFC	; 252
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
        return false;
    }
    offset++;

    // Read the bits in
    for (int i = 0; i < BITS; i++) {
    16ce:	0e 33       	cpi	r16, 0x3E	; 62
    16d0:	11 05       	cpc	r17, r1
    16d2:	31 f6       	brne	.-116    	; 0x1660 <_ZN6IRrecv11decodeDenonEP14decode_results+0x58>
        }
        offset++;
    }

    // Success
    results->bits = BITS;
    16d4:	8e e0       	ldi	r24, 0x0E	; 14
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9a 87       	std	Y+10, r25	; 0x0a
    16da:	89 87       	std	Y+9, r24	; 0x09
    results->value = data;
    16dc:	cb 82       	std	Y+3, r12	; 0x03
    16de:	dc 82       	std	Y+4, r13	; 0x04
    16e0:	ed 82       	std	Y+5, r14	; 0x05
    16e2:	fe 82       	std	Y+6, r15	; 0x06
    results->decode_type = DENON;
    16e4:	80 e1       	ldi	r24, 0x10	; 16
    16e6:	88 83       	st	Y, r24
    return true;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
}
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	08 95       	ret

00001700 <_ZN6IRrecv9decodeJVCEP14decode_results>:
}
#endif

//+=============================================================================
#if DECODE_JVC
bool IRrecv::decodeJVC(decode_results *results) {
    1700:	af 92       	push	r10
    1702:	bf 92       	push	r11
    1704:	cf 92       	push	r12
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	eb 01       	movw	r28, r22
    long data = 0;
    int offset = 1; // Skip first space

    // Check for repeat
    if ((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)
    1716:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    171a:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
            && MATCH_MARK(results->rawbuf[irparams.rawlen - 1], JVC_BIT_MARK)) {
    171e:	82 97       	sbiw	r24, 0x22	; 34
    1720:	59 f5       	brne	.+86     	; 0x1778 <_ZN6IRrecv9decodeJVCEP14decode_results+0x78>
bool IRrecv::decodeJVC(decode_results *results) {
    long data = 0;
    int offset = 1; // Skip first space

    // Check for repeat
    if ((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)
    1722:	eb 85       	ldd	r30, Y+11	; 0x0b
    1724:	fc 85       	ldd	r31, Y+12	; 0x0c
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	68 e5       	ldi	r22, 0x58	; 88
    172c:	72 e0       	ldi	r23, 0x02	; 2
    172e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1732:	89 2b       	or	r24, r25
    1734:	09 f1       	breq	.+66     	; 0x1778 <_ZN6IRrecv9decodeJVCEP14decode_results+0x78>
            && MATCH_MARK(results->rawbuf[irparams.rawlen - 1], JVC_BIT_MARK)) {
    1736:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <irparams+0x4>
    173a:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <irparams+0x5>
    173e:	e1 50       	subi	r30, 0x01	; 1
    1740:	f0 48       	sbci	r31, 0x80	; 128
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	8b 85       	ldd	r24, Y+11	; 0x0b
    1748:	9c 85       	ldd	r25, Y+12	; 0x0c
    174a:	e8 0f       	add	r30, r24
    174c:	f9 1f       	adc	r31, r25
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	68 e5       	ldi	r22, 0x58	; 88
    1754:	72 e0       	ldi	r23, 0x02	; 2
    1756:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    175a:	89 2b       	or	r24, r25
    175c:	69 f0       	breq	.+26     	; 0x1778 <_ZN6IRrecv9decodeJVCEP14decode_results+0x78>
        results->bits = 0;
    175e:	1a 86       	std	Y+10, r1	; 0x0a
    1760:	19 86       	std	Y+9, r1	; 0x09
        results->value = REPEAT;
    1762:	8f ef       	ldi	r24, 0xFF	; 255
    1764:	9f ef       	ldi	r25, 0xFF	; 255
    1766:	dc 01       	movw	r26, r24
    1768:	8b 83       	std	Y+3, r24	; 0x03
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	ad 83       	std	Y+5, r26	; 0x05
    176e:	be 83       	std	Y+6, r27	; 0x06
        results->decode_type = JVC;
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	88 83       	st	Y, r24
        return true;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	75 c0       	rjmp	.+234    	; 0x1862 <_ZN6IRrecv9decodeJVCEP14decode_results+0x162>
    }

    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
    1778:	eb 85       	ldd	r30, Y+11	; 0x0b
    177a:	fc 85       	ldd	r31, Y+12	; 0x0c
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	60 e4       	ldi	r22, 0x40	; 64
    1782:	7f e1       	ldi	r23, 0x1F	; 31
    1784:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1788:	89 2b       	or	r24, r25
    178a:	31 f0       	breq	.+12     	; 0x1798 <_ZN6IRrecv9decodeJVCEP14decode_results+0x98>
        return false;
    }
    offset++;

    if (irparams.rawlen < (2 * JVC_BITS) + 1) {
    178c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    1790:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    1794:	81 97       	sbiw	r24, 0x21	; 33
    1796:	10 f4       	brcc	.+4      	; 0x179c <_ZN6IRrecv9decodeJVCEP14decode_results+0x9c>
        return false;
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	63 c0       	rjmp	.+198    	; 0x1862 <_ZN6IRrecv9decodeJVCEP14decode_results+0x162>
    }

    // Initial space
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
    179c:	eb 85       	ldd	r30, Y+11	; 0x0b
    179e:	fc 85       	ldd	r31, Y+12	; 0x0c
    17a0:	84 81       	ldd	r24, Z+4	; 0x04
    17a2:	95 81       	ldd	r25, Z+5	; 0x05
    17a4:	60 ea       	ldi	r22, 0xA0	; 160
    17a6:	7f e0       	ldi	r23, 0x0F	; 15
    17a8:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    17ac:	89 2b       	or	r24, r25
    17ae:	a1 f3       	breq	.-24     	; 0x1798 <_ZN6IRrecv9decodeJVCEP14decode_results+0x98>
    17b0:	38 e0       	ldi	r19, 0x08	; 8
    17b2:	a3 2e       	mov	r10, r19
    17b4:	b1 2c       	mov	r11, r1
    17b6:	03 e0       	ldi	r16, 0x03	; 3
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	c1 2c       	mov	r12, r1
    17bc:	d1 2c       	mov	r13, r1
    17be:	76 01       	movw	r14, r12
        return false;
    }
    offset++;

    for (int i = 0; i < JVC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) {
    17c0:	eb 85       	ldd	r30, Y+11	; 0x0b
    17c2:	fc 85       	ldd	r31, Y+12	; 0x0c
    17c4:	c8 01       	movw	r24, r16
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	e8 0f       	add	r30, r24
    17cc:	f9 1f       	adc	r31, r25
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	68 e5       	ldi	r22, 0x58	; 88
    17d4:	72 e0       	ldi	r23, 0x02	; 2
    17d6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    17da:	89 2b       	or	r24, r25
    17dc:	e9 f2       	breq	.-70     	; 0x1798 <_ZN6IRrecv9decodeJVCEP14decode_results+0x98>
            return false;
        }
        offset++;

        if (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE)) {
    17de:	eb 85       	ldd	r30, Y+11	; 0x0b
    17e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    17e2:	ea 0d       	add	r30, r10
    17e4:	fb 1d       	adc	r31, r11
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	60 e4       	ldi	r22, 0x40	; 64
    17ec:	76 e0       	ldi	r23, 0x06	; 6
    17ee:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    17f2:	89 2b       	or	r24, r25
    17f4:	39 f0       	breq	.+14     	; 0x1804 <_ZN6IRrecv9decodeJVCEP14decode_results+0x104>
            data = (data << 1) | 1;
    17f6:	cc 0c       	add	r12, r12
    17f8:	dd 1c       	adc	r13, r13
    17fa:	ee 1c       	adc	r14, r14
    17fc:	ff 1c       	adc	r15, r15
    17fe:	68 94       	set
    1800:	c0 f8       	bld	r12, 0
    1802:	11 c0       	rjmp	.+34     	; 0x1826 <_ZN6IRrecv9decodeJVCEP14decode_results+0x126>
        } else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE)) {
    1804:	eb 85       	ldd	r30, Y+11	; 0x0b
    1806:	fc 85       	ldd	r31, Y+12	; 0x0c
    1808:	ea 0d       	add	r30, r10
    180a:	fb 1d       	adc	r31, r11
    180c:	80 81       	ld	r24, Z
    180e:	91 81       	ldd	r25, Z+1	; 0x01
    1810:	66 e2       	ldi	r22, 0x26	; 38
    1812:	72 e0       	ldi	r23, 0x02	; 2
    1814:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1818:	89 2b       	or	r24, r25
    181a:	09 f4       	brne	.+2      	; 0x181e <_ZN6IRrecv9decodeJVCEP14decode_results+0x11e>
    181c:	bd cf       	rjmp	.-134    	; 0x1798 <_ZN6IRrecv9decodeJVCEP14decode_results+0x98>
            data = (data << 1) | 0;
    181e:	cc 0c       	add	r12, r12
    1820:	dd 1c       	adc	r13, r13
    1822:	ee 1c       	adc	r14, r14
    1824:	ff 1c       	adc	r15, r15
        } else {
            return false;
        }
        offset++;
    1826:	0e 5f       	subi	r16, 0xFE	; 254
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	84 e0       	ldi	r24, 0x04	; 4
    182c:	a8 0e       	add	r10, r24
    182e:	b1 1c       	adc	r11, r1
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
        return false;
    }
    offset++;

    for (int i = 0; i < JVC_BITS; i++) {
    1830:	03 32       	cpi	r16, 0x23	; 35
    1832:	11 05       	cpc	r17, r1
    1834:	29 f6       	brne	.-118    	; 0x17c0 <_ZN6IRrecv9decodeJVCEP14decode_results+0xc0>
        }
        offset++;
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) {
    1836:	eb 85       	ldd	r30, Y+11	; 0x0b
    1838:	fc 85       	ldd	r31, Y+12	; 0x0c
    183a:	ea 5b       	subi	r30, 0xBA	; 186
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	68 e5       	ldi	r22, 0x58	; 88
    1844:	72 e0       	ldi	r23, 0x02	; 2
    1846:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    184a:	89 2b       	or	r24, r25
    184c:	09 f4       	brne	.+2      	; 0x1850 <_ZN6IRrecv9decodeJVCEP14decode_results+0x150>
    184e:	a4 cf       	rjmp	.-184    	; 0x1798 <_ZN6IRrecv9decodeJVCEP14decode_results+0x98>
        return false;
    }

    // Success
    results->bits = JVC_BITS;
    1850:	80 e1       	ldi	r24, 0x10	; 16
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9a 87       	std	Y+10, r25	; 0x0a
    1856:	89 87       	std	Y+9, r24	; 0x09
    results->value = data;
    1858:	cb 82       	std	Y+3, r12	; 0x03
    185a:	dc 82       	std	Y+4, r13	; 0x04
    185c:	ed 82       	std	Y+5, r14	; 0x05
    185e:	fe 82       	std	Y+6, r15	; 0x06
    1860:	87 cf       	rjmp	.-242    	; 0x1770 <_ZN6IRrecv9decodeJVCEP14decode_results+0x70>
    results->decode_type = JVC;

    return true;
}
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	bf 90       	pop	r11
    1874:	af 90       	pop	r10
    1876:	08 95       	ret

00001878 <_ZN6IRrecv8decodeLGEP14decode_results>:
#define LG_ZERO_SPACE 550
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
bool IRrecv::decodeLG(decode_results *results) {
    1878:	af 92       	push	r10
    187a:	bf 92       	push	r11
    187c:	cf 92       	push	r12
    187e:	df 92       	push	r13
    1880:	ef 92       	push	r14
    1882:	ff 92       	push	r15
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    long data = 0;
    int offset = 1; // Skip first space

    // Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1)
    188c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    1890:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    1894:	c9 97       	sbiw	r24, 0x39	; 57
    1896:	10 f4       	brcc	.+4      	; 0x189c <_ZN6IRrecv8decodeLGEP14decode_results+0x24>
        return false;
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	70 c0       	rjmp	.+224    	; 0x197c <_ZN6IRrecv8decodeLGEP14decode_results+0x104>
    189c:	eb 01       	movw	r28, r22

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset], LG_HDR_MARK)) {
    189e:	eb 85       	ldd	r30, Y+11	; 0x0b
    18a0:	fc 85       	ldd	r31, Y+12	; 0x0c
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	60 e4       	ldi	r22, 0x40	; 64
    18a8:	7f e1       	ldi	r23, 0x1F	; 31
    18aa:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    18ae:	89 2b       	or	r24, r25
    18b0:	99 f3       	breq	.-26     	; 0x1898 <_ZN6IRrecv8decodeLGEP14decode_results+0x20>
        return false;
    }
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], LG_HDR_SPACE)) {
    18b2:	eb 85       	ldd	r30, Y+11	; 0x0b
    18b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    18b6:	84 81       	ldd	r24, Z+4	; 0x04
    18b8:	95 81       	ldd	r25, Z+5	; 0x05
    18ba:	60 ea       	ldi	r22, 0xA0	; 160
    18bc:	7f e0       	ldi	r23, 0x0F	; 15
    18be:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    18c2:	89 2b       	or	r24, r25
    18c4:	49 f3       	breq	.-46     	; 0x1898 <_ZN6IRrecv8decodeLGEP14decode_results+0x20>
    18c6:	38 e0       	ldi	r19, 0x08	; 8
    18c8:	a3 2e       	mov	r10, r19
    18ca:	b1 2c       	mov	r11, r1
    18cc:	03 e0       	ldi	r16, 0x03	; 3
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	c1 2c       	mov	r12, r1
    18d2:	d1 2c       	mov	r13, r1
    18d4:	76 01       	movw	r14, r12
        return false;
    }
    offset++;

    for (int i = 0; i < LG_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK)) {
    18d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    18d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    18da:	c8 01       	movw	r24, r16
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	e8 0f       	add	r30, r24
    18e2:	f9 1f       	adc	r31, r25
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	68 e5       	ldi	r22, 0x58	; 88
    18ea:	72 e0       	ldi	r23, 0x02	; 2
    18ec:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    18f0:	89 2b       	or	r24, r25
    18f2:	91 f2       	breq	.-92     	; 0x1898 <_ZN6IRrecv8decodeLGEP14decode_results+0x20>
            return false;
        }
        offset++;

        if (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE)) {
    18f4:	eb 85       	ldd	r30, Y+11	; 0x0b
    18f6:	fc 85       	ldd	r31, Y+12	; 0x0c
    18f8:	ea 0d       	add	r30, r10
    18fa:	fb 1d       	adc	r31, r11
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	60 e4       	ldi	r22, 0x40	; 64
    1902:	76 e0       	ldi	r23, 0x06	; 6
    1904:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1908:	89 2b       	or	r24, r25
    190a:	39 f0       	breq	.+14     	; 0x191a <_ZN6IRrecv8decodeLGEP14decode_results+0xa2>
            data = (data << 1) | 1;
    190c:	cc 0c       	add	r12, r12
    190e:	dd 1c       	adc	r13, r13
    1910:	ee 1c       	adc	r14, r14
    1912:	ff 1c       	adc	r15, r15
    1914:	68 94       	set
    1916:	c0 f8       	bld	r12, 0
    1918:	11 c0       	rjmp	.+34     	; 0x193c <_ZN6IRrecv8decodeLGEP14decode_results+0xc4>
        } else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE)) {
    191a:	eb 85       	ldd	r30, Y+11	; 0x0b
    191c:	fc 85       	ldd	r31, Y+12	; 0x0c
    191e:	ea 0d       	add	r30, r10
    1920:	fb 1d       	adc	r31, r11
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	66 e2       	ldi	r22, 0x26	; 38
    1928:	72 e0       	ldi	r23, 0x02	; 2
    192a:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    192e:	89 2b       	or	r24, r25
    1930:	09 f4       	brne	.+2      	; 0x1934 <_ZN6IRrecv8decodeLGEP14decode_results+0xbc>
    1932:	b2 cf       	rjmp	.-156    	; 0x1898 <_ZN6IRrecv8decodeLGEP14decode_results+0x20>
            data = (data << 1) | 0;
    1934:	cc 0c       	add	r12, r12
    1936:	dd 1c       	adc	r13, r13
    1938:	ee 1c       	adc	r14, r14
    193a:	ff 1c       	adc	r15, r15
        } else {
            return false;
        }
        offset++;
    193c:	0e 5f       	subi	r16, 0xFE	; 254
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	84 e0       	ldi	r24, 0x04	; 4
    1942:	a8 0e       	add	r10, r24
    1944:	b1 1c       	adc	r11, r1
    if (!MATCH_SPACE(results->rawbuf[offset], LG_HDR_SPACE)) {
        return false;
    }
    offset++;

    for (int i = 0; i < LG_BITS; i++) {
    1946:	0b 33       	cpi	r16, 0x3B	; 59
    1948:	11 05       	cpc	r17, r1
    194a:	29 f6       	brne	.-118    	; 0x18d6 <_ZN6IRrecv8decodeLGEP14decode_results+0x5e>
        }
        offset++;
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK)) {
    194c:	eb 85       	ldd	r30, Y+11	; 0x0b
    194e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1950:	ea 58       	subi	r30, 0x8A	; 138
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	68 e5       	ldi	r22, 0x58	; 88
    195a:	72 e0       	ldi	r23, 0x02	; 2
    195c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1960:	89 2b       	or	r24, r25
    1962:	09 f4       	brne	.+2      	; 0x1966 <_ZN6IRrecv8decodeLGEP14decode_results+0xee>
    1964:	99 cf       	rjmp	.-206    	; 0x1898 <_ZN6IRrecv8decodeLGEP14decode_results+0x20>
        return false;
    }

    // Success
    results->bits = LG_BITS;
    1966:	8c e1       	ldi	r24, 0x1C	; 28
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	9a 87       	std	Y+10, r25	; 0x0a
    196c:	89 87       	std	Y+9, r24	; 0x09
    results->value = data;
    196e:	cb 82       	std	Y+3, r12	; 0x03
    1970:	dc 82       	std	Y+4, r13	; 0x04
    1972:	ed 82       	std	Y+5, r14	; 0x05
    1974:	fe 82       	std	Y+6, r15	; 0x06
    results->decode_type = LG;
    1976:	8a e0       	ldi	r24, 0x0A	; 10
    1978:	88 83       	st	Y, r24
    return true;
    197a:	81 e0       	ldi	r24, 0x01	; 1
}
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	bf 90       	pop	r11
    198e:	af 90       	pop	r10
    1990:	08 95       	ret

00001992 <_ZN6IRrecv15decodeMagiQuestEP14decode_results>:
#endif

//+=============================================================================
//
#if DECODE_MAGIQUEST
bool IRrecv::decodeMagiQuest(decode_results *results) {
    1992:	af 92       	push	r10
    1994:	bf 92       	push	r11
    1996:	cf 92       	push	r12
    1998:	df 92       	push	r13
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	28 97       	sbiw	r28, 0x08	; 8
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    char bitstring[MAGIQUEST_BITS*2];
    memset(bitstring, 0, sizeof(bitstring));
#endif

    // Check we have enough data
    if (irparams.rawlen < 2 * MAGIQUEST_BITS) {
    19b6:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    19ba:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    19be:	84 36       	cpi	r24, 0x64	; 100
    19c0:	91 05       	cpc	r25, r1
    19c2:	10 f4       	brcc	.+4      	; 0x19c8 <_ZN6IRrecv15decodeMagiQuestEP14decode_results+0x36>
        DBG_PRINT("Not enough bits to be a MagiQuest packet (");
        DBG_PRINT(irparams.rawlen);
        DBG_PRINT(" < ");
        DBG_PRINT(MAGIQUEST_BITS*2);
        DBG_PRINTLN(")");
        return false;
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	6f c0       	rjmp	.+222    	; 0x1aa6 <_ZN6IRrecv15decodeMagiQuestEP14decode_results+0x114>
    19c8:	7b 01       	movw	r14, r22
    }

    // Read the bits in
    data.llword = 0;
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	1a 82       	std	Y+2, r1	; 0x02
    19ce:	1b 82       	std	Y+3, r1	; 0x03
    19d0:	1c 82       	std	Y+4, r1	; 0x04
    19d2:	1d 82       	std	Y+5, r1	; 0x05
    19d4:	1e 82       	std	Y+6, r1	; 0x06
    19d6:	1f 82       	std	Y+7, r1	; 0x07
    19d8:	18 86       	std	Y+8, r1	; 0x08
    19da:	52 e0       	ldi	r21, 0x02	; 2
    19dc:	a5 2e       	mov	r10, r21
    19de:	b1 2c       	mov	r11, r1
//+=============================================================================
//
#if DECODE_MAGIQUEST
bool IRrecv::decodeMagiQuest(decode_results *results) {
    magiquest_t data;  // Somewhere to build our code
    unsigned int offset = 1;  // Skip the Gap reading
    19e0:	cc 24       	eor	r12, r12
    19e2:	c3 94       	inc	r12
    19e4:	d1 2c       	mov	r13, r1
        return false;
    }

    // Read the bits in
    data.llword = 0;
    while (offset + 1 < irparams.rawlen) {
    19e6:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    19ea:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    19ee:	a8 16       	cp	r10, r24
    19f0:	b9 06       	cpc	r11, r25
    19f2:	08 f0       	brcs	.+2      	; 0x19f6 <_ZN6IRrecv15decodeMagiQuestEP14decode_results+0x64>
    19f4:	44 c0       	rjmp	.+136    	; 0x1a7e <_ZN6IRrecv15decodeMagiQuestEP14decode_results+0xec>
        mark_ = results->rawbuf[offset++];
    19f6:	d7 01       	movw	r26, r14
    19f8:	1b 96       	adiw	r26, 0x0b	; 11
    19fa:	ed 91       	ld	r30, X+
    19fc:	fc 91       	ld	r31, X
    19fe:	1c 97       	sbiw	r26, 0x0c	; 12
    1a00:	d6 01       	movw	r26, r12
    1a02:	aa 0f       	add	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	ae 0f       	add	r26, r30
    1a08:	bf 1f       	adc	r27, r31
    1a0a:	2d 91       	ld	r18, X+
    1a0c:	3c 91       	ld	r19, X
        space_ = results->rawbuf[offset++];
    1a0e:	b2 e0       	ldi	r27, 0x02	; 2
    1a10:	cb 0e       	add	r12, r27
    1a12:	d1 1c       	adc	r13, r1
    1a14:	c5 01       	movw	r24, r10
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	e8 0f       	add	r30, r24
    1a1c:	f9 1f       	adc	r31, r25
    1a1e:	01 90       	ld	r0, Z+
    1a20:	f0 81       	ld	r31, Z
    1a22:	e0 2d       	mov	r30, r0
        ratio_ = space_ / mark_;
    1a24:	cf 01       	movw	r24, r30
    1a26:	b9 01       	movw	r22, r18
    1a28:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
    1a2c:	8b 01       	movw	r16, r22
        DBG_PRINT(" space=");
        DBG_PRINT(space_ * MICROS_PER_TICK);
        DBG_PRINT(" ratio=");
        DBG_PRINTLN(ratio_);

        if (MATCH_MARK(space_ + mark_, MAGIQUEST_PERIOD)) {
    1a2e:	6e e7       	ldi	r22, 0x7E	; 126
    1a30:	74 e0       	ldi	r23, 0x04	; 4
    1a32:	c9 01       	movw	r24, r18
    1a34:	8e 0f       	add	r24, r30
    1a36:	9f 1f       	adc	r25, r31
    1a38:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1a3c:	89 2b       	or	r24, r25
    1a3e:	11 f2       	breq	.-124    	; 0x19c4 <_ZN6IRrecv15decodeMagiQuestEP14decode_results+0x32>
            if (ratio_ > 1) {
                // It's a 0
                data.llword <<= 1;
    1a40:	29 81       	ldd	r18, Y+1	; 0x01
    1a42:	3a 81       	ldd	r19, Y+2	; 0x02
    1a44:	4b 81       	ldd	r20, Y+3	; 0x03
    1a46:	5c 81       	ldd	r21, Y+4	; 0x04
    1a48:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4e:	98 85       	ldd	r25, Y+8	; 0x08
        DBG_PRINT(space_ * MICROS_PER_TICK);
        DBG_PRINT(" ratio=");
        DBG_PRINTLN(ratio_);

        if (MATCH_MARK(space_ + mark_, MAGIQUEST_PERIOD)) {
            if (ratio_ > 1) {
    1a50:	02 30       	cpi	r16, 0x02	; 2
    1a52:	11 05       	cpc	r17, r1
    1a54:	20 f0       	brcs	.+8      	; 0x1a5e <_ZN6IRrecv15decodeMagiQuestEP14decode_results+0xcc>
                // It's a 0
                data.llword <<= 1;
    1a56:	01 e0       	ldi	r16, 0x01	; 1
    1a58:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__ashldi3>
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <_ZN6IRrecv15decodeMagiQuestEP14decode_results+0xd4>
#if DEBUG
                bitstring[(offset/2)-1] = '0';
#endif
            } else {
                // It's a 1
                data.llword = (data.llword << 1) | 1;
    1a5e:	01 e0       	ldi	r16, 0x01	; 1
    1a60:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__ashldi3>
    1a64:	21 60       	ori	r18, 0x01	; 1
    1a66:	29 83       	std	Y+1, r18	; 0x01
    1a68:	3a 83       	std	Y+2, r19	; 0x02
    1a6a:	4b 83       	std	Y+3, r20	; 0x03
    1a6c:	5c 83       	std	Y+4, r21	; 0x04
    1a6e:	6d 83       	std	Y+5, r22	; 0x05
    1a70:	7e 83       	std	Y+6, r23	; 0x06
    1a72:	8f 83       	std	Y+7, r24	; 0x07
    1a74:	98 87       	std	Y+8, r25	; 0x08
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	a8 0e       	add	r10, r24
    1a7a:	b1 1c       	adc	r11, r1
    1a7c:	b4 cf       	rjmp	.-152    	; 0x19e6 <_ZN6IRrecv15decodeMagiQuestEP14decode_results+0x54>
#if DEBUG
    DBG_PRINTLN(bitstring);
#endif

    // Success
    results->decode_type = MAGIQUEST;
    1a7e:	83 e1       	ldi	r24, 0x13	; 19
    1a80:	f7 01       	movw	r30, r14
    1a82:	80 83       	st	Z, r24
    results->bits = offset / 2;
    1a84:	d6 94       	lsr	r13
    1a86:	c7 94       	ror	r12
    1a88:	d2 86       	std	Z+10, r13	; 0x0a
    1a8a:	c1 86       	std	Z+9, r12	; 0x09
    results->value = data.cmd.wand_id;
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	ad 81       	ldd	r26, Y+5	; 0x05
    1a92:	be 81       	ldd	r27, Y+6	; 0x06
    1a94:	83 83       	std	Z+3, r24	; 0x03
    1a96:	94 83       	std	Z+4, r25	; 0x04
    1a98:	a5 83       	std	Z+5, r26	; 0x05
    1a9a:	b6 83       	std	Z+6, r27	; 0x06
    results->magnitude = data.cmd.magnitude;
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	90 87       	std	Z+8, r25	; 0x08
    1aa2:	87 83       	std	Z+7, r24	; 0x07
    DBG_PRINT(" value=");
    DBG_PRINT(results->value);
    DBG_PRINT(" magnitude=");
    DBG_PRINTLN(results->magnitude);

    return true;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
}
    1aa6:	28 96       	adiw	r28, 0x08	; 8
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	bf 90       	pop	r11
    1ac4:	af 90       	pop	r10
    1ac6:	08 95       	ret

00001ac8 <_ZN6IRrecv16decodeMitsubishiEP14decode_results>:
// #define MITSUBISHI_RPT_LENGTH 45000

//+=============================================================================
#if DECODE_MITSUBISHI
bool  IRrecv::decodeMitsubishi (decode_results *results)
{
    1ac8:	8f 92       	push	r8
    1aca:	9f 92       	push	r9
    1acc:	af 92       	push	r10
    1ace:	bf 92       	push	r11
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
    1ae0:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    1ae4:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    1ae8:	82 97       	sbiw	r24, 0x22	; 34
    1aea:	08 f4       	brcc	.+2      	; 0x1aee <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x26>
    1aec:	64 c0       	rjmp	.+200    	; 0x1bb6 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xee>
    1aee:	eb 01       	movw	r28, r22

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
    1af0:	eb 85       	ldd	r30, Y+11	; 0x0b
    1af2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	6e e5       	ldi	r22, 0x5E	; 94
    1afa:	71 e0       	ldi	r23, 0x01	; 1
    1afc:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1b00:	89 2b       	or	r24, r25
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x3e>
    1b04:	58 c0       	rjmp	.+176    	; 0x1bb6 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xee>
    1b06:	02 e0       	ldi	r16, 0x02	; 2
    1b08:	10 e0       	ldi	r17, 0x00	; 0
    1b0a:	c1 2c       	mov	r12, r1
    1b0c:	d1 2c       	mov	r13, r1
    1b0e:	76 01       	movw	r14, r12
    1b10:	63 e0       	ldi	r22, 0x03	; 3
    1b12:	a6 2e       	mov	r10, r22
    1b14:	b1 2c       	mov	r11, r1
  offset++;

  while (offset + 1 < irparams.rawlen) {
    1b16:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    1b1a:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    1b1e:	a8 16       	cp	r10, r24
    1b20:	b9 06       	cpc	r11, r25
    1b22:	f0 f5       	brcc	.+124    	; 0x1ba0 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xd8>
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
    1b24:	48 01       	movw	r8, r16
    1b26:	88 0c       	add	r8, r8
    1b28:	99 1c       	adc	r9, r9
    1b2a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b2c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b2e:	e8 0d       	add	r30, r8
    1b30:	f9 1d       	adc	r31, r9
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	6e e9       	ldi	r22, 0x9E	; 158
    1b38:	77 e0       	ldi	r23, 0x07	; 7
    1b3a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1b3e:	89 2b       	or	r24, r25
    1b40:	39 f0       	breq	.+14     	; 0x1b50 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x88>
    1b42:	cc 0c       	add	r12, r12
    1b44:	dd 1c       	adc	r13, r13
    1b46:	ee 1c       	adc	r14, r14
    1b48:	ff 1c       	adc	r15, r15
    1b4a:	68 94       	set
    1b4c:	c0 f8       	bld	r12, 0
    1b4e:	11 c0       	rjmp	.+34     	; 0x1b72 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xaa>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
    1b50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b52:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b54:	fc 01       	movw	r30, r24
    1b56:	e8 0d       	add	r30, r8
    1b58:	f9 1d       	adc	r31, r9
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	6e ee       	ldi	r22, 0xEE	; 238
    1b60:	72 e0       	ldi	r23, 0x02	; 2
    1b62:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1b66:	89 2b       	or	r24, r25
    1b68:	31 f1       	breq	.+76     	; 0x1bb6 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xee>
    1b6a:	cc 0c       	add	r12, r12
    1b6c:	dd 1c       	adc	r13, r13
    1b6e:	ee 1c       	adc	r14, r14
    1b70:	ff 1c       	adc	r15, r15
    else                                                                 return false ;
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    1b72:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b74:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b76:	c5 01       	movw	r24, r10
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	e8 0f       	add	r30, r24
    1b7e:	f9 1f       	adc	r31, r25
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	6e e5       	ldi	r22, 0x5E	; 94
    1b86:	71 e0       	ldi	r23, 0x01	; 1
    1b88:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1b8c:	95 01       	movw	r18, r10
    1b8e:	2e 5f       	subi	r18, 0xFE	; 254
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	89 2b       	or	r24, r25
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xd6>
    offset++;
    1b96:	0e 5f       	subi	r16, 0xFE	; 254
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	59 01       	movw	r10, r18

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
  offset++;

  while (offset + 1 < irparams.rawlen) {
    1b9c:	bc cf       	rjmp	.-136    	; 0x1b16 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x4e>
    1b9e:	85 01       	movw	r16, r10
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
    1ba0:	01 50       	subi	r16, 0x01	; 1
    1ba2:	11 09       	sbc	r17, r1
    1ba4:	16 95       	lsr	r17
    1ba6:	07 95       	ror	r16
    1ba8:	1a 87       	std	Y+10, r17	; 0x0a
    1baa:	09 87       	std	Y+9, r16	; 0x09
  if (results->bits < MITSUBISHI_BITS) {
    1bac:	00 31       	cpi	r16, 0x10	; 16
    1bae:	11 05       	cpc	r17, r1
    1bb0:	20 f4       	brcc	.+8      	; 0x1bba <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xf2>
    results->bits = 0;
    1bb2:	1a 86       	std	Y+10, r1	; 0x0a
    1bb4:	19 86       	std	Y+9, r1	; 0x09
    return false;
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	07 c0       	rjmp	.+14     	; 0x1bc8 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x100>
  }

  results->value       = data;
    1bba:	cb 82       	std	Y+3, r12	; 0x03
    1bbc:	dc 82       	std	Y+4, r13	; 0x04
    1bbe:	ed 82       	std	Y+5, r14	; 0x05
    1bc0:	fe 82       	std	Y+6, r15	; 0x06
  results->decode_type = MITSUBISHI;
    1bc2:	8c e0       	ldi	r24, 0x0C	; 12
    1bc4:	88 83       	st	Y, r24
  return true;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
}
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	df 90       	pop	r13
    1bd6:	cf 90       	pop	r12
    1bd8:	bf 90       	pop	r11
    1bda:	af 90       	pop	r10
    1bdc:	9f 90       	pop	r9
    1bde:	8f 90       	pop	r8
    1be0:	08 95       	ret

00001be2 <_ZN6IRrecv9decodeNECEP14decode_results>:

//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
bool IRrecv::decodeNEC(decode_results *results) {
    1be2:	af 92       	push	r10
    1be4:	bf 92       	push	r11
    1be6:	cf 92       	push	r12
    1be8:	df 92       	push	r13
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	eb 01       	movw	r28, r22
    long data = 0;  // We decode in to here; Start with nothing
    int offset = 1;  // Index in to results; Skip first entry!?

    // Check header "mark"
    if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
    1bf8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bfa:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	68 e2       	ldi	r22, 0x28	; 40
    1c02:	73 e2       	ldi	r23, 0x23	; 35
    1c04:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1c08:	89 2b       	or	r24, r25
    1c0a:	11 f4       	brne	.+4      	; 0x1c10 <_ZN6IRrecv9decodeNECEP14decode_results+0x2e>
        return false;
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	81 c0       	rjmp	.+258    	; 0x1d12 <_ZN6IRrecv9decodeNECEP14decode_results+0x130>
    }
    offset++;

    // Check for repeat
    if ((irparams.rawlen == 4) && MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE)
    1c10:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    1c14:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
            && MATCH_MARK(results->rawbuf[offset + 1], NEC_BIT_MARK)) {
    1c18:	04 97       	sbiw	r24, 0x04	; 4
    1c1a:	09 f5       	brne	.+66     	; 0x1c5e <_ZN6IRrecv9decodeNECEP14decode_results+0x7c>
        return false;
    }
    offset++;

    // Check for repeat
    if ((irparams.rawlen == 4) && MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE)
    1c1c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c1e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c20:	84 81       	ldd	r24, Z+4	; 0x04
    1c22:	95 81       	ldd	r25, Z+5	; 0x05
    1c24:	6a ec       	ldi	r22, 0xCA	; 202
    1c26:	78 e0       	ldi	r23, 0x08	; 8
    1c28:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1c2c:	89 2b       	or	r24, r25
    1c2e:	b9 f0       	breq	.+46     	; 0x1c5e <_ZN6IRrecv9decodeNECEP14decode_results+0x7c>
            && MATCH_MARK(results->rawbuf[offset + 1], NEC_BIT_MARK)) {
    1c30:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c32:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c34:	86 81       	ldd	r24, Z+6	; 0x06
    1c36:	97 81       	ldd	r25, Z+7	; 0x07
    1c38:	60 e3       	ldi	r22, 0x30	; 48
    1c3a:	72 e0       	ldi	r23, 0x02	; 2
    1c3c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1c40:	89 2b       	or	r24, r25
    1c42:	69 f0       	breq	.+26     	; 0x1c5e <_ZN6IRrecv9decodeNECEP14decode_results+0x7c>
        results->bits = 0;
    1c44:	1a 86       	std	Y+10, r1	; 0x0a
    1c46:	19 86       	std	Y+9, r1	; 0x09
        results->value = REPEAT;
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	ad 83       	std	Y+5, r26	; 0x05
    1c54:	be 83       	std	Y+6, r27	; 0x06
        results->decode_type = NEC;
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	88 83       	st	Y, r24
        return true;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	5a c0       	rjmp	.+180    	; 0x1d12 <_ZN6IRrecv9decodeNECEP14decode_results+0x130>
    }

    // Check we have enough data
    if (irparams.rawlen < (2 * NEC_BITS) + 4) {
    1c5e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    1c62:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    1c66:	84 34       	cpi	r24, 0x44	; 68
    1c68:	91 05       	cpc	r25, r1
    1c6a:	80 f2       	brcs	.-96     	; 0x1c0c <_ZN6IRrecv9decodeNECEP14decode_results+0x2a>
        return false;
    }
    // Check header "space"
    if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
    1c6c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c6e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c70:	84 81       	ldd	r24, Z+4	; 0x04
    1c72:	95 81       	ldd	r25, Z+5	; 0x05
    1c74:	64 e9       	ldi	r22, 0x94	; 148
    1c76:	71 e1       	ldi	r23, 0x11	; 17
    1c78:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1c7c:	89 2b       	or	r24, r25
    1c7e:	31 f2       	breq	.-116    	; 0x1c0c <_ZN6IRrecv9decodeNECEP14decode_results+0x2a>
    1c80:	06 e0       	ldi	r16, 0x06	; 6
    1c82:	10 e0       	ldi	r17, 0x00	; 0
    1c84:	c1 2c       	mov	r12, r1
    1c86:	d1 2c       	mov	r13, r1
    1c88:	76 01       	movw	r14, r12
    offset++;

    // Build the data
    for (int i = 0; i < NEC_BITS; i++) {
        // Check data "mark"
        if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK)) {
    1c8a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c8c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c8e:	e0 0f       	add	r30, r16
    1c90:	f1 1f       	adc	r31, r17
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	60 e3       	ldi	r22, 0x30	; 48
    1c98:	72 e0       	ldi	r23, 0x02	; 2
    1c9a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1c9e:	89 2b       	or	r24, r25
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <_ZN6IRrecv9decodeNECEP14decode_results+0xc2>
    1ca2:	b4 cf       	rjmp	.-152    	; 0x1c0c <_ZN6IRrecv9decodeNECEP14decode_results+0x2a>
            return false;
        }
        offset++;

        if (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE)) {
    1ca4:	58 01       	movw	r10, r16
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	a8 0e       	add	r10, r24
    1caa:	b1 1c       	adc	r11, r1
    1cac:	eb 85       	ldd	r30, Y+11	; 0x0b
    1cae:	fc 85       	ldd	r31, Y+12	; 0x0c
    1cb0:	ea 0d       	add	r30, r10
    1cb2:	fb 1d       	adc	r31, r11
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
    1cb8:	6a e9       	ldi	r22, 0x9A	; 154
    1cba:	76 e0       	ldi	r23, 0x06	; 6
    1cbc:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1cc0:	89 2b       	or	r24, r25
    1cc2:	39 f0       	breq	.+14     	; 0x1cd2 <_ZN6IRrecv9decodeNECEP14decode_results+0xf0>
            data = (data << 1) | 1;
    1cc4:	cc 0c       	add	r12, r12
    1cc6:	dd 1c       	adc	r13, r13
    1cc8:	ee 1c       	adc	r14, r14
    1cca:	ff 1c       	adc	r15, r15
    1ccc:	68 94       	set
    1cce:	c0 f8       	bld	r12, 0
    1cd0:	12 c0       	rjmp	.+36     	; 0x1cf6 <_ZN6IRrecv9decodeNECEP14decode_results+0x114>
        } else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE)) {
    1cd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	ea 0d       	add	r30, r10
    1cda:	fb 1d       	adc	r31, r11
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	60 e3       	ldi	r22, 0x30	; 48
    1ce2:	72 e0       	ldi	r23, 0x02	; 2
    1ce4:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1ce8:	89 2b       	or	r24, r25
    1cea:	09 f4       	brne	.+2      	; 0x1cee <_ZN6IRrecv9decodeNECEP14decode_results+0x10c>
    1cec:	8f cf       	rjmp	.-226    	; 0x1c0c <_ZN6IRrecv9decodeNECEP14decode_results+0x2a>
            data = (data << 1) | 0;
    1cee:	cc 0c       	add	r12, r12
    1cf0:	dd 1c       	adc	r13, r13
    1cf2:	ee 1c       	adc	r14, r14
    1cf4:	ff 1c       	adc	r15, r15
    1cf6:	0c 5f       	subi	r16, 0xFC	; 252
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
        return false;
    }
    offset++;

    // Build the data
    for (int i = 0; i < NEC_BITS; i++) {
    1cfa:	06 38       	cpi	r16, 0x86	; 134
    1cfc:	11 05       	cpc	r17, r1
    1cfe:	29 f6       	brne	.-118    	; 0x1c8a <_ZN6IRrecv9decodeNECEP14decode_results+0xa8>
        }
        offset++;
    }

    // Success
    results->bits = NEC_BITS;
    1d00:	80 e2       	ldi	r24, 0x20	; 32
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9a 87       	std	Y+10, r25	; 0x0a
    1d06:	89 87       	std	Y+9, r24	; 0x09
    results->value = data;
    1d08:	cb 82       	std	Y+3, r12	; 0x03
    1d0a:	dc 82       	std	Y+4, r13	; 0x04
    1d0c:	ed 82       	std	Y+5, r14	; 0x05
    1d0e:	fe 82       	std	Y+6, r15	; 0x06
    1d10:	a2 cf       	rjmp	.-188    	; 0x1c56 <_ZN6IRrecv9decodeNECEP14decode_results+0x74>
    results->decode_type = NEC;

    return true;
}
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	df 90       	pop	r13
    1d20:	cf 90       	pop	r12
    1d22:	bf 90       	pop	r11
    1d24:	af 90       	pop	r10
    1d26:	08 95       	ret

00001d28 <_ZN6IRrecv15decodePanasonicEP14decode_results>:
}
#endif

//+=============================================================================
#if DECODE_PANASONIC
bool IRrecv::decodePanasonic(decode_results *results) {
    1d28:	6f 92       	push	r6
    1d2a:	7f 92       	push	r7
    1d2c:	8f 92       	push	r8
    1d2e:	9f 92       	push	r9
    1d30:	af 92       	push	r10
    1d32:	bf 92       	push	r11
    1d34:	cf 92       	push	r12
    1d36:	df 92       	push	r13
    1d38:	ef 92       	push	r14
    1d3a:	ff 92       	push	r15
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	eb 01       	movw	r28, r22
    unsigned long long data = 0;
    int offset = 1;

    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_MARK)) {
    1d46:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d48:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	6e ea       	ldi	r22, 0xAE	; 174
    1d50:	7d e0       	ldi	r23, 0x0D	; 13
    1d52:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1d56:	89 2b       	or	r24, r25
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <_ZN6IRrecv15decodePanasonicEP14decode_results+0x36>
        return false;
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	6c c0       	rjmp	.+216    	; 0x1e36 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x10e>
    }
    offset++;
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_SPACE)) {
    1d5e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d60:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d62:	84 81       	ldd	r24, Z+4	; 0x04
    1d64:	95 81       	ldd	r25, Z+5	; 0x05
    1d66:	66 ed       	ldi	r22, 0xD6	; 214
    1d68:	76 e0       	ldi	r23, 0x06	; 6
    1d6a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1d6e:	89 2b       	or	r24, r25
    1d70:	a1 f3       	breq	.-24     	; 0x1d5a <_ZN6IRrecv15decodePanasonicEP14decode_results+0x32>
    1d72:	86 e0       	ldi	r24, 0x06	; 6
    1d74:	a8 2e       	mov	r10, r24
    1d76:	b1 2c       	mov	r11, r1
    1d78:	c1 2c       	mov	r12, r1
    1d7a:	d1 2c       	mov	r13, r1
    1d7c:	e1 2c       	mov	r14, r1
    1d7e:	f1 2c       	mov	r15, r1
    1d80:	00 e0       	ldi	r16, 0x00	; 0
    1d82:	10 e0       	ldi	r17, 0x00	; 0
    1d84:	61 2c       	mov	r6, r1
    1d86:	71 2c       	mov	r7, r1
    }
    offset++;

    // decode address
    for (int i = 0; i < PANASONIC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_BIT_MARK)) {
    1d88:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d8a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d8c:	ea 0d       	add	r30, r10
    1d8e:	fb 1d       	adc	r31, r11
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	66 ef       	ldi	r22, 0xF6	; 246
    1d96:	71 e0       	ldi	r23, 0x01	; 1
    1d98:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    1d9c:	89 2b       	or	r24, r25
    1d9e:	e9 f2       	breq	.-70     	; 0x1d5a <_ZN6IRrecv15decodePanasonicEP14decode_results+0x32>
            return false;
        }
        offset++;

        if (MATCH_SPACE(results->rawbuf[offset], PANASONIC_ONE_SPACE)) {
    1da0:	45 01       	movw	r8, r10
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	88 0e       	add	r8, r24
    1da6:	91 1c       	adc	r9, r1
    1da8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1daa:	fc 85       	ldd	r31, Y+12	; 0x0c
    1dac:	e8 0d       	add	r30, r8
    1dae:	f9 1d       	adc	r31, r9
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	6c ed       	ldi	r22, 0xDC	; 220
    1db6:	74 e0       	ldi	r23, 0x04	; 4
    1db8:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1dbc:	89 2b       	or	r24, r25
    1dbe:	49 f0       	breq	.+18     	; 0x1dd2 <_ZN6IRrecv15decodePanasonicEP14decode_results+0xaa>
            data = (data << 1) | 1;
    1dc0:	96 01       	movw	r18, r12
    1dc2:	a7 01       	movw	r20, r14
    1dc4:	b8 01       	movw	r22, r16
    1dc6:	c3 01       	movw	r24, r6
    1dc8:	01 e0       	ldi	r16, 0x01	; 1
    1dca:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__ashldi3>
    1dce:	21 60       	ori	r18, 0x01	; 1
    1dd0:	15 c0       	rjmp	.+42     	; 0x1dfc <_ZN6IRrecv15decodePanasonicEP14decode_results+0xd4>
        } else if (MATCH_SPACE(results->rawbuf[offset], PANASONIC_ZERO_SPACE)) {
    1dd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	e8 0d       	add	r30, r8
    1dda:	f9 1d       	adc	r31, r9
    1ddc:	80 81       	ld	r24, Z
    1dde:	91 81       	ldd	r25, Z+1	; 0x01
    1de0:	60 e9       	ldi	r22, 0x90	; 144
    1de2:	71 e0       	ldi	r23, 0x01	; 1
    1de4:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    1de8:	89 2b       	or	r24, r25
    1dea:	09 f4       	brne	.+2      	; 0x1dee <_ZN6IRrecv15decodePanasonicEP14decode_results+0xc6>
    1dec:	b6 cf       	rjmp	.-148    	; 0x1d5a <_ZN6IRrecv15decodePanasonicEP14decode_results+0x32>
            data = (data << 1) | 0;
    1dee:	96 01       	movw	r18, r12
    1df0:	a7 01       	movw	r20, r14
    1df2:	b8 01       	movw	r22, r16
    1df4:	c3 01       	movw	r24, r6
    1df6:	01 e0       	ldi	r16, 0x01	; 1
    1df8:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__ashldi3>
    1dfc:	69 01       	movw	r12, r18
    1dfe:	7a 01       	movw	r14, r20
    1e00:	8b 01       	movw	r16, r22
    1e02:	3c 01       	movw	r6, r24
    1e04:	84 e0       	ldi	r24, 0x04	; 4
    1e06:	a8 0e       	add	r10, r24
    1e08:	b1 1c       	adc	r11, r1
        return false;
    }
    offset++;

    // decode address
    for (int i = 0; i < PANASONIC_BITS; i++) {
    1e0a:	86 ec       	ldi	r24, 0xC6	; 198
    1e0c:	a8 16       	cp	r10, r24
    1e0e:	b1 04       	cpc	r11, r1
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <_ZN6IRrecv15decodePanasonicEP14decode_results+0xec>
    1e12:	ba cf       	rjmp	.-140    	; 0x1d88 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x60>
            return false;
        }
        offset++;
    }

    results->value = (unsigned long) data;
    1e14:	2b 83       	std	Y+3, r18	; 0x03
    1e16:	3c 83       	std	Y+4, r19	; 0x04
    1e18:	4d 83       	std	Y+5, r20	; 0x05
    1e1a:	5e 83       	std	Y+6, r21	; 0x06
    results->address = (unsigned int) (data >> 32);
    1e1c:	c3 01       	movw	r24, r6
    1e1e:	00 e2       	ldi	r16, 0x20	; 32
    1e20:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__lshrdi3>
    1e24:	29 83       	std	Y+1, r18	; 0x01
    1e26:	3a 83       	std	Y+2, r19	; 0x02
    results->decode_type = PANASONIC;
    1e28:	85 e0       	ldi	r24, 0x05	; 5
    1e2a:	88 83       	st	Y, r24
    results->bits = PANASONIC_BITS;
    1e2c:	80 e3       	ldi	r24, 0x30	; 48
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9a 87       	std	Y+10, r25	; 0x0a
    1e32:	89 87       	std	Y+9, r24	; 0x09

    return true;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
}
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	9f 90       	pop	r9
    1e4c:	8f 90       	pop	r8
    1e4e:	7f 90       	pop	r7
    1e50:	6f 90       	pop	r6
    1e52:	08 95       	ret

00001e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>:
            space(t);
            mark(t);
        }
    }

    space(0);  // Always end with the LED off
    1e54:	8f 92       	push	r8
    1e56:	9f 92       	push	r9
    1e58:	af 92       	push	r10
    1e5a:	bf 92       	push	r11
    1e5c:	cf 92       	push	r12
    1e5e:	df 92       	push	r13
    1e60:	ef 92       	push	r14
    1e62:	ff 92       	push	r15
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	da 01       	movw	r26, r20
    1e6e:	8d 91       	ld	r24, X+
    1e70:	9c 91       	ld	r25, X
    1e72:	db 01       	movw	r26, r22
    1e74:	1d 96       	adiw	r26, 0x0d	; 13
    1e76:	ed 91       	ld	r30, X+
    1e78:	fc 91       	ld	r31, X
    1e7a:	1e 97       	sbiw	r26, 0x0e	; 14
    1e7c:	8e 17       	cp	r24, r30
    1e7e:	9f 07       	cpc	r25, r31
    1e80:	08 f0       	brcs	.+2      	; 0x1e84 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0x30>
    1e82:	4d c0       	rjmp	.+154    	; 0x1f1e <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0xca>
    1e84:	fc 01       	movw	r30, r24
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	1b 96       	adiw	r26, 0x0b	; 11
    1e8c:	6d 91       	ld	r22, X+
    1e8e:	7c 91       	ld	r23, X
    1e90:	1c 97       	sbiw	r26, 0x0c	; 12
    1e92:	e6 0f       	add	r30, r22
    1e94:	f7 1f       	adc	r31, r23
    1e96:	a0 80       	ld	r10, Z
    1e98:	b1 80       	ldd	r11, Z+1	; 0x01
    1e9a:	81 70       	andi	r24, 0x01	; 1
    1e9c:	99 27       	eor	r25, r25
    1e9e:	6c 01       	movw	r12, r24
    1ea0:	b1 e0       	ldi	r27, 0x01	; 1
    1ea2:	cb 26       	eor	r12, r27
    1ea4:	89 2b       	or	r24, r25
    1ea6:	19 f4       	brne	.+6      	; 0x1eae <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0x5a>
    1ea8:	8c e9       	ldi	r24, 0x9C	; 156
    1eaa:	9f ef       	ldi	r25, 0xFF	; 255
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0x5e>
    1eae:	84 e6       	ldi	r24, 0x64	; 100
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	79 01       	movw	r14, r18
    1eb4:	ea 01       	movw	r28, r20
    1eb6:	4c 01       	movw	r8, r24
    1eb8:	80 0e       	add	r8, r16
    1eba:	91 1e       	adc	r9, r17
    1ebc:	b4 01       	movw	r22, r8
    1ebe:	c5 01       	movw	r24, r10
    1ec0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_Z5MATCHii>
    1ec4:	89 2b       	or	r24, r25
    1ec6:	99 f4       	brne	.+38     	; 0x1eee <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0x9a>
    1ec8:	80 0e       	add	r8, r16
    1eca:	91 1e       	adc	r9, r17
    1ecc:	b4 01       	movw	r22, r8
    1ece:	c5 01       	movw	r24, r10
    1ed0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_Z5MATCHii>
    1ed4:	89 2b       	or	r24, r25
    1ed6:	71 f4       	brne	.+28     	; 0x1ef4 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0xa0>
    1ed8:	b8 01       	movw	r22, r16
    1eda:	68 0d       	add	r22, r8
    1edc:	79 1d       	adc	r23, r9
    1ede:	c5 01       	movw	r24, r10
    1ee0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_Z5MATCHii>
    1ee4:	89 2b       	or	r24, r25
    1ee6:	f1 f0       	breq	.+60     	; 0x1f24 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0xd0>
    1ee8:	23 e0       	ldi	r18, 0x03	; 3
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	05 c0       	rjmp	.+10     	; 0x1ef8 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0xa4>
    1eee:	21 e0       	ldi	r18, 0x01	; 1
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0xa4>
    1ef4:	22 e0       	ldi	r18, 0x02	; 2
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	f7 01       	movw	r30, r14
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	82 17       	cp	r24, r18
    1f02:	93 07       	cpc	r25, r19
    1f04:	1c f4       	brge	.+6      	; 0x1f0c <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0xb8>
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	07 c0       	rjmp	.+14     	; 0x1f1a <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0xc6>
    1f0c:	11 82       	std	Z+1, r1	; 0x01
    1f0e:	10 82       	st	Z, r1
    1f10:	88 81       	ld	r24, Y
    1f12:	99 81       	ldd	r25, Y+1	; 0x01
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	99 83       	std	Y+1, r25	; 0x01
    1f18:	88 83       	st	Y, r24
    1f1a:	c6 01       	movw	r24, r12
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0xd4>
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii+0xd4>
    1f24:	8f ef       	ldi	r24, 0xFF	; 255
    1f26:	9f ef       	ldi	r25, 0xFF	; 255
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	df 90       	pop	r13
    1f36:	cf 90       	pop	r12
    1f38:	bf 90       	pop	r11
    1f3a:	af 90       	pop	r10
    1f3c:	9f 90       	pop	r9
    1f3e:	8f 90       	pop	r8
    1f40:	08 95       	ret

00001f42 <_ZN6IRrecv9decodeRC5EP14decode_results>:
    1f42:	4f 92       	push	r4
    1f44:	5f 92       	push	r5
    1f46:	6f 92       	push	r6
    1f48:	7f 92       	push	r7
    1f4a:	8f 92       	push	r8
    1f4c:	9f 92       	push	r9
    1f4e:	af 92       	push	r10
    1f50:	bf 92       	push	r11
    1f52:	cf 92       	push	r12
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <_ZN6IRrecv9decodeRC5EP14decode_results+0x22>
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <_ZN6IRrecv9decodeRC5EP14decode_results+0x24>
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	1c 82       	std	Y+4, r1	; 0x04
    1f6c:	1b 82       	std	Y+3, r1	; 0x03
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	3a 83       	std	Y+2, r19	; 0x02
    1f74:	29 83       	std	Y+1, r18	; 0x01
    1f76:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <irparams+0x4>
    1f7a:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <irparams+0x5>
    1f7e:	2d 30       	cpi	r18, 0x0D	; 13
    1f80:	31 05       	cpc	r19, r1
    1f82:	10 f4       	brcc	.+4      	; 0x1f88 <_ZN6IRrecv9decodeRC5EP14decode_results+0x46>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	70 c0       	rjmp	.+224    	; 0x2068 <_ZN6IRrecv9decodeRC5EP14decode_results+0x126>
    1f88:	7b 01       	movw	r14, r22
    1f8a:	6c 01       	movw	r12, r24
    1f8c:	09 e7       	ldi	r16, 0x79	; 121
    1f8e:	13 e0       	ldi	r17, 0x03	; 3
    1f90:	9e 01       	movw	r18, r28
    1f92:	2d 5f       	subi	r18, 0xFD	; 253
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
    1f96:	ae 01       	movw	r20, r28
    1f98:	4f 5f       	subi	r20, 0xFF	; 255
    1f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    1fa0:	89 2b       	or	r24, r25
    1fa2:	81 f7       	brne	.-32     	; 0x1f84 <_ZN6IRrecv9decodeRC5EP14decode_results+0x42>
    1fa4:	9e 01       	movw	r18, r28
    1fa6:	2d 5f       	subi	r18, 0xFD	; 253
    1fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1faa:	ae 01       	movw	r20, r28
    1fac:	4f 5f       	subi	r20, 0xFF	; 255
    1fae:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb0:	b7 01       	movw	r22, r14
    1fb2:	c6 01       	movw	r24, r12
    1fb4:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	21 f7       	brne	.-56     	; 0x1f84 <_ZN6IRrecv9decodeRC5EP14decode_results+0x42>
    1fbc:	9e 01       	movw	r18, r28
    1fbe:	2d 5f       	subi	r18, 0xFD	; 253
    1fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc2:	ae 01       	movw	r20, r28
    1fc4:	4f 5f       	subi	r20, 0xFF	; 255
    1fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc8:	b7 01       	movw	r22, r14
    1fca:	c6 01       	movw	r24, r12
    1fcc:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    1fd0:	89 2b       	or	r24, r25
    1fd2:	c1 f6       	brne	.-80     	; 0x1f84 <_ZN6IRrecv9decodeRC5EP14decode_results+0x42>
    1fd4:	41 2c       	mov	r4, r1
    1fd6:	51 2c       	mov	r5, r1
    1fd8:	32 01       	movw	r6, r4
    1fda:	a1 2c       	mov	r10, r1
    1fdc:	b1 2c       	mov	r11, r1
    1fde:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <irparams+0x4>
    1fe2:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <irparams+0x5>
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	82 17       	cp	r24, r18
    1fec:	93 07       	cpc	r25, r19
    1fee:	98 f5       	brcc	.+102    	; 0x2056 <_ZN6IRrecv9decodeRC5EP14decode_results+0x114>
    1ff0:	09 e7       	ldi	r16, 0x79	; 121
    1ff2:	13 e0       	ldi	r17, 0x03	; 3
    1ff4:	9e 01       	movw	r18, r28
    1ff6:	2d 5f       	subi	r18, 0xFD	; 253
    1ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffa:	ae 01       	movw	r20, r28
    1ffc:	4f 5f       	subi	r20, 0xFF	; 255
    1ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    2000:	b7 01       	movw	r22, r14
    2002:	c6 01       	movw	r24, r12
    2004:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    2008:	4c 01       	movw	r8, r24
    200a:	9e 01       	movw	r18, r28
    200c:	2d 5f       	subi	r18, 0xFD	; 253
    200e:	3f 4f       	sbci	r19, 0xFF	; 255
    2010:	ae 01       	movw	r20, r28
    2012:	4f 5f       	subi	r20, 0xFF	; 255
    2014:	5f 4f       	sbci	r21, 0xFF	; 255
    2016:	b7 01       	movw	r22, r14
    2018:	c6 01       	movw	r24, r12
    201a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    201e:	21 e0       	ldi	r18, 0x01	; 1
    2020:	82 16       	cp	r8, r18
    2022:	91 04       	cpc	r9, r1
    2024:	51 f4       	brne	.+20     	; 0x203a <_ZN6IRrecv9decodeRC5EP14decode_results+0xf8>
    2026:	89 2b       	or	r24, r25
    2028:	09 f0       	breq	.+2      	; 0x202c <_ZN6IRrecv9decodeRC5EP14decode_results+0xea>
    202a:	ac cf       	rjmp	.-168    	; 0x1f84 <_ZN6IRrecv9decodeRC5EP14decode_results+0x42>
    202c:	44 0c       	add	r4, r4
    202e:	55 1c       	adc	r5, r5
    2030:	66 1c       	adc	r6, r6
    2032:	77 1c       	adc	r7, r7
    2034:	68 94       	set
    2036:	40 f8       	bld	r4, 0
    2038:	0a c0       	rjmp	.+20     	; 0x204e <_ZN6IRrecv9decodeRC5EP14decode_results+0x10c>
    203a:	89 28       	or	r8, r9
    203c:	09 f0       	breq	.+2      	; 0x2040 <_ZN6IRrecv9decodeRC5EP14decode_results+0xfe>
    203e:	a2 cf       	rjmp	.-188    	; 0x1f84 <_ZN6IRrecv9decodeRC5EP14decode_results+0x42>
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	09 f0       	breq	.+2      	; 0x2046 <_ZN6IRrecv9decodeRC5EP14decode_results+0x104>
    2044:	9f cf       	rjmp	.-194    	; 0x1f84 <_ZN6IRrecv9decodeRC5EP14decode_results+0x42>
    2046:	44 0c       	add	r4, r4
    2048:	55 1c       	adc	r5, r5
    204a:	66 1c       	adc	r6, r6
    204c:	77 1c       	adc	r7, r7
    204e:	8f ef       	ldi	r24, 0xFF	; 255
    2050:	a8 1a       	sub	r10, r24
    2052:	b8 0a       	sbc	r11, r24
    2054:	c4 cf       	rjmp	.-120    	; 0x1fde <_ZN6IRrecv9decodeRC5EP14decode_results+0x9c>
    2056:	f7 01       	movw	r30, r14
    2058:	b2 86       	std	Z+10, r11	; 0x0a
    205a:	a1 86       	std	Z+9, r10	; 0x09
    205c:	43 82       	std	Z+3, r4	; 0x03
    205e:	54 82       	std	Z+4, r5	; 0x04
    2060:	65 82       	std	Z+5, r6	; 0x05
    2062:	76 82       	std	Z+6, r7	; 0x06
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 83       	st	Z, r24
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	bf 90       	pop	r11
    2082:	af 90       	pop	r10
    2084:	9f 90       	pop	r9
    2086:	8f 90       	pop	r8
    2088:	7f 90       	pop	r7
    208a:	6f 90       	pop	r6
    208c:	5f 90       	pop	r5
    208e:	4f 90       	pop	r4
    2090:	08 95       	ret

00002092 <_ZN6IRrecv9decodeRC6EP14decode_results>:
}
#endif

//+=============================================================================
#if DECODE_RC6
bool IRrecv::decodeRC6(decode_results *results) {
    2092:	2f 92       	push	r2
    2094:	3f 92       	push	r3
    2096:	4f 92       	push	r4
    2098:	5f 92       	push	r5
    209a:	6f 92       	push	r6
    209c:	7f 92       	push	r7
    209e:	8f 92       	push	r8
    20a0:	9f 92       	push	r9
    20a2:	af 92       	push	r10
    20a4:	bf 92       	push	r11
    20a6:	cf 92       	push	r12
    20a8:	df 92       	push	r13
    20aa:	ef 92       	push	r14
    20ac:	ff 92       	push	r15
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x26>
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <_ZN6IRrecv9decodeRC6EP14decode_results+0x28>
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    int nbits;
    long data = 0;
    int used = 0;
    20be:	1c 82       	std	Y+4, r1	; 0x04
    20c0:	1b 82       	std	Y+3, r1	; 0x03
    unsigned int offset = 1;  // Skip first space
    20c2:	21 e0       	ldi	r18, 0x01	; 1
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	3a 83       	std	Y+2, r19	; 0x02
    20c8:	29 83       	std	Y+1, r18	; 0x01

    if (results->rawlen < MIN_RC6_SAMPLES) {
    20ca:	db 01       	movw	r26, r22
    20cc:	1d 96       	adiw	r26, 0x0d	; 13
    20ce:	2d 91       	ld	r18, X+
    20d0:	3c 91       	ld	r19, X
    20d2:	1e 97       	sbiw	r26, 0x0e	; 14
    20d4:	23 2b       	or	r18, r19
    20d6:	11 f4       	brne	.+4      	; 0x20dc <_ZN6IRrecv9decodeRC6EP14decode_results+0x4a>
        return false;
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	c1 c0       	rjmp	.+386    	; 0x225e <_ZN6IRrecv9decodeRC6EP14decode_results+0x1cc>
    20dc:	7b 01       	movw	r14, r22
    20de:	6c 01       	movw	r12, r24
    }

// Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], RC6_HDR_MARK)) {
    20e0:	db 01       	movw	r26, r22
    20e2:	1b 96       	adiw	r26, 0x0b	; 11
    20e4:	ed 91       	ld	r30, X+
    20e6:	fc 91       	ld	r31, X
    20e8:	1c 97       	sbiw	r26, 0x0c	; 12
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	6a e6       	ldi	r22, 0x6A	; 106
    20f0:	7a e0       	ldi	r23, 0x0A	; 10
    20f2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    20f6:	89 2b       	or	r24, r25
    20f8:	79 f3       	breq	.-34     	; 0x20d8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x46>
        return false;
    }
    offset++;
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	01 96       	adiw	r24, 0x01	; 1
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01

    if (!MATCH_SPACE(results->rawbuf[offset], RC6_HDR_SPACE)) {
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	d7 01       	movw	r26, r14
    210a:	1b 96       	adiw	r26, 0x0b	; 11
    210c:	ed 91       	ld	r30, X+
    210e:	fc 91       	ld	r31, X
    2110:	1c 97       	sbiw	r26, 0x0c	; 12
    2112:	e8 0f       	add	r30, r24
    2114:	f9 1f       	adc	r31, r25
    2116:	80 81       	ld	r24, Z
    2118:	91 81       	ldd	r25, Z+1	; 0x01
    211a:	69 e7       	ldi	r22, 0x79	; 121
    211c:	73 e0       	ldi	r23, 0x03	; 3
    211e:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2122:	89 2b       	or	r24, r25
    2124:	c9 f2       	breq	.-78     	; 0x20d8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x46>
        return false;
    }
    offset++;
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	01 96       	adiw	r24, 0x01	; 1
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01

// Get start bit (1)
    if (getRClevel(results, &offset, &used, RC6_T1) != MARK) {
    2130:	0c eb       	ldi	r16, 0xBC	; 188
    2132:	11 e0       	ldi	r17, 0x01	; 1
    2134:	9e 01       	movw	r18, r28
    2136:	2d 5f       	subi	r18, 0xFD	; 253
    2138:	3f 4f       	sbci	r19, 0xFF	; 255
    213a:	ae 01       	movw	r20, r28
    213c:	4f 5f       	subi	r20, 0xFF	; 255
    213e:	5f 4f       	sbci	r21, 0xFF	; 255
    2140:	b7 01       	movw	r22, r14
    2142:	c6 01       	movw	r24, r12
    2144:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    2148:	89 2b       	or	r24, r25
    214a:	31 f6       	brne	.-116    	; 0x20d8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x46>
        return false;
    }
    if (getRClevel(results, &offset, &used, RC6_T1) != SPACE) {
    214c:	9e 01       	movw	r18, r28
    214e:	2d 5f       	subi	r18, 0xFD	; 253
    2150:	3f 4f       	sbci	r19, 0xFF	; 255
    2152:	ae 01       	movw	r20, r28
    2154:	4f 5f       	subi	r20, 0xFF	; 255
    2156:	5f 4f       	sbci	r21, 0xFF	; 255
    2158:	b7 01       	movw	r22, r14
    215a:	c6 01       	movw	r24, r12
    215c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	09 f0       	breq	.+2      	; 0x2166 <_ZN6IRrecv9decodeRC6EP14decode_results+0xd4>
    2164:	b9 cf       	rjmp	.-142    	; 0x20d8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x46>
    2166:	21 2c       	mov	r2, r1
    2168:	31 2c       	mov	r3, r1
    216a:	21 01       	movw	r4, r2
    216c:	a1 2c       	mov	r10, r1
    216e:	b1 2c       	mov	r11, r1
        return false;
    }

    for (nbits = 0; offset < results->rawlen; nbits++) {
    2170:	f7 01       	movw	r30, r14
    2172:	25 85       	ldd	r18, Z+13	; 0x0d
    2174:	36 85       	ldd	r19, Z+14	; 0x0e
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	82 17       	cp	r24, r18
    217c:	93 07       	cpc	r25, r19
    217e:	08 f0       	brcs	.+2      	; 0x2182 <_ZN6IRrecv9decodeRC6EP14decode_results+0xf0>
    2180:	64 c0       	rjmp	.+200    	; 0x224a <_ZN6IRrecv9decodeRC6EP14decode_results+0x1b8>
        int levelA, levelB;  // Next two levels

        levelA = getRClevel(results, &offset, &used, RC6_T1);
    2182:	0c eb       	ldi	r16, 0xBC	; 188
    2184:	11 e0       	ldi	r17, 0x01	; 1
    2186:	9e 01       	movw	r18, r28
    2188:	2d 5f       	subi	r18, 0xFD	; 253
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	ae 01       	movw	r20, r28
    218e:	4f 5f       	subi	r20, 0xFF	; 255
    2190:	5f 4f       	sbci	r21, 0xFF	; 255
    2192:	b7 01       	movw	r22, r14
    2194:	c6 01       	movw	r24, r12
    2196:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    219a:	3c 01       	movw	r6, r24
        if (nbits == 3) {
    219c:	f3 e0       	ldi	r31, 0x03	; 3
    219e:	af 16       	cp	r10, r31
    21a0:	b1 04       	cpc	r11, r1
    21a2:	91 f0       	breq	.+36     	; 0x21c8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x136>
            if (levelA != getRClevel(results, &offset, &used, RC6_T1)) {
                return false;
            }
        }

        levelB = getRClevel(results, &offset, &used, RC6_T1);
    21a4:	0c eb       	ldi	r16, 0xBC	; 188
    21a6:	11 e0       	ldi	r17, 0x01	; 1
    21a8:	9e 01       	movw	r18, r28
    21aa:	2d 5f       	subi	r18, 0xFD	; 253
    21ac:	3f 4f       	sbci	r19, 0xFF	; 255
    21ae:	ae 01       	movw	r20, r28
    21b0:	4f 5f       	subi	r20, 0xFF	; 255
    21b2:	5f 4f       	sbci	r21, 0xFF	; 255
    21b4:	b7 01       	movw	r22, r14
    21b6:	c6 01       	movw	r24, r12
    21b8:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    21bc:	4c 01       	movw	r8, r24
        if (nbits == 3) {
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	a8 16       	cp	r10, r24
    21c2:	b1 04       	cpc	r11, r1
    21c4:	09 f5       	brne	.+66     	; 0x2208 <_ZN6IRrecv9decodeRC6EP14decode_results+0x176>
    21c6:	10 c0       	rjmp	.+32     	; 0x21e8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x156>
        int levelA, levelB;  // Next two levels

        levelA = getRClevel(results, &offset, &used, RC6_T1);
        if (nbits == 3) {
            // T bit is double wide; make sure second half matches
            if (levelA != getRClevel(results, &offset, &used, RC6_T1)) {
    21c8:	0c eb       	ldi	r16, 0xBC	; 188
    21ca:	11 e0       	ldi	r17, 0x01	; 1
    21cc:	9e 01       	movw	r18, r28
    21ce:	2d 5f       	subi	r18, 0xFD	; 253
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
    21d2:	ae 01       	movw	r20, r28
    21d4:	4f 5f       	subi	r20, 0xFF	; 255
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
    21d8:	b7 01       	movw	r22, r14
    21da:	c6 01       	movw	r24, r12
    21dc:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    21e0:	68 16       	cp	r6, r24
    21e2:	79 06       	cpc	r7, r25
    21e4:	f9 f2       	breq	.-66     	; 0x21a4 <_ZN6IRrecv9decodeRC6EP14decode_results+0x112>
    21e6:	78 cf       	rjmp	.-272    	; 0x20d8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x46>
        }

        levelB = getRClevel(results, &offset, &used, RC6_T1);
        if (nbits == 3) {
            // T bit is double wide; make sure second half matches
            if (levelB != getRClevel(results, &offset, &used, RC6_T1)) {
    21e8:	0c eb       	ldi	r16, 0xBC	; 188
    21ea:	11 e0       	ldi	r17, 0x01	; 1
    21ec:	9e 01       	movw	r18, r28
    21ee:	2d 5f       	subi	r18, 0xFD	; 253
    21f0:	3f 4f       	sbci	r19, 0xFF	; 255
    21f2:	ae 01       	movw	r20, r28
    21f4:	4f 5f       	subi	r20, 0xFF	; 255
    21f6:	5f 4f       	sbci	r21, 0xFF	; 255
    21f8:	b7 01       	movw	r22, r14
    21fa:	c6 01       	movw	r24, r12
    21fc:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN6IRrecv10getRClevelEP14decode_resultsPjPii>
    2200:	88 16       	cp	r8, r24
    2202:	99 06       	cpc	r9, r25
    2204:	09 f0       	breq	.+2      	; 0x2208 <_ZN6IRrecv9decodeRC6EP14decode_results+0x176>
    2206:	68 cf       	rjmp	.-304    	; 0x20d8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x46>
                return false;
            }
        }

        if ((levelA == MARK) && (levelB == SPACE)) {
    2208:	61 14       	cp	r6, r1
    220a:	71 04       	cpc	r7, r1
    220c:	79 f4       	brne	.+30     	; 0x222c <_ZN6IRrecv9decodeRC6EP14decode_results+0x19a>
    220e:	8a 94       	dec	r8
    2210:	89 28       	or	r8, r9
    2212:	09 f0       	breq	.+2      	; 0x2216 <_ZN6IRrecv9decodeRC6EP14decode_results+0x184>
    2214:	61 cf       	rjmp	.-318    	; 0x20d8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x46>
            data = (data << 1) | 1;  // inverted compared to RC5
    2216:	d2 01       	movw	r26, r4
    2218:	c1 01       	movw	r24, r2
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	aa 1f       	adc	r26, r26
    2220:	bb 1f       	adc	r27, r27
    2222:	1c 01       	movw	r2, r24
    2224:	2d 01       	movw	r4, r26
    2226:	68 94       	set
    2228:	20 f8       	bld	r2, 0
    222a:	0b c0       	rjmp	.+22     	; 0x2242 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1b0>
        } else if ((levelA == SPACE) && (levelB == MARK)) {
    222c:	6a 94       	dec	r6
    222e:	67 28       	or	r6, r7
    2230:	09 f0       	breq	.+2      	; 0x2234 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1a2>
    2232:	52 cf       	rjmp	.-348    	; 0x20d8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x46>
    2234:	89 28       	or	r8, r9
    2236:	09 f0       	breq	.+2      	; 0x223a <_ZN6IRrecv9decodeRC6EP14decode_results+0x1a8>
    2238:	4f cf       	rjmp	.-354    	; 0x20d8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x46>
            data = (data << 1) | 0;
    223a:	22 0c       	add	r2, r2
    223c:	33 1c       	adc	r3, r3
    223e:	44 1c       	adc	r4, r4
    2240:	55 1c       	adc	r5, r5
    }
    if (getRClevel(results, &offset, &used, RC6_T1) != SPACE) {
        return false;
    }

    for (nbits = 0; offset < results->rawlen; nbits++) {
    2242:	ef ef       	ldi	r30, 0xFF	; 255
    2244:	ae 1a       	sub	r10, r30
    2246:	be 0a       	sbc	r11, r30
    2248:	93 cf       	rjmp	.-218    	; 0x2170 <_ZN6IRrecv9decodeRC6EP14decode_results+0xde>
            return false;            // Error
        }
    }

    // Success
    results->bits = nbits;
    224a:	b2 86       	std	Z+10, r11	; 0x0a
    224c:	a1 86       	std	Z+9, r10	; 0x09
    results->value = data;
    224e:	f7 01       	movw	r30, r14
    2250:	23 82       	std	Z+3, r2	; 0x03
    2252:	34 82       	std	Z+4, r3	; 0x04
    2254:	45 82       	std	Z+5, r4	; 0x05
    2256:	56 82       	std	Z+6, r5	; 0x06
    results->decode_type = RC6;
    2258:	82 e0       	ldi	r24, 0x02	; 2
    225a:	80 83       	st	Z, r24
    return true;
    225c:	81 e0       	ldi	r24, 0x01	; 1
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	cf 90       	pop	r12
    2276:	bf 90       	pop	r11
    2278:	af 90       	pop	r10
    227a:	9f 90       	pop	r9
    227c:	8f 90       	pop	r8
    227e:	7f 90       	pop	r7
    2280:	6f 90       	pop	r6
    2282:	5f 90       	pop	r5
    2284:	4f 90       	pop	r4
    2286:	3f 90       	pop	r3
    2288:	2f 90       	pop	r2
    228a:	08 95       	ret

0000228c <_ZN6IRrecv13decodeSAMSUNGEP14decode_results>:

//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
bool IRrecv::decodeSAMSUNG(decode_results *results) {
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	eb 01       	movw	r28, r22
    long data = 0;
    int offset = 1;  // Skip first space

    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK)) {
    22a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    22a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	64 e9       	ldi	r22, 0x94	; 148
    22ac:	71 e1       	ldi	r23, 0x11	; 17
    22ae:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    22b2:	89 2b       	or	r24, r25
    22b4:	11 f4       	brne	.+4      	; 0x22ba <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2e>
        return false;
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	81 c0       	rjmp	.+258    	; 0x23bc <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x130>
    }
    offset++;

// Check for repeat
    if ((irparams.rawlen == 4) && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
    22ba:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    22be:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
            && MATCH_MARK(results->rawbuf[offset + 1], SAMSUNG_BIT_MARK)) {
    22c2:	04 97       	sbiw	r24, 0x04	; 4
    22c4:	09 f5       	brne	.+66     	; 0x2308 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x7c>
        return false;
    }
    offset++;

// Check for repeat
    if ((irparams.rawlen == 4) && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
    22c6:	eb 85       	ldd	r30, Y+11	; 0x0b
    22c8:	fc 85       	ldd	r31, Y+12	; 0x0c
    22ca:	84 81       	ldd	r24, Z+4	; 0x04
    22cc:	95 81       	ldd	r25, Z+5	; 0x05
    22ce:	6a ec       	ldi	r22, 0xCA	; 202
    22d0:	78 e0       	ldi	r23, 0x08	; 8
    22d2:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    22d6:	89 2b       	or	r24, r25
    22d8:	b9 f0       	breq	.+46     	; 0x2308 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x7c>
            && MATCH_MARK(results->rawbuf[offset + 1], SAMSUNG_BIT_MARK)) {
    22da:	eb 85       	ldd	r30, Y+11	; 0x0b
    22dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    22de:	86 81       	ldd	r24, Z+6	; 0x06
    22e0:	97 81       	ldd	r25, Z+7	; 0x07
    22e2:	60 e3       	ldi	r22, 0x30	; 48
    22e4:	72 e0       	ldi	r23, 0x02	; 2
    22e6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    22ea:	89 2b       	or	r24, r25
    22ec:	69 f0       	breq	.+26     	; 0x2308 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x7c>
        results->bits = 0;
    22ee:	1a 86       	std	Y+10, r1	; 0x0a
    22f0:	19 86       	std	Y+9, r1	; 0x09
        results->value = REPEAT;
    22f2:	8f ef       	ldi	r24, 0xFF	; 255
    22f4:	9f ef       	ldi	r25, 0xFF	; 255
    22f6:	dc 01       	movw	r26, r24
    22f8:	8b 83       	std	Y+3, r24	; 0x03
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	ad 83       	std	Y+5, r26	; 0x05
    22fe:	be 83       	std	Y+6, r27	; 0x06
        results->decode_type = SAMSUNG;
    2300:	87 e0       	ldi	r24, 0x07	; 7
    2302:	88 83       	st	Y, r24
        return true;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	5a c0       	rjmp	.+180    	; 0x23bc <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x130>
    }
    if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4) {
    2308:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    230c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    2310:	84 34       	cpi	r24, 0x44	; 68
    2312:	91 05       	cpc	r25, r1
    2314:	80 f2       	brcs	.-96     	; 0x22b6 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2a>
        return false;
    }

// Initial space
    if (!MATCH_SPACE(results->rawbuf[offset], SAMSUNG_HDR_SPACE)) {
    2316:	eb 85       	ldd	r30, Y+11	; 0x0b
    2318:	fc 85       	ldd	r31, Y+12	; 0x0c
    231a:	84 81       	ldd	r24, Z+4	; 0x04
    231c:	95 81       	ldd	r25, Z+5	; 0x05
    231e:	64 e9       	ldi	r22, 0x94	; 148
    2320:	71 e1       	ldi	r23, 0x11	; 17
    2322:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2326:	89 2b       	or	r24, r25
    2328:	31 f2       	breq	.-116    	; 0x22b6 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2a>
    232a:	06 e0       	ldi	r16, 0x06	; 6
    232c:	10 e0       	ldi	r17, 0x00	; 0
    232e:	c1 2c       	mov	r12, r1
    2330:	d1 2c       	mov	r13, r1
    2332:	76 01       	movw	r14, r12
        return false;
    }
    offset++;

    for (int i = 0; i < SAMSUNG_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_BIT_MARK)) {
    2334:	eb 85       	ldd	r30, Y+11	; 0x0b
    2336:	fc 85       	ldd	r31, Y+12	; 0x0c
    2338:	e0 0f       	add	r30, r16
    233a:	f1 1f       	adc	r31, r17
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	60 e3       	ldi	r22, 0x30	; 48
    2342:	72 e0       	ldi	r23, 0x02	; 2
    2344:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    2348:	89 2b       	or	r24, r25
    234a:	09 f4       	brne	.+2      	; 0x234e <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0xc2>
    234c:	b4 cf       	rjmp	.-152    	; 0x22b6 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2a>
            return false;
        }
        offset++;

        if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE)) {
    234e:	58 01       	movw	r10, r16
    2350:	82 e0       	ldi	r24, 0x02	; 2
    2352:	a8 0e       	add	r10, r24
    2354:	b1 1c       	adc	r11, r1
    2356:	eb 85       	ldd	r30, Y+11	; 0x0b
    2358:	fc 85       	ldd	r31, Y+12	; 0x0c
    235a:	ea 0d       	add	r30, r10
    235c:	fb 1d       	adc	r31, r11
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	60 e4       	ldi	r22, 0x40	; 64
    2364:	76 e0       	ldi	r23, 0x06	; 6
    2366:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    236a:	89 2b       	or	r24, r25
    236c:	39 f0       	breq	.+14     	; 0x237c <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0xf0>
            data = (data << 1) | 1;
    236e:	cc 0c       	add	r12, r12
    2370:	dd 1c       	adc	r13, r13
    2372:	ee 1c       	adc	r14, r14
    2374:	ff 1c       	adc	r15, r15
    2376:	68 94       	set
    2378:	c0 f8       	bld	r12, 0
    237a:	12 c0       	rjmp	.+36     	; 0x23a0 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x114>
        } else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE)) {
    237c:	8b 85       	ldd	r24, Y+11	; 0x0b
    237e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2380:	fc 01       	movw	r30, r24
    2382:	ea 0d       	add	r30, r10
    2384:	fb 1d       	adc	r31, r11
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	60 e3       	ldi	r22, 0x30	; 48
    238c:	72 e0       	ldi	r23, 0x02	; 2
    238e:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2392:	89 2b       	or	r24, r25
    2394:	09 f4       	brne	.+2      	; 0x2398 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x10c>
    2396:	8f cf       	rjmp	.-226    	; 0x22b6 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2a>
            data = (data << 1) | 0;
    2398:	cc 0c       	add	r12, r12
    239a:	dd 1c       	adc	r13, r13
    239c:	ee 1c       	adc	r14, r14
    239e:	ff 1c       	adc	r15, r15
    23a0:	0c 5f       	subi	r16, 0xFC	; 252
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    if (!MATCH_SPACE(results->rawbuf[offset], SAMSUNG_HDR_SPACE)) {
        return false;
    }
    offset++;

    for (int i = 0; i < SAMSUNG_BITS; i++) {
    23a4:	06 38       	cpi	r16, 0x86	; 134
    23a6:	11 05       	cpc	r17, r1
    23a8:	29 f6       	brne	.-118    	; 0x2334 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0xa8>
        }
        offset++;
    }

// Success
    results->bits = SAMSUNG_BITS;
    23aa:	80 e2       	ldi	r24, 0x20	; 32
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9a 87       	std	Y+10, r25	; 0x0a
    23b0:	89 87       	std	Y+9, r24	; 0x09
    results->value = data;
    23b2:	cb 82       	std	Y+3, r12	; 0x03
    23b4:	dc 82       	std	Y+4, r13	; 0x04
    23b6:	ed 82       	std	Y+5, r14	; 0x05
    23b8:	fe 82       	std	Y+6, r15	; 0x06
    23ba:	a2 cf       	rjmp	.-188    	; 0x2300 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x74>
    results->decode_type = SAMSUNG;
    return true;
}
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	ff 90       	pop	r15
    23c6:	ef 90       	pop	r14
    23c8:	df 90       	pop	r13
    23ca:	cf 90       	pop	r12
    23cc:	bf 90       	pop	r11
    23ce:	af 90       	pop	r10
    23d0:	08 95       	ret

000023d2 <_ZN6IRrecv11decodeSanyoEP14decode_results>:
#define SANYO_DOUBLE_SPACE_USECS    800  // usually see 713 - not using ticks as get number wrap around
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
bool IRrecv::decodeSanyo(decode_results *results) {
    23d2:	8f 92       	push	r8
    23d4:	9f 92       	push	r9
    23d6:	af 92       	push	r10
    23d8:	bf 92       	push	r11
    23da:	cf 92       	push	r12
    23dc:	df 92       	push	r13
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	eb 01       	movw	r28, r22
    long data = 0;
    unsigned int offset = 0;  // Skip first space  <-- CHECK THIS!

    if (irparams.rawlen < (2 * SANYO_BITS) + 2) {
    23ec:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    23f0:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    23f4:	4a 97       	sbiw	r24, 0x1a	; 26
    23f6:	08 f4       	brcc	.+2      	; 0x23fa <_ZN6IRrecv11decodeSanyoEP14decode_results+0x28>
    23f8:	81 c0       	rjmp	.+258    	; 0x24fc <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12a>
	Serial.println( "test against:");
	Serial.println(SANYO_DOUBLE_SPACE_USECS);
#endif

// Initial space
    if ((results->rawbuf[offset] * MICROS_PER_TICK) < SANYO_DOUBLE_SPACE_USECS) {
    23fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    23fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    23fe:	20 81       	ld	r18, Z
    2400:	31 81       	ldd	r19, Z+1	; 0x01
    2402:	42 e3       	ldi	r20, 0x32	; 50
    2404:	42 9f       	mul	r20, r18
    2406:	c0 01       	movw	r24, r0
    2408:	43 9f       	mul	r20, r19
    240a:	90 0d       	add	r25, r0
    240c:	11 24       	eor	r1, r1
    240e:	80 32       	cpi	r24, 0x20	; 32
    2410:	93 40       	sbci	r25, 0x03	; 3
    2412:	50 f4       	brcc	.+20     	; 0x2428 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x56>
        //Serial.print("IR Gap found: ");
        results->bits = 0;
    2414:	1a 86       	std	Y+10, r1	; 0x0a
    2416:	19 86       	std	Y+9, r1	; 0x09
        results->value = REPEAT;
    2418:	8f ef       	ldi	r24, 0xFF	; 255
    241a:	9f ef       	ldi	r25, 0xFF	; 255
    241c:	dc 01       	movw	r26, r24
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	9c 83       	std	Y+4, r25	; 0x04
    2422:	ad 83       	std	Y+5, r26	; 0x05
    2424:	be 83       	std	Y+6, r27	; 0x06
    2426:	70 c0       	rjmp	.+224    	; 0x2508 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x136>
        return true;
    }
    offset++;

    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	6c ea       	ldi	r22, 0xAC	; 172
    242e:	7d e0       	ldi	r23, 0x0D	; 13
    2430:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    2434:	89 2b       	or	r24, r25
    2436:	09 f4       	brne	.+2      	; 0x243a <_ZN6IRrecv11decodeSanyoEP14decode_results+0x68>
    2438:	61 c0       	rjmp	.+194    	; 0x24fc <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12a>
        return false;
    }
    offset++;

    // Skip Second Mark
    if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    243a:	eb 85       	ldd	r30, Y+11	; 0x0b
    243c:	fc 85       	ldd	r31, Y+12	; 0x0c
    243e:	84 81       	ldd	r24, Z+4	; 0x04
    2440:	95 81       	ldd	r25, Z+5	; 0x05
    2442:	6c ea       	ldi	r22, 0xAC	; 172
    2444:	7d e0       	ldi	r23, 0x0D	; 13
    2446:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    244a:	89 2b       	or	r24, r25
    244c:	09 f4       	brne	.+2      	; 0x2450 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x7e>
    244e:	56 c0       	rjmp	.+172    	; 0x24fc <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12a>
    2450:	54 e0       	ldi	r21, 0x04	; 4
    2452:	a5 2e       	mov	r10, r21
    2454:	b1 2c       	mov	r11, r1
    2456:	03 e0       	ldi	r16, 0x03	; 3
    2458:	10 e0       	ldi	r17, 0x00	; 0
    245a:	c1 2c       	mov	r12, r1
    245c:	d1 2c       	mov	r13, r1
    245e:	76 01       	movw	r14, r12
        return false;
    }
    offset++;

    while (offset + 1 < irparams.rawlen) {
    2460:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    2464:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    2468:	a8 16       	cp	r10, r24
    246a:	b9 06       	cpc	r11, r25
    246c:	e0 f5       	brcc	.+120    	; 0x24e6 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x114>
        if (!MATCH_SPACE(results->rawbuf[offset], SANYO_HDR_SPACE)) {
    246e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2470:	fc 85       	ldd	r31, Y+12	; 0x0c
    2472:	c8 01       	movw	r24, r16
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	e8 0f       	add	r30, r24
    247a:	f9 1f       	adc	r31, r25
    247c:	80 81       	ld	r24, Z
    247e:	91 81       	ldd	r25, Z+1	; 0x01
    2480:	66 eb       	ldi	r22, 0xB6	; 182
    2482:	73 e0       	ldi	r23, 0x03	; 3
    2484:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2488:	89 2b       	or	r24, r25
    248a:	69 f1       	breq	.+90     	; 0x24e6 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x114>
            break;
        }
        offset++;

        if (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK)) {
    248c:	45 01       	movw	r8, r10
    248e:	88 0c       	add	r8, r8
    2490:	99 1c       	adc	r9, r9
    2492:	eb 85       	ldd	r30, Y+11	; 0x0b
    2494:	fc 85       	ldd	r31, Y+12	; 0x0c
    2496:	e8 0d       	add	r30, r8
    2498:	f9 1d       	adc	r31, r9
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	60 e6       	ldi	r22, 0x60	; 96
    24a0:	79 e0       	ldi	r23, 0x09	; 9
    24a2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    24a6:	89 2b       	or	r24, r25
    24a8:	39 f0       	breq	.+14     	; 0x24b8 <_ZN6IRrecv11decodeSanyoEP14decode_results+0xe6>
            data = (data << 1) | 1;
    24aa:	cc 0c       	add	r12, r12
    24ac:	dd 1c       	adc	r13, r13
    24ae:	ee 1c       	adc	r14, r14
    24b0:	ff 1c       	adc	r15, r15
    24b2:	68 94       	set
    24b4:	c0 f8       	bld	r12, 0
    24b6:	11 c0       	rjmp	.+34     	; 0x24da <_ZN6IRrecv11decodeSanyoEP14decode_results+0x108>
        } else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK)) {
    24b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    24bc:	fc 01       	movw	r30, r24
    24be:	e8 0d       	add	r30, r8
    24c0:	f9 1d       	adc	r31, r9
    24c2:	80 81       	ld	r24, Z
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	6c eb       	ldi	r22, 0xBC	; 188
    24c8:	72 e0       	ldi	r23, 0x02	; 2
    24ca:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    24ce:	89 2b       	or	r24, r25
    24d0:	a9 f0       	breq	.+42     	; 0x24fc <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12a>
            data = (data << 1) | 0;
    24d2:	cc 0c       	add	r12, r12
    24d4:	dd 1c       	adc	r13, r13
    24d6:	ee 1c       	adc	r14, r14
    24d8:	ff 1c       	adc	r15, r15
        } else {
            return false;
        }
        offset++;
    24da:	0e 5f       	subi	r16, 0xFE	; 254
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	82 e0       	ldi	r24, 0x02	; 2
    24e0:	a8 0e       	add	r10, r24
    24e2:	b1 1c       	adc	r11, r1
    if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
        return false;
    }
    offset++;

    while (offset + 1 < irparams.rawlen) {
    24e4:	bd cf       	rjmp	.-134    	; 0x2460 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x8e>
        }
        offset++;
    }

    // Success
    results->bits = (offset - 1) / 2;
    24e6:	01 50       	subi	r16, 0x01	; 1
    24e8:	11 09       	sbc	r17, r1
    24ea:	16 95       	lsr	r17
    24ec:	07 95       	ror	r16
    24ee:	1a 87       	std	Y+10, r17	; 0x0a
    24f0:	09 87       	std	Y+9, r16	; 0x09
    if (results->bits < 12) {
    24f2:	0c 30       	cpi	r16, 0x0C	; 12
    24f4:	11 05       	cpc	r17, r1
    24f6:	20 f4       	brcc	.+8      	; 0x2500 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12e>
        results->bits = 0;
    24f8:	1a 86       	std	Y+10, r1	; 0x0a
    24fa:	19 86       	std	Y+9, r1	; 0x09
        return false;
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <_ZN6IRrecv11decodeSanyoEP14decode_results+0x13c>
    }

    results->value = data;
    2500:	cb 82       	std	Y+3, r12	; 0x03
    2502:	dc 82       	std	Y+4, r13	; 0x04
    2504:	ed 82       	std	Y+5, r14	; 0x05
    2506:	fe 82       	std	Y+6, r15	; 0x06
    results->decode_type = SANYO;
    2508:	8b e0       	ldi	r24, 0x0B	; 11
    250a:	88 83       	st	Y, r24
    return true;
    250c:	81 e0       	ldi	r24, 0x01	; 1
}
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	ff 90       	pop	r15
    2518:	ef 90       	pop	r14
    251a:	df 90       	pop	r13
    251c:	cf 90       	pop	r12
    251e:	bf 90       	pop	r11
    2520:	af 90       	pop	r10
    2522:	9f 90       	pop	r9
    2524:	8f 90       	pop	r8
    2526:	08 95       	ret

00002528 <_ZN6IRrecv11decodeSharpEP14decode_results>:
// Sharp decode function written based on Sharp protocol documentation:
//   http://www.sbprojects.com/knowledge/ir/sharp.htm
// Tesded on a DENON AVR-1804 reciever

#if DECODE_SHARP
bool IRrecv::decodeSharp(decode_results *results) {
    2528:	2f 92       	push	r2
    252a:	3f 92       	push	r3
    252c:	4f 92       	push	r4
    252e:	5f 92       	push	r5
    2530:	6f 92       	push	r6
    2532:	7f 92       	push	r7
    2534:	8f 92       	push	r8
    2536:	9f 92       	push	r9
    2538:	af 92       	push	r10
    253a:	bf 92       	push	r11
    253c:	cf 92       	push	r12
    253e:	df 92       	push	r13
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	2a 97       	sbiw	r28, 0x0a	; 10
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
    int loops = 1; //number of bursts

    // Check we have the right amount of data
    // Either one burst or three where second is inverted
    // The setting #define _GAP 5000 in IRremoteInt.h will give one burst and possibly three calls to this function
    if (irparams.rawlen == (SHARP_BITS + 1) * 2)
    255c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    2560:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    2564:	80 97       	sbiw	r24, 0x20	; 32
    2566:	49 f0       	breq	.+18     	; 0x257a <_ZN6IRrecv11decodeSharpEP14decode_results+0x52>
        loops = 1;
    else if (irparams.rawlen == (SHARP_BITS + 1) * 2 * 3)
    2568:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    256c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    2570:	80 36       	cpi	r24, 0x60	; 96
    2572:	91 05       	cpc	r25, r1
    2574:	39 f0       	breq	.+14     	; 0x2584 <_ZN6IRrecv11decodeSharpEP14decode_results+0x5c>
        loops = 3;
    else
        return false;
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	27 c1       	rjmp	.+590    	; 0x27c8 <_ZN6IRrecv11decodeSharpEP14decode_results+0x2a0>

    // Check we have the right amount of data
    // Either one burst or three where second is inverted
    // The setting #define _GAP 5000 in IRremoteInt.h will give one burst and possibly three calls to this function
    if (irparams.rawlen == (SHARP_BITS + 1) * 2)
        loops = 1;
    257a:	21 e0       	ldi	r18, 0x01	; 1
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	3e 83       	std	Y+6, r19	; 0x06
    2580:	2d 83       	std	Y+5, r18	; 0x05
    2582:	04 c0       	rjmp	.+8      	; 0x258c <_ZN6IRrecv11decodeSharpEP14decode_results+0x64>
    else if (irparams.rawlen == (SHARP_BITS + 1) * 2 * 3)
        loops = 3;
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	7a 87       	std	Y+10, r23	; 0x0a
    258e:	69 87       	std	Y+9, r22	; 0x09
    else
        return false;

    // Check the first mark to see if it fits the SHARP_BIT_MARK_RECV length
    if (!MATCH_MARK(results->rawbuf[offset], SHARP_BIT_MARK_RECV))
    2590:	db 01       	movw	r26, r22
    2592:	1b 96       	adiw	r26, 0x0b	; 11
    2594:	ed 91       	ld	r30, X+
    2596:	fc 91       	ld	r31, X
    2598:	1c 97       	sbiw	r26, 0x0c	; 12
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	66 e9       	ldi	r22, 0x96	; 150
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    25a6:	89 2b       	or	r24, r25
    25a8:	31 f3       	breq	.-52     	; 0x2576 <_ZN6IRrecv11decodeSharpEP14decode_results+0x4e>
        return false;
    //check the first pause and see if it fits the SHARP_ONE_SPACE or SHARP_ZERO_SPACE length
    if (!(MATCH_SPACE(results->rawbuf[offset + 1], SHARP_ONE_SPACE) || MATCH_SPACE(results->rawbuf[offset + 1], SHARP_ZERO_SPACE)))
    25aa:	a9 85       	ldd	r26, Y+9	; 0x09
    25ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    25ae:	1b 96       	adiw	r26, 0x0b	; 11
    25b0:	ed 91       	ld	r30, X+
    25b2:	fc 91       	ld	r31, X
    25b4:	1c 97       	sbiw	r26, 0x0c	; 12
    25b6:	84 81       	ldd	r24, Z+4	; 0x04
    25b8:	95 81       	ldd	r25, Z+5	; 0x05
    25ba:	6d e0       	ldi	r22, 0x0D	; 13
    25bc:	77 e0       	ldi	r23, 0x07	; 7
    25be:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    25c2:	89 2b       	or	r24, r25
    25c4:	71 f4       	brne	.+28     	; 0x25e2 <_ZN6IRrecv11decodeSharpEP14decode_results+0xba>
    25c6:	a9 85       	ldd	r26, Y+9	; 0x09
    25c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    25ca:	1b 96       	adiw	r26, 0x0b	; 11
    25cc:	ed 91       	ld	r30, X+
    25ce:	fc 91       	ld	r31, X
    25d0:	1c 97       	sbiw	r26, 0x0c	; 12
    25d2:	84 81       	ldd	r24, Z+4	; 0x04
    25d4:	95 81       	ldd	r25, Z+5	; 0x05
    25d6:	6b e1       	ldi	r22, 0x1B	; 27
    25d8:	73 e0       	ldi	r23, 0x03	; 3
    25da:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    25de:	89 2b       	or	r24, r25
    25e0:	51 f2       	breq	.-108    	; 0x2576 <_ZN6IRrecv11decodeSharpEP14decode_results+0x4e>
    // Either one burst or three where second is inverted
    // The setting #define _GAP 5000 in IRremoteInt.h will give one burst and possibly three calls to this function
    if (irparams.rawlen == (SHARP_BITS + 1) * 2)
        loops = 1;
    else if (irparams.rawlen == (SHARP_BITS + 1) * 2 * 3)
        loops = 3;
    25e2:	1c 82       	std	Y+4, r1	; 0x04
    25e4:	1b 82       	std	Y+3, r1	; 0x03
    25e6:	01 e0       	ldi	r16, 0x01	; 1
    25e8:	10 e0       	ldi	r17, 0x00	; 0
    25ea:	81 2c       	mov	r8, r1
    25ec:	91 2c       	mov	r9, r1
    25ee:	54 01       	movw	r10, r8
    25f0:	68 01       	movw	r12, r16
    25f2:	cc 0c       	add	r12, r12
    25f4:	dd 1c       	adc	r13, r13
    25f6:	e1 2c       	mov	r14, r1
    25f8:	f1 2c       	mov	r15, r1
    25fa:	41 2c       	mov	r4, r1
    25fc:	51 2c       	mov	r5, r1
    25fe:	32 01       	movw	r6, r4
        data = 0;
        addr = 0;
        for (int i = 0; i < SHARP_ADDR_BITS; i++) {
            // Each bit looks like: SHARP_BIT_MARK_RECV + SHARP_ONE_SPACE -> 1
            //                 or : SHARP_BIT_MARK_RECV + SHARP_ZERO_SPACE -> 0
            if (!MATCH_MARK(results->rawbuf[offset++], SHARP_BIT_MARK_RECV))
    2600:	a9 85       	ldd	r26, Y+9	; 0x09
    2602:	ba 85       	ldd	r27, Y+10	; 0x0a
    2604:	1b 96       	adiw	r26, 0x0b	; 11
    2606:	ed 91       	ld	r30, X+
    2608:	fc 91       	ld	r31, X
    260a:	1c 97       	sbiw	r26, 0x0c	; 12
    260c:	ec 0d       	add	r30, r12
    260e:	fd 1d       	adc	r31, r13
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	66 e9       	ldi	r22, 0x96	; 150
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    261c:	89 2b       	or	r24, r25
    261e:	09 f4       	brne	.+2      	; 0x2622 <_ZN6IRrecv11decodeSharpEP14decode_results+0xfa>
    2620:	aa cf       	rjmp	.-172    	; 0x2576 <_ZN6IRrecv11decodeSharpEP14decode_results+0x4e>
                return false;
            // IR data is big-endian, so we shuffle it in from the right:
            if (MATCH_SPACE(results->rawbuf[offset], SHARP_ONE_SPACE))
    2622:	16 01       	movw	r2, r12
    2624:	b2 e0       	ldi	r27, 0x02	; 2
    2626:	2b 0e       	add	r2, r27
    2628:	31 1c       	adc	r3, r1
    262a:	a9 85       	ldd	r26, Y+9	; 0x09
    262c:	ba 85       	ldd	r27, Y+10	; 0x0a
    262e:	1b 96       	adiw	r26, 0x0b	; 11
    2630:	ed 91       	ld	r30, X+
    2632:	fc 91       	ld	r31, X
    2634:	1c 97       	sbiw	r26, 0x0c	; 12
    2636:	e2 0d       	add	r30, r2
    2638:	f3 1d       	adc	r31, r3
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	6d e0       	ldi	r22, 0x0D	; 13
    2640:	77 e0       	ldi	r23, 0x07	; 7
    2642:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2646:	89 2b       	or	r24, r25
    2648:	89 f0       	breq	.+34     	; 0x266c <_ZN6IRrecv11decodeSharpEP14decode_results+0x144>
                addr += 1 << i;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0e 2c       	mov	r0, r14
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <_ZN6IRrecv11decodeSharpEP14decode_results+0x12e>
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	0a 94       	dec	r0
    2658:	e2 f7       	brpl	.-8      	; 0x2652 <_ZN6IRrecv11decodeSharpEP14decode_results+0x12a>
    265a:	09 2e       	mov	r0, r25
    265c:	00 0c       	add	r0, r0
    265e:	aa 0b       	sbc	r26, r26
    2660:	bb 0b       	sbc	r27, r27
    2662:	48 0e       	add	r4, r24
    2664:	59 1e       	adc	r5, r25
    2666:	6a 1e       	adc	r6, r26
    2668:	7b 1e       	adc	r7, r27
    266a:	10 c0       	rjmp	.+32     	; 0x268c <_ZN6IRrecv11decodeSharpEP14decode_results+0x164>
            else if (MATCH_SPACE(results->rawbuf[offset], SHARP_ZERO_SPACE))
    266c:	e9 85       	ldd	r30, Y+9	; 0x09
    266e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2670:	83 85       	ldd	r24, Z+11	; 0x0b
    2672:	94 85       	ldd	r25, Z+12	; 0x0c
    2674:	fc 01       	movw	r30, r24
    2676:	e2 0d       	add	r30, r2
    2678:	f3 1d       	adc	r31, r3
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	6b e1       	ldi	r22, 0x1B	; 27
    2680:	73 e0       	ldi	r23, 0x03	; 3
    2682:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2686:	89 2b       	or	r24, r25
    2688:	09 f4       	brne	.+2      	; 0x268c <_ZN6IRrecv11decodeSharpEP14decode_results+0x164>
    268a:	75 cf       	rjmp	.-278    	; 0x2576 <_ZN6IRrecv11decodeSharpEP14decode_results+0x4e>
                addr = addr;
            else
                return false;
            offset++;
    268c:	0e 5f       	subi	r16, 0xFE	; 254
    268e:	1f 4f       	sbci	r17, 0xFF	; 255

    // Read the bits in
    for (int j = 0; j < loops; j++) {
        data = 0;
        addr = 0;
        for (int i = 0; i < SHARP_ADDR_BITS; i++) {
    2690:	ff ef       	ldi	r31, 0xFF	; 255
    2692:	ef 1a       	sub	r14, r31
    2694:	ff 0a       	sbc	r15, r31
    2696:	24 e0       	ldi	r18, 0x04	; 4
    2698:	c2 0e       	add	r12, r18
    269a:	d1 1c       	adc	r13, r1
    269c:	35 e0       	ldi	r19, 0x05	; 5
    269e:	e3 16       	cp	r14, r19
    26a0:	f1 04       	cpc	r15, r1
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <_ZN6IRrecv11decodeSharpEP14decode_results+0x17e>
    26a4:	ad cf       	rjmp	.-166    	; 0x2600 <_ZN6IRrecv11decodeSharpEP14decode_results+0xd8>
    26a6:	18 01       	movw	r2, r16
    26a8:	22 0c       	add	r2, r2
    26aa:	33 1c       	adc	r3, r3
    26ac:	1a 82       	std	Y+2, r1	; 0x02
    26ae:	19 82       	std	Y+1, r1	; 0x01
    26b0:	c1 2c       	mov	r12, r1
    26b2:	d1 2c       	mov	r13, r1
    26b4:	76 01       	movw	r14, r12
            offset++;
        }
        for (int i = 0; i < SHARP_DATA_BITS; i++) {
            // Each bit looks like: SHARP_BIT_MARK_RECV + SHARP_ONE_SPACE -> 1
            //                 or : SHARP_BIT_MARK_RECV + SHARP_ZERO_SPACE -> 0
            if (!MATCH_MARK(results->rawbuf[offset++], SHARP_BIT_MARK_RECV))
    26b6:	a9 85       	ldd	r26, Y+9	; 0x09
    26b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    26ba:	1b 96       	adiw	r26, 0x0b	; 11
    26bc:	ed 91       	ld	r30, X+
    26be:	fc 91       	ld	r31, X
    26c0:	1c 97       	sbiw	r26, 0x0c	; 12
    26c2:	e2 0d       	add	r30, r2
    26c4:	f3 1d       	adc	r31, r3
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	66 e9       	ldi	r22, 0x96	; 150
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    26d2:	89 2b       	or	r24, r25
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <_ZN6IRrecv11decodeSharpEP14decode_results+0x1b0>
    26d6:	4f cf       	rjmp	.-354    	; 0x2576 <_ZN6IRrecv11decodeSharpEP14decode_results+0x4e>
                return false;
            // IR data is big-endian, so we shuffle it in from the right:
            if (MATCH_SPACE(results->rawbuf[offset], SHARP_ONE_SPACE))
    26d8:	f1 01       	movw	r30, r2
    26da:	32 96       	adiw	r30, 0x02	; 2
    26dc:	f8 87       	std	Y+8, r31	; 0x08
    26de:	ef 83       	std	Y+7, r30	; 0x07
    26e0:	a9 85       	ldd	r26, Y+9	; 0x09
    26e2:	ba 85       	ldd	r27, Y+10	; 0x0a
    26e4:	1b 96       	adiw	r26, 0x0b	; 11
    26e6:	ed 91       	ld	r30, X+
    26e8:	fc 91       	ld	r31, X
    26ea:	1c 97       	sbiw	r26, 0x0c	; 12
    26ec:	2f 81       	ldd	r18, Y+7	; 0x07
    26ee:	38 85       	ldd	r19, Y+8	; 0x08
    26f0:	e2 0f       	add	r30, r18
    26f2:	f3 1f       	adc	r31, r19
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	6d e0       	ldi	r22, 0x0D	; 13
    26fa:	77 e0       	ldi	r23, 0x07	; 7
    26fc:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2700:	89 2b       	or	r24, r25
    2702:	89 f0       	breq	.+34     	; 0x2726 <_ZN6IRrecv11decodeSharpEP14decode_results+0x1fe>
                data += 1 << i;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	09 80       	ldd	r0, Y+1	; 0x01
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <_ZN6IRrecv11decodeSharpEP14decode_results+0x1e8>
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	0a 94       	dec	r0
    2712:	e2 f7       	brpl	.-8      	; 0x270c <_ZN6IRrecv11decodeSharpEP14decode_results+0x1e4>
    2714:	09 2e       	mov	r0, r25
    2716:	00 0c       	add	r0, r0
    2718:	aa 0b       	sbc	r26, r26
    271a:	bb 0b       	sbc	r27, r27
    271c:	c8 0e       	add	r12, r24
    271e:	d9 1e       	adc	r13, r25
    2720:	ea 1e       	adc	r14, r26
    2722:	fb 1e       	adc	r15, r27
    2724:	13 c0       	rjmp	.+38     	; 0x274c <_ZN6IRrecv11decodeSharpEP14decode_results+0x224>
            else if (MATCH_SPACE(results->rawbuf[offset], SHARP_ZERO_SPACE))
    2726:	a9 85       	ldd	r26, Y+9	; 0x09
    2728:	ba 85       	ldd	r27, Y+10	; 0x0a
    272a:	1b 96       	adiw	r26, 0x0b	; 11
    272c:	ed 91       	ld	r30, X+
    272e:	fc 91       	ld	r31, X
    2730:	1c 97       	sbiw	r26, 0x0c	; 12
    2732:	2f 81       	ldd	r18, Y+7	; 0x07
    2734:	38 85       	ldd	r19, Y+8	; 0x08
    2736:	e2 0f       	add	r30, r18
    2738:	f3 1f       	adc	r31, r19
    273a:	80 81       	ld	r24, Z
    273c:	91 81       	ldd	r25, Z+1	; 0x01
    273e:	6b e1       	ldi	r22, 0x1B	; 27
    2740:	73 e0       	ldi	r23, 0x03	; 3
    2742:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2746:	89 2b       	or	r24, r25
    2748:	09 f4       	brne	.+2      	; 0x274c <_ZN6IRrecv11decodeSharpEP14decode_results+0x224>
    274a:	15 cf       	rjmp	.-470    	; 0x2576 <_ZN6IRrecv11decodeSharpEP14decode_results+0x4e>
                data = data;
            else
                return false;
            offset++;
    274c:	c8 01       	movw	r24, r16
    274e:	02 96       	adiw	r24, 0x02	; 2
                addr = addr;
            else
                return false;
            offset++;
        }
        for (int i = 0; i < SHARP_DATA_BITS; i++) {
    2750:	a9 81       	ldd	r26, Y+1	; 0x01
    2752:	ba 81       	ldd	r27, Y+2	; 0x02
    2754:	11 96       	adiw	r26, 0x01	; 1
    2756:	ba 83       	std	Y+2, r27	; 0x02
    2758:	a9 83       	std	Y+1, r26	; 0x01
    275a:	b4 e0       	ldi	r27, 0x04	; 4
    275c:	2b 0e       	add	r2, r27
    275e:	31 1c       	adc	r3, r1
    2760:	e9 81       	ldd	r30, Y+1	; 0x01
    2762:	fa 81       	ldd	r31, Y+2	; 0x02
    2764:	38 97       	sbiw	r30, 0x08	; 8
    2766:	11 f0       	breq	.+4      	; 0x276c <_ZN6IRrecv11decodeSharpEP14decode_results+0x244>
                data += 1 << i;
            else if (MATCH_SPACE(results->rawbuf[offset], SHARP_ZERO_SPACE))
                data = data;
            else
                return false;
            offset++;
    2768:	8c 01       	movw	r16, r24
    276a:	a5 cf       	rjmp	.-182    	; 0x26b6 <_ZN6IRrecv11decodeSharpEP14decode_results+0x18e>
            //Serial.print(i);
            //Serial.print(":");
            //Serial.println(data, HEX);
        }
        //skip exp bit (mark+pause), chk bit (mark+pause), mark and long pause before next burst
        offset += 6;
    276c:	08 5f       	subi	r16, 0xF8	; 248
    276e:	1f 4f       	sbci	r17, 0xFF	; 255

        //Check if last burst data is equal to this burst (lastData already inverted)
        if (lastData != 0 && data != lastData)
    2770:	81 14       	cp	r8, r1
    2772:	91 04       	cpc	r9, r1
    2774:	a1 04       	cpc	r10, r1
    2776:	b1 04       	cpc	r11, r1
    2778:	31 f0       	breq	.+12     	; 0x2786 <_ZN6IRrecv11decodeSharpEP14decode_results+0x25e>
    277a:	c8 14       	cp	r12, r8
    277c:	d9 04       	cpc	r13, r9
    277e:	ea 04       	cpc	r14, r10
    2780:	fb 04       	cpc	r15, r11
    2782:	09 f0       	breq	.+2      	; 0x2786 <_ZN6IRrecv11decodeSharpEP14decode_results+0x25e>
    2784:	f8 ce       	rjmp	.-528    	; 0x2576 <_ZN6IRrecv11decodeSharpEP14decode_results+0x4e>
            return false;
        //save current burst of data but invert (XOR) the last 10 bits (8 data bits + exp bit + chk bit)
        lastData = data ^ 0xFF;
    2786:	46 01       	movw	r8, r12
    2788:	57 01       	movw	r10, r14
    278a:	80 94       	com	r8
    //check the first pause and see if it fits the SHARP_ONE_SPACE or SHARP_ZERO_SPACE length
    if (!(MATCH_SPACE(results->rawbuf[offset + 1], SHARP_ONE_SPACE) || MATCH_SPACE(results->rawbuf[offset + 1], SHARP_ZERO_SPACE)))
        return false;

    // Read the bits in
    for (int j = 0; j < loops; j++) {
    278c:	2b 81       	ldd	r18, Y+3	; 0x03
    278e:	3c 81       	ldd	r19, Y+4	; 0x04
    2790:	2f 5f       	subi	r18, 0xFF	; 255
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	3c 83       	std	Y+4, r19	; 0x04
    2796:	2b 83       	std	Y+3, r18	; 0x03
    2798:	8d 81       	ldd	r24, Y+5	; 0x05
    279a:	9e 81       	ldd	r25, Y+6	; 0x06
    279c:	82 17       	cp	r24, r18
    279e:	93 07       	cpc	r25, r19
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <_ZN6IRrecv11decodeSharpEP14decode_results+0x27c>
    27a2:	26 cf       	rjmp	.-436    	; 0x25f0 <_ZN6IRrecv11decodeSharpEP14decode_results+0xc8>
        //save current burst of data but invert (XOR) the last 10 bits (8 data bits + exp bit + chk bit)
        lastData = data ^ 0xFF;
    }

    // Success
    results->bits = SHARP_BITS;
    27a4:	8f e0       	ldi	r24, 0x0F	; 15
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a9 85       	ldd	r26, Y+9	; 0x09
    27aa:	ba 85       	ldd	r27, Y+10	; 0x0a
    27ac:	1a 96       	adiw	r26, 0x0a	; 10
    27ae:	9c 93       	st	X, r25
    27b0:	8e 93       	st	-X, r24
    27b2:	19 97       	sbiw	r26, 0x09	; 9
    results->value = data;
    27b4:	fd 01       	movw	r30, r26
    27b6:	c3 82       	std	Z+3, r12	; 0x03
    27b8:	d4 82       	std	Z+4, r13	; 0x04
    27ba:	e5 82       	std	Z+5, r14	; 0x05
    27bc:	f6 82       	std	Z+6, r15	; 0x06
    results->address = addr;
    27be:	52 82       	std	Z+2, r5	; 0x02
    27c0:	41 82       	std	Z+1, r4	; 0x01
    results->decode_type = SHARP;
    27c2:	8e e0       	ldi	r24, 0x0E	; 14
    27c4:	80 83       	st	Z, r24
    return true;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
}
    27c8:	2a 96       	adiw	r28, 0x0a	; 10
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	ff 90       	pop	r15
    27de:	ef 90       	pop	r14
    27e0:	df 90       	pop	r13
    27e2:	cf 90       	pop	r12
    27e4:	bf 90       	pop	r11
    27e6:	af 90       	pop	r10
    27e8:	9f 90       	pop	r9
    27ea:	8f 90       	pop	r8
    27ec:	7f 90       	pop	r7
    27ee:	6f 90       	pop	r6
    27f0:	5f 90       	pop	r5
    27f2:	4f 90       	pop	r4
    27f4:	3f 90       	pop	r3
    27f6:	2f 90       	pop	r2
    27f8:	08 95       	ret

000027fa <_ZN6IRrecv14decodeSharpAltEP14decode_results>:
}
#endif

//+=============================================================================
#if DECODE_SHARP_ALT
bool IRrecv::decodeSharpAlt(decode_results *results) {
    27fa:	ef 92       	push	r14
    27fc:	ff 92       	push	r15
    27fe:	0f 93       	push	r16
    2800:	1f 93       	push	r17
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29

    // Check we have enough data.
    if (irparams.rawlen < (SHARP_ALT_RAWLEN))
    2806:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    280a:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    280e:	80 97       	sbiw	r24, 0x20	; 32
    2810:	a8 f1       	brcs	.+106    	; 0x287c <_ZN6IRrecv14decodeSharpAltEP14decode_results+0x82>
    2812:	eb 01       	movw	r28, r22
        return false;

    // Check stop mark.
    if (!MATCH_MARK(results->rawbuf[SHARP_ALT_RAWLEN - 1], SHARP_ALT_BIT_MARK))
    2814:	eb 85       	ldd	r30, Y+11	; 0x0b
    2816:	fc 85       	ldd	r31, Y+12	; 0x0c
    2818:	86 ad       	ldd	r24, Z+62	; 0x3e
    281a:	97 ad       	ldd	r25, Z+63	; 0x3f
    281c:	66 e9       	ldi	r22, 0x96	; 150
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    2824:	89 2b       	or	r24, r25
    2826:	51 f1       	breq	.+84     	; 0x287c <_ZN6IRrecv14decodeSharpAltEP14decode_results+0x82>
        return false;

    // Check the "check bit." If this bit is not 0 than it is an inverted
    // frame, which we ignore.
    if (!MATCH_SPACE(results->rawbuf[SHARP_ALT_RAWLEN - 2], SHARP_ALT_ZERO_SPACE))
    2828:	eb 85       	ldd	r30, Y+11	; 0x0b
    282a:	fc 85       	ldd	r31, Y+12	; 0x0c
    282c:	84 ad       	ldd	r24, Z+60	; 0x3c
    282e:	95 ad       	ldd	r25, Z+61	; 0x3d
    2830:	6c eb       	ldi	r22, 0xBC	; 188
    2832:	72 e0       	ldi	r23, 0x02	; 2
    2834:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2838:	89 2b       	or	r24, r25
    283a:	01 f1       	breq	.+64     	; 0x287c <_ZN6IRrecv14decodeSharpAltEP14decode_results+0x82>
        return false;

    // Check for repeat.
    static boolean is_first_repeat = true;
    long initial_space = ((long) results->rawbuf[0]) * MICROS_PER_TICK;
    283c:	eb 85       	ldd	r30, Y+11	; 0x0b
    283e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2840:	20 81       	ld	r18, Z
    2842:	31 81       	ldd	r19, Z+1	; 0x01
    if (initial_space <= SHARP_ALT_RPT_SPACE) {
    2844:	a2 e3       	ldi	r26, 0x32	; 50
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__umulhisi3>
    284c:	61 35       	cpi	r22, 0x51	; 81
    284e:	73 4c       	sbci	r23, 0xC3	; 195
    2850:	81 05       	cpc	r24, r1
    2852:	91 05       	cpc	r25, r1
    2854:	ac f4       	brge	.+42     	; 0x2880 <_ZN6IRrecv14decodeSharpAltEP14decode_results+0x86>
        if (!is_first_repeat) {
    2856:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_ZZN6IRrecv14decodeSharpAltEP14decode_resultsE15is_first_repeat>
    285a:	81 11       	cpse	r24, r1
    285c:	0d c0       	rjmp	.+26     	; 0x2878 <_ZN6IRrecv14decodeSharpAltEP14decode_results+0x7e>
            results->bits = 0;
    285e:	1a 86       	std	Y+10, r1	; 0x0a
    2860:	19 86       	std	Y+9, r1	; 0x09
            results->value = REPEAT;
    2862:	8f ef       	ldi	r24, 0xFF	; 255
    2864:	9f ef       	ldi	r25, 0xFF	; 255
    2866:	dc 01       	movw	r26, r24
    2868:	8b 83       	std	Y+3, r24	; 0x03
    286a:	9c 83       	std	Y+4, r25	; 0x04
    286c:	ad 83       	std	Y+5, r26	; 0x05
    286e:	be 83       	std	Y+6, r27	; 0x06
            results->decode_type = SHARP;
    2870:	8e e0       	ldi	r24, 0x0E	; 14
    2872:	88 83       	st	Y, r24
            return true;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	46 c0       	rjmp	.+140    	; 0x2904 <_ZN6IRrecv14decodeSharpAltEP14decode_results+0x10a>
        } else {

            // Ignore the first repeat that always comes after the
            // inverted frame (even if the button was pressed only
            // once).
            is_first_repeat = false;
    2878:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_ZZN6IRrecv14decodeSharpAltEP14decode_resultsE15is_first_repeat>
            return false;
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	42 c0       	rjmp	.+132    	; 0x2904 <_ZN6IRrecv14decodeSharpAltEP14decode_results+0x10a>
    2880:	54 e3       	ldi	r21, 0x34	; 52
    2882:	e5 2e       	mov	r14, r21
    2884:	f1 2c       	mov	r15, r1
    2886:	00 e0       	ldi	r16, 0x00	; 0
    2888:	10 e0       	ldi	r17, 0x00	; 0
    // Decode bits. SHARP_ALT_RAWLEN-6 because index starts with 0 (-1) and we
    // omit the timings for the stop mark (-1), the check bit (-2), and the
    // expansion bit (-2).
    uint16_t bits = 0;
    for (int i = SHARP_ALT_RAWLEN - 6; i > 1; i -= 2) {
        if (MATCH_SPACE(results->rawbuf[i], SHARP_ALT_ONE_SPACE)) {
    288a:	eb 85       	ldd	r30, Y+11	; 0x0b
    288c:	fc 85       	ldd	r31, Y+12	; 0x0c
    288e:	ee 0d       	add	r30, r14
    2890:	ff 1d       	adc	r31, r15
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	66 ed       	ldi	r22, 0xD6	; 214
    2898:	76 e0       	ldi	r23, 0x06	; 6
    289a:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    289e:	89 2b       	or	r24, r25
    28a0:	21 f0       	breq	.+8      	; 0x28aa <_ZN6IRrecv14decodeSharpAltEP14decode_results+0xb0>
            bits = (bits << 1) | 1;
    28a2:	00 0f       	add	r16, r16
    28a4:	11 1f       	adc	r17, r17
    28a6:	01 60       	ori	r16, 0x01	; 1
    28a8:	0e c0       	rjmp	.+28     	; 0x28c6 <_ZN6IRrecv14decodeSharpAltEP14decode_results+0xcc>
        } else if (MATCH_SPACE(results->rawbuf[i], SHARP_ALT_ZERO_SPACE)) {
    28aa:	eb 85       	ldd	r30, Y+11	; 0x0b
    28ac:	fc 85       	ldd	r31, Y+12	; 0x0c
    28ae:	ee 0d       	add	r30, r14
    28b0:	ff 1d       	adc	r31, r15
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	6c eb       	ldi	r22, 0xBC	; 188
    28b8:	72 e0       	ldi	r23, 0x02	; 2
    28ba:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    28be:	89 2b       	or	r24, r25
    28c0:	e9 f2       	breq	.-70     	; 0x287c <_ZN6IRrecv14decodeSharpAltEP14decode_results+0x82>
            bits = (bits << 1) | 0;
    28c2:	00 0f       	add	r16, r16
    28c4:	11 1f       	adc	r17, r17
    28c6:	84 e0       	ldi	r24, 0x04	; 4
    28c8:	e8 1a       	sub	r14, r24
    28ca:	f1 08       	sbc	r15, r1

    // Decode bits. SHARP_ALT_RAWLEN-6 because index starts with 0 (-1) and we
    // omit the timings for the stop mark (-1), the check bit (-2), and the
    // expansion bit (-2).
    uint16_t bits = 0;
    for (int i = SHARP_ALT_RAWLEN - 6; i > 1; i -= 2) {
    28cc:	f1 f6       	brne	.-68     	; 0x288a <_ZN6IRrecv14decodeSharpAltEP14decode_results+0x90>
        } else {
            return false;
        }
    }

    results->bits = SHARP_ALT_ADDRESS_BITS + SHARP_ALT_COMMAND_BITS;
    28ce:	8d e0       	ldi	r24, 0x0D	; 13
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9a 87       	std	Y+10, r25	; 0x0a
    28d4:	89 87       	std	Y+9, r24	; 0x09
    results->address = (bits & (1 << (SHARP_ALT_ADDRESS_BITS))) - 1;
    28d6:	c8 01       	movw	r24, r16
    28d8:	80 72       	andi	r24, 0x20	; 32
    28da:	99 27       	eor	r25, r25
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	89 83       	std	Y+1, r24	; 0x01
    results->value = bits >> SHARP_ALT_ADDRESS_BITS;	// command
    28e2:	c8 01       	movw	r24, r16
    28e4:	25 e0       	ldi	r18, 0x05	; 5
    28e6:	96 95       	lsr	r25
    28e8:	87 95       	ror	r24
    28ea:	2a 95       	dec	r18
    28ec:	e1 f7       	brne	.-8      	; 0x28e6 <_ZN6IRrecv14decodeSharpAltEP14decode_results+0xec>
    28ee:	a0 e0       	ldi	r26, 0x00	; 0
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	9c 83       	std	Y+4, r25	; 0x04
    28f6:	ad 83       	std	Y+5, r26	; 0x05
    28f8:	be 83       	std	Y+6, r27	; 0x06
    results->decode_type = SHARP_ALT;
    28fa:	8f e0       	ldi	r24, 0x0F	; 15
    28fc:	88 83       	st	Y, r24
    is_first_repeat = true;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZZN6IRrecv14decodeSharpAltEP14decode_resultsE15is_first_repeat>
    return true;
}
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	ff 90       	pop	r15
    290e:	ef 90       	pop	r14
    2910:	08 95       	ret

00002912 <_ZN6IRrecv10decodeSonyEP14decode_results>:
}
#endif

//+=============================================================================
#if DECODE_SONY
bool IRrecv::decodeSony(decode_results *results) {
    2912:	8f 92       	push	r8
    2914:	9f 92       	push	r9
    2916:	af 92       	push	r10
    2918:	bf 92       	push	r11
    291a:	cf 92       	push	r12
    291c:	df 92       	push	r13
    291e:	ef 92       	push	r14
    2920:	ff 92       	push	r15
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	eb 01       	movw	r28, r22
    long data = 0;
    unsigned int offset = 0;  // Dont skip first space, check its size

    if (irparams.rawlen < (2 * SONY_BITS) + 2) {
    292c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    2930:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    2934:	4a 97       	sbiw	r24, 0x1a	; 26
    2936:	08 f4       	brcc	.+2      	; 0x293a <_ZN6IRrecv10decodeSonyEP14decode_results+0x28>
    2938:	77 c0       	rjmp	.+238    	; 0x2a28 <_ZN6IRrecv10decodeSonyEP14decode_results+0x116>
        return false;
    }

    // Some Sony's deliver repeats fast after first
    // unfortunately can't spot difference from of repeat from two fast clicks
    if (results->rawbuf[offset] * MICROS_PER_TICK < SONY_DOUBLE_SPACE_USECS) {
    293a:	eb 85       	ldd	r30, Y+11	; 0x0b
    293c:	fc 85       	ldd	r31, Y+12	; 0x0c
    293e:	20 81       	ld	r18, Z
    2940:	31 81       	ldd	r19, Z+1	; 0x01
    2942:	42 e3       	ldi	r20, 0x32	; 50
    2944:	42 9f       	mul	r20, r18
    2946:	c0 01       	movw	r24, r0
    2948:	43 9f       	mul	r20, r19
    294a:	90 0d       	add	r25, r0
    294c:	11 24       	eor	r1, r1
    294e:	84 3f       	cpi	r24, 0xF4	; 244
    2950:	91 40       	sbci	r25, 0x01	; 1
    2952:	58 f4       	brcc	.+22     	; 0x296a <_ZN6IRrecv10decodeSonyEP14decode_results+0x58>
        // Serial.print("IR Gap found: ");
        results->bits = 0;
    2954:	1a 86       	std	Y+10, r1	; 0x0a
    2956:	19 86       	std	Y+9, r1	; 0x09
        results->value = REPEAT;
    2958:	8f ef       	ldi	r24, 0xFF	; 255
    295a:	9f ef       	ldi	r25, 0xFF	; 255
    295c:	dc 01       	movw	r26, r24
    295e:	8b 83       	std	Y+3, r24	; 0x03
    2960:	9c 83       	std	Y+4, r25	; 0x04
    2962:	ad 83       	std	Y+5, r26	; 0x05
    2964:	be 83       	std	Y+6, r27	; 0x06

#  ifdef DECODE_SANYO
        results->decode_type = SANYO;
    2966:	8b e0       	ldi	r24, 0x0B	; 11
    2968:	66 c0       	rjmp	.+204    	; 0x2a36 <_ZN6IRrecv10decodeSonyEP14decode_results+0x124>
        return true;
    }
    offset++;

    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	60 e6       	ldi	r22, 0x60	; 96
    2970:	79 e0       	ldi	r23, 0x09	; 9
    2972:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    2976:	89 2b       	or	r24, r25
    2978:	09 f4       	brne	.+2      	; 0x297c <_ZN6IRrecv10decodeSonyEP14decode_results+0x6a>
    297a:	56 c0       	rjmp	.+172    	; 0x2a28 <_ZN6IRrecv10decodeSonyEP14decode_results+0x116>
    297c:	53 e0       	ldi	r21, 0x03	; 3
    297e:	a5 2e       	mov	r10, r21
    2980:	b1 2c       	mov	r11, r1
    2982:	02 e0       	ldi	r16, 0x02	; 2
    2984:	10 e0       	ldi	r17, 0x00	; 0
    2986:	c1 2c       	mov	r12, r1
    2988:	d1 2c       	mov	r13, r1
    298a:	76 01       	movw	r14, r12
        return false;
    }
    offset++;

    while (offset + 1 < irparams.rawlen) {
    298c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    2990:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    2994:	a8 16       	cp	r10, r24
    2996:	b9 06       	cpc	r11, r25
    2998:	e0 f5       	brcc	.+120    	; 0x2a12 <_ZN6IRrecv10decodeSonyEP14decode_results+0x100>
        if (!MATCH_SPACE(results->rawbuf[offset], SONY_HDR_SPACE)) {
    299a:	eb 85       	ldd	r30, Y+11	; 0x0b
    299c:	fc 85       	ldd	r31, Y+12	; 0x0c
    299e:	c8 01       	movw	r24, r16
    29a0:	88 0f       	add	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	e8 0f       	add	r30, r24
    29a6:	f9 1f       	adc	r31, r25
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	68 e5       	ldi	r22, 0x58	; 88
    29ae:	72 e0       	ldi	r23, 0x02	; 2
    29b0:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    29b4:	89 2b       	or	r24, r25
    29b6:	69 f1       	breq	.+90     	; 0x2a12 <_ZN6IRrecv10decodeSonyEP14decode_results+0x100>
            break;
        }
        offset++;

        if (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK)) {
    29b8:	45 01       	movw	r8, r10
    29ba:	88 0c       	add	r8, r8
    29bc:	99 1c       	adc	r9, r9
    29be:	eb 85       	ldd	r30, Y+11	; 0x0b
    29c0:	fc 85       	ldd	r31, Y+12	; 0x0c
    29c2:	e8 0d       	add	r30, r8
    29c4:	f9 1d       	adc	r31, r9
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	60 eb       	ldi	r22, 0xB0	; 176
    29cc:	74 e0       	ldi	r23, 0x04	; 4
    29ce:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    29d2:	89 2b       	or	r24, r25
    29d4:	39 f0       	breq	.+14     	; 0x29e4 <_ZN6IRrecv10decodeSonyEP14decode_results+0xd2>
            data = (data << 1) | 1;
    29d6:	cc 0c       	add	r12, r12
    29d8:	dd 1c       	adc	r13, r13
    29da:	ee 1c       	adc	r14, r14
    29dc:	ff 1c       	adc	r15, r15
    29de:	68 94       	set
    29e0:	c0 f8       	bld	r12, 0
    29e2:	11 c0       	rjmp	.+34     	; 0x2a06 <_ZN6IRrecv10decodeSonyEP14decode_results+0xf4>
        } else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK)) {
    29e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    29e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    29e8:	fc 01       	movw	r30, r24
    29ea:	e8 0d       	add	r30, r8
    29ec:	f9 1d       	adc	r31, r9
    29ee:	80 81       	ld	r24, Z
    29f0:	91 81       	ldd	r25, Z+1	; 0x01
    29f2:	68 e5       	ldi	r22, 0x58	; 88
    29f4:	72 e0       	ldi	r23, 0x02	; 2
    29f6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    29fa:	89 2b       	or	r24, r25
    29fc:	a9 f0       	breq	.+42     	; 0x2a28 <_ZN6IRrecv10decodeSonyEP14decode_results+0x116>
            data = (data << 1) | 0;
    29fe:	cc 0c       	add	r12, r12
    2a00:	dd 1c       	adc	r13, r13
    2a02:	ee 1c       	adc	r14, r14
    2a04:	ff 1c       	adc	r15, r15
        } else {
            return false;
        }
        offset++;
    2a06:	0e 5f       	subi	r16, 0xFE	; 254
    2a08:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	a8 0e       	add	r10, r24
    2a0e:	b1 1c       	adc	r11, r1
    if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
        return false;
    }
    offset++;

    while (offset + 1 < irparams.rawlen) {
    2a10:	bd cf       	rjmp	.-134    	; 0x298c <_ZN6IRrecv10decodeSonyEP14decode_results+0x7a>
        }
        offset++;
    }

    // Success
    results->bits = (offset - 1) / 2;
    2a12:	01 50       	subi	r16, 0x01	; 1
    2a14:	11 09       	sbc	r17, r1
    2a16:	16 95       	lsr	r17
    2a18:	07 95       	ror	r16
    2a1a:	1a 87       	std	Y+10, r17	; 0x0a
    2a1c:	09 87       	std	Y+9, r16	; 0x09
    if (results->bits < 12) {
    2a1e:	0c 30       	cpi	r16, 0x0C	; 12
    2a20:	11 05       	cpc	r17, r1
    2a22:	20 f4       	brcc	.+8      	; 0x2a2c <_ZN6IRrecv10decodeSonyEP14decode_results+0x11a>
        results->bits = 0;
    2a24:	1a 86       	std	Y+10, r1	; 0x0a
    2a26:	19 86       	std	Y+9, r1	; 0x09
        return false;
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	07 c0       	rjmp	.+14     	; 0x2a3a <_ZN6IRrecv10decodeSonyEP14decode_results+0x128>
    }
    results->value = data;
    2a2c:	cb 82       	std	Y+3, r12	; 0x03
    2a2e:	dc 82       	std	Y+4, r13	; 0x04
    2a30:	ed 82       	std	Y+5, r14	; 0x05
    2a32:	fe 82       	std	Y+6, r15	; 0x06
    results->decode_type = SONY;
    2a34:	84 e0       	ldi	r24, 0x04	; 4
    2a36:	88 83       	st	Y, r24
    return true;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
}
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	1f 91       	pop	r17
    2a40:	0f 91       	pop	r16
    2a42:	ff 90       	pop	r15
    2a44:	ef 90       	pop	r14
    2a46:	df 90       	pop	r13
    2a48:	cf 90       	pop	r12
    2a4a:	bf 90       	pop	r11
    2a4c:	af 90       	pop	r10
    2a4e:	9f 90       	pop	r9
    2a50:	8f 90       	pop	r8
    2a52:	08 95       	ret

00002a54 <_ZN6IRrecv13decodeWhynterEP14decode_results>:
}
#endif

//+=============================================================================
#if DECODE_WHYNTER
bool IRrecv::decodeWhynter(decode_results *results) {
    2a54:	af 92       	push	r10
    2a56:	bf 92       	push	r11
    2a58:	cf 92       	push	r12
    2a5a:	df 92       	push	r13
    2a5c:	ef 92       	push	r14
    2a5e:	ff 92       	push	r15
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    long data = 0;
    int offset = 1;  // skip initial space

    // Check we have the right amount of data
    if (irparams.rawlen < (2 * WHYNTER_BITS) + 6) {
    2a68:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <irparams+0x4>
    2a6c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <irparams+0x5>
    2a70:	86 34       	cpi	r24, 0x46	; 70
    2a72:	91 05       	cpc	r25, r1
    2a74:	10 f4       	brcc	.+4      	; 0x2a7a <_ZN6IRrecv13decodeWhynterEP14decode_results+0x26>
        return false;
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	85 c0       	rjmp	.+266    	; 0x2b84 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x130>
    2a7a:	eb 01       	movw	r28, r22
    }

    // Sequence begins with a bit mark and a zero space
    if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK)) {
    2a7c:	eb 85       	ldd	r30, Y+11	; 0x0b
    2a7e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	6e ee       	ldi	r22, 0xEE	; 238
    2a86:	72 e0       	ldi	r23, 0x02	; 2
    2a88:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    2a8c:	89 2b       	or	r24, r25
    2a8e:	99 f3       	breq	.-26     	; 0x2a76 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x22>
        return false;
    }
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE)) {
    2a90:	eb 85       	ldd	r30, Y+11	; 0x0b
    2a92:	fc 85       	ldd	r31, Y+12	; 0x0c
    2a94:	84 81       	ldd	r24, Z+4	; 0x04
    2a96:	95 81       	ldd	r25, Z+5	; 0x05
    2a98:	6e ee       	ldi	r22, 0xEE	; 238
    2a9a:	72 e0       	ldi	r23, 0x02	; 2
    2a9c:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2aa0:	89 2b       	or	r24, r25
    2aa2:	49 f3       	breq	.-46     	; 0x2a76 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x22>
        return false;
    }
    offset++;

    // header mark and space
    if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_HDR_MARK)) {
    2aa4:	eb 85       	ldd	r30, Y+11	; 0x0b
    2aa6:	fc 85       	ldd	r31, Y+12	; 0x0c
    2aa8:	86 81       	ldd	r24, Z+6	; 0x06
    2aaa:	97 81       	ldd	r25, Z+7	; 0x07
    2aac:	62 e2       	ldi	r22, 0x22	; 34
    2aae:	7b e0       	ldi	r23, 0x0B	; 11
    2ab0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    2ab4:	89 2b       	or	r24, r25
    2ab6:	f9 f2       	breq	.-66     	; 0x2a76 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x22>
        return false;
    }
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], WHYNTER_HDR_SPACE)) {
    2ab8:	eb 85       	ldd	r30, Y+11	; 0x0b
    2aba:	fc 85       	ldd	r31, Y+12	; 0x0c
    2abc:	80 85       	ldd	r24, Z+8	; 0x08
    2abe:	91 85       	ldd	r25, Z+9	; 0x09
    2ac0:	62 e2       	ldi	r22, 0x22	; 34
    2ac2:	7b e0       	ldi	r23, 0x0B	; 11
    2ac4:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2ac8:	89 2b       	or	r24, r25
    2aca:	a9 f2       	breq	.-86     	; 0x2a76 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x22>
    2acc:	3c e0       	ldi	r19, 0x0C	; 12
    2ace:	a3 2e       	mov	r10, r19
    2ad0:	b1 2c       	mov	r11, r1
    2ad2:	05 e0       	ldi	r16, 0x05	; 5
    2ad4:	10 e0       	ldi	r17, 0x00	; 0
    2ad6:	c1 2c       	mov	r12, r1
    2ad8:	d1 2c       	mov	r13, r1
    2ada:	76 01       	movw	r14, r12
    }
    offset++;

    // data bits
    for (int i = 0; i < WHYNTER_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK)) {
    2adc:	eb 85       	ldd	r30, Y+11	; 0x0b
    2ade:	fc 85       	ldd	r31, Y+12	; 0x0c
    2ae0:	c8 01       	movw	r24, r16
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	e8 0f       	add	r30, r24
    2ae8:	f9 1f       	adc	r31, r25
    2aea:	80 81       	ld	r24, Z
    2aec:	91 81       	ldd	r25, Z+1	; 0x01
    2aee:	6e ee       	ldi	r22, 0xEE	; 238
    2af0:	72 e0       	ldi	r23, 0x02	; 2
    2af2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    2af6:	89 2b       	or	r24, r25
    2af8:	09 f4       	brne	.+2      	; 0x2afc <_ZN6IRrecv13decodeWhynterEP14decode_results+0xa8>
    2afa:	bd cf       	rjmp	.-134    	; 0x2a76 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x22>
            return false;
        }
        offset++;

        if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE)) {
    2afc:	eb 85       	ldd	r30, Y+11	; 0x0b
    2afe:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b00:	ea 0d       	add	r30, r10
    2b02:	fb 1d       	adc	r31, r11
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	66 e6       	ldi	r22, 0x66	; 102
    2b0a:	78 e0       	ldi	r23, 0x08	; 8
    2b0c:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2b10:	89 2b       	or	r24, r25
    2b12:	39 f0       	breq	.+14     	; 0x2b22 <_ZN6IRrecv13decodeWhynterEP14decode_results+0xce>
            data = (data << 1) | 1;
    2b14:	cc 0c       	add	r12, r12
    2b16:	dd 1c       	adc	r13, r13
    2b18:	ee 1c       	adc	r14, r14
    2b1a:	ff 1c       	adc	r15, r15
    2b1c:	68 94       	set
    2b1e:	c0 f8       	bld	r12, 0
    2b20:	11 c0       	rjmp	.+34     	; 0x2b44 <_ZN6IRrecv13decodeWhynterEP14decode_results+0xf0>
        } else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE)) {
    2b22:	eb 85       	ldd	r30, Y+11	; 0x0b
    2b24:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b26:	ea 0d       	add	r30, r10
    2b28:	fb 1d       	adc	r31, r11
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	6e ee       	ldi	r22, 0xEE	; 238
    2b30:	72 e0       	ldi	r23, 0x02	; 2
    2b32:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z11MATCH_SPACEii>
    2b36:	89 2b       	or	r24, r25
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <_ZN6IRrecv13decodeWhynterEP14decode_results+0xe8>
    2b3a:	9d cf       	rjmp	.-198    	; 0x2a76 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x22>
            data = (data << 1) | 0;
    2b3c:	cc 0c       	add	r12, r12
    2b3e:	dd 1c       	adc	r13, r13
    2b40:	ee 1c       	adc	r14, r14
    2b42:	ff 1c       	adc	r15, r15
        } else {
            return false;
        }
        offset++;
    2b44:	0e 5f       	subi	r16, 0xFE	; 254
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	84 e0       	ldi	r24, 0x04	; 4
    2b4a:	a8 0e       	add	r10, r24
    2b4c:	b1 1c       	adc	r11, r1
        return false;
    }
    offset++;

    // data bits
    for (int i = 0; i < WHYNTER_BITS; i++) {
    2b4e:	05 34       	cpi	r16, 0x45	; 69
    2b50:	11 05       	cpc	r17, r1
    2b52:	21 f6       	brne	.-120    	; 0x2adc <_ZN6IRrecv13decodeWhynterEP14decode_results+0x88>
        }
        offset++;
    }

    // trailing mark
    if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK)) {
    2b54:	eb 85       	ldd	r30, Y+11	; 0x0b
    2b56:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b58:	e6 57       	subi	r30, 0x76	; 118
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	91 81       	ldd	r25, Z+1	; 0x01
    2b60:	6e ee       	ldi	r22, 0xEE	; 238
    2b62:	72 e0       	ldi	r23, 0x02	; 2
    2b64:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z10MATCH_MARKii>
    2b68:	89 2b       	or	r24, r25
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <_ZN6IRrecv13decodeWhynterEP14decode_results+0x11a>
    2b6c:	84 cf       	rjmp	.-248    	; 0x2a76 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x22>
        return false;
    }

    // Success
    results->bits = WHYNTER_BITS;
    2b6e:	80 e2       	ldi	r24, 0x20	; 32
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9a 87       	std	Y+10, r25	; 0x0a
    2b74:	89 87       	std	Y+9, r24	; 0x09
    results->value = data;
    2b76:	cb 82       	std	Y+3, r12	; 0x03
    2b78:	dc 82       	std	Y+4, r13	; 0x04
    2b7a:	ed 82       	std	Y+5, r14	; 0x05
    2b7c:	fe 82       	std	Y+6, r15	; 0x06
    results->decode_type = WHYNTER;
    2b7e:	88 e0       	ldi	r24, 0x08	; 8
    2b80:	88 83       	st	Y, r24
    return true;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
}
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	ff 90       	pop	r15
    2b8e:	ef 90       	pop	r14
    2b90:	df 90       	pop	r13
    2b92:	cf 90       	pop	r12
    2b94:	bf 90       	pop	r11
    2b96:	af 90       	pop	r10
    2b98:	08 95       	ret

00002b9a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2b9a:	08 95       	ret

00002b9c <__mulsi3>:
    2b9c:	db 01       	movw	r26, r22
    2b9e:	8f 93       	push	r24
    2ba0:	9f 93       	push	r25
    2ba2:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__muluhisi3>
    2ba6:	bf 91       	pop	r27
    2ba8:	af 91       	pop	r26
    2baa:	a2 9f       	mul	r26, r18
    2bac:	80 0d       	add	r24, r0
    2bae:	91 1d       	adc	r25, r1
    2bb0:	a3 9f       	mul	r26, r19
    2bb2:	90 0d       	add	r25, r0
    2bb4:	b2 9f       	mul	r27, r18
    2bb6:	90 0d       	add	r25, r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	08 95       	ret

00002bbc <__udivmodhi4>:
    2bbc:	aa 1b       	sub	r26, r26
    2bbe:	bb 1b       	sub	r27, r27
    2bc0:	51 e1       	ldi	r21, 0x11	; 17
    2bc2:	07 c0       	rjmp	.+14     	; 0x2bd2 <__udivmodhi4_ep>

00002bc4 <__udivmodhi4_loop>:
    2bc4:	aa 1f       	adc	r26, r26
    2bc6:	bb 1f       	adc	r27, r27
    2bc8:	a6 17       	cp	r26, r22
    2bca:	b7 07       	cpc	r27, r23
    2bcc:	10 f0       	brcs	.+4      	; 0x2bd2 <__udivmodhi4_ep>
    2bce:	a6 1b       	sub	r26, r22
    2bd0:	b7 0b       	sbc	r27, r23

00002bd2 <__udivmodhi4_ep>:
    2bd2:	88 1f       	adc	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	5a 95       	dec	r21
    2bd8:	a9 f7       	brne	.-22     	; 0x2bc4 <__udivmodhi4_loop>
    2bda:	80 95       	com	r24
    2bdc:	90 95       	com	r25
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	08 95       	ret

00002be4 <__divmodhi4>:
    2be4:	97 fb       	bst	r25, 7
    2be6:	07 2e       	mov	r0, r23
    2be8:	16 f4       	brtc	.+4      	; 0x2bee <__divmodhi4+0xa>
    2bea:	00 94       	com	r0
    2bec:	07 d0       	rcall	.+14     	; 0x2bfc <__divmodhi4_neg1>
    2bee:	77 fd       	sbrc	r23, 7
    2bf0:	09 d0       	rcall	.+18     	; 0x2c04 <__divmodhi4_neg2>
    2bf2:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
    2bf6:	07 fc       	sbrc	r0, 7
    2bf8:	05 d0       	rcall	.+10     	; 0x2c04 <__divmodhi4_neg2>
    2bfa:	3e f4       	brtc	.+14     	; 0x2c0a <__divmodhi4_exit>

00002bfc <__divmodhi4_neg1>:
    2bfc:	90 95       	com	r25
    2bfe:	81 95       	neg	r24
    2c00:	9f 4f       	sbci	r25, 0xFF	; 255
    2c02:	08 95       	ret

00002c04 <__divmodhi4_neg2>:
    2c04:	70 95       	com	r23
    2c06:	61 95       	neg	r22
    2c08:	7f 4f       	sbci	r23, 0xFF	; 255

00002c0a <__divmodhi4_exit>:
    2c0a:	08 95       	ret

00002c0c <__udivmodsi4>:
    2c0c:	a1 e2       	ldi	r26, 0x21	; 33
    2c0e:	1a 2e       	mov	r1, r26
    2c10:	aa 1b       	sub	r26, r26
    2c12:	bb 1b       	sub	r27, r27
    2c14:	fd 01       	movw	r30, r26
    2c16:	0d c0       	rjmp	.+26     	; 0x2c32 <__udivmodsi4_ep>

00002c18 <__udivmodsi4_loop>:
    2c18:	aa 1f       	adc	r26, r26
    2c1a:	bb 1f       	adc	r27, r27
    2c1c:	ee 1f       	adc	r30, r30
    2c1e:	ff 1f       	adc	r31, r31
    2c20:	a2 17       	cp	r26, r18
    2c22:	b3 07       	cpc	r27, r19
    2c24:	e4 07       	cpc	r30, r20
    2c26:	f5 07       	cpc	r31, r21
    2c28:	20 f0       	brcs	.+8      	; 0x2c32 <__udivmodsi4_ep>
    2c2a:	a2 1b       	sub	r26, r18
    2c2c:	b3 0b       	sbc	r27, r19
    2c2e:	e4 0b       	sbc	r30, r20
    2c30:	f5 0b       	sbc	r31, r21

00002c32 <__udivmodsi4_ep>:
    2c32:	66 1f       	adc	r22, r22
    2c34:	77 1f       	adc	r23, r23
    2c36:	88 1f       	adc	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	1a 94       	dec	r1
    2c3c:	69 f7       	brne	.-38     	; 0x2c18 <__udivmodsi4_loop>
    2c3e:	60 95       	com	r22
    2c40:	70 95       	com	r23
    2c42:	80 95       	com	r24
    2c44:	90 95       	com	r25
    2c46:	9b 01       	movw	r18, r22
    2c48:	ac 01       	movw	r20, r24
    2c4a:	bd 01       	movw	r22, r26
    2c4c:	cf 01       	movw	r24, r30
    2c4e:	08 95       	ret

00002c50 <__umulhisi3>:
    2c50:	a2 9f       	mul	r26, r18
    2c52:	b0 01       	movw	r22, r0
    2c54:	b3 9f       	mul	r27, r19
    2c56:	c0 01       	movw	r24, r0
    2c58:	a3 9f       	mul	r26, r19
    2c5a:	70 0d       	add	r23, r0
    2c5c:	81 1d       	adc	r24, r1
    2c5e:	11 24       	eor	r1, r1
    2c60:	91 1d       	adc	r25, r1
    2c62:	b2 9f       	mul	r27, r18
    2c64:	70 0d       	add	r23, r0
    2c66:	81 1d       	adc	r24, r1
    2c68:	11 24       	eor	r1, r1
    2c6a:	91 1d       	adc	r25, r1
    2c6c:	08 95       	ret

00002c6e <__muluhisi3>:
    2c6e:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__umulhisi3>
    2c72:	a5 9f       	mul	r26, r21
    2c74:	90 0d       	add	r25, r0
    2c76:	b4 9f       	mul	r27, r20
    2c78:	90 0d       	add	r25, r0
    2c7a:	a4 9f       	mul	r26, r20
    2c7c:	80 0d       	add	r24, r0
    2c7e:	91 1d       	adc	r25, r1
    2c80:	11 24       	eor	r1, r1
    2c82:	08 95       	ret

00002c84 <__ashldi3>:
    2c84:	0f 93       	push	r16
    2c86:	08 30       	cpi	r16, 0x08	; 8
    2c88:	90 f0       	brcs	.+36     	; 0x2cae <__ashldi3+0x2a>
    2c8a:	98 2f       	mov	r25, r24
    2c8c:	87 2f       	mov	r24, r23
    2c8e:	76 2f       	mov	r23, r22
    2c90:	65 2f       	mov	r22, r21
    2c92:	54 2f       	mov	r21, r20
    2c94:	43 2f       	mov	r20, r19
    2c96:	32 2f       	mov	r19, r18
    2c98:	22 27       	eor	r18, r18
    2c9a:	08 50       	subi	r16, 0x08	; 8
    2c9c:	f4 cf       	rjmp	.-24     	; 0x2c86 <__ashldi3+0x2>
    2c9e:	22 0f       	add	r18, r18
    2ca0:	33 1f       	adc	r19, r19
    2ca2:	44 1f       	adc	r20, r20
    2ca4:	55 1f       	adc	r21, r21
    2ca6:	66 1f       	adc	r22, r22
    2ca8:	77 1f       	adc	r23, r23
    2caa:	88 1f       	adc	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	0a 95       	dec	r16
    2cb0:	b2 f7       	brpl	.-20     	; 0x2c9e <__ashldi3+0x1a>
    2cb2:	0f 91       	pop	r16
    2cb4:	08 95       	ret

00002cb6 <__ashrdi3>:
    2cb6:	97 fb       	bst	r25, 7
    2cb8:	10 f8       	bld	r1, 0

00002cba <__lshrdi3>:
    2cba:	16 94       	lsr	r1
    2cbc:	00 08       	sbc	r0, r0
    2cbe:	0f 93       	push	r16
    2cc0:	08 30       	cpi	r16, 0x08	; 8
    2cc2:	98 f0       	brcs	.+38     	; 0x2cea <__lshrdi3+0x30>
    2cc4:	08 50       	subi	r16, 0x08	; 8
    2cc6:	23 2f       	mov	r18, r19
    2cc8:	34 2f       	mov	r19, r20
    2cca:	45 2f       	mov	r20, r21
    2ccc:	56 2f       	mov	r21, r22
    2cce:	67 2f       	mov	r22, r23
    2cd0:	78 2f       	mov	r23, r24
    2cd2:	89 2f       	mov	r24, r25
    2cd4:	90 2d       	mov	r25, r0
    2cd6:	f4 cf       	rjmp	.-24     	; 0x2cc0 <__lshrdi3+0x6>
    2cd8:	05 94       	asr	r0
    2cda:	97 95       	ror	r25
    2cdc:	87 95       	ror	r24
    2cde:	77 95       	ror	r23
    2ce0:	67 95       	ror	r22
    2ce2:	57 95       	ror	r21
    2ce4:	47 95       	ror	r20
    2ce6:	37 95       	ror	r19
    2ce8:	27 95       	ror	r18
    2cea:	0a 95       	dec	r16
    2cec:	aa f7       	brpl	.-22     	; 0x2cd8 <__lshrdi3+0x1e>
    2cee:	0f 91       	pop	r16
    2cf0:	08 95       	ret

00002cf2 <__tablejump2__>:
    2cf2:	ee 0f       	add	r30, r30
    2cf4:	ff 1f       	adc	r31, r31
    2cf6:	05 90       	lpm	r0, Z+
    2cf8:	f4 91       	lpm	r31, Z
    2cfa:	e0 2d       	mov	r30, r0
    2cfc:	09 94       	ijmp

00002cfe <_exit>:
    2cfe:	f8 94       	cli

00002d00 <__stop_program>:
    2d00:	ff cf       	rjmp	.-2      	; 0x2d00 <__stop_program>
